



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#FFF">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">

<link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico">
  <meta http-equiv="Cache-Control" content="no-transform">
  <meta http-equiv="Cache-Control" content="no-siteapp">


<link rel="alternate" type="application/rss+xml" title="" href="https://monkeyhh.top/rss.xml" />
<link rel="alternate" type="application/atom+xml" title="" href="https://monkeyhh.top/atom.xml" />
<link rel="alternate" type="application/json" title="" href="https://monkeyhh.top/feed.json" />

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">

<link rel="stylesheet" href="/css/app.css?v=0.2.5">

  
  <meta name="keywords" content="Computer-Networking,TCP,UDP" />


<link rel="canonical" href="https://monkeyhh.top/Computer-Networking/Computer-Networking/TCP%E5%92%8CUDP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9">



  <title>
TCP和UDP基础知识点 - Computer-Networking |
Monkey's Blog = </title>
<meta name="generator" content="Hexo 5.4.0"></head>
<body itemscope itemtype="http://schema.org/WebPage">
  <div id="loading">
    <div class="cat">
      <div class="body"></div>
      <div class="head">
        <div class="face"></div>
      </div>
      <div class="foot">
        <div class="tummy-end"></div>
        <div class="bottom"></div>
        <div class="legs left"></div>
        <div class="legs right"></div>
      </div>
      <div class="paw">
        <div class="hands left"></div>
        <div class="hands right"></div>
      </div>
    </div>
  </div>
  <div id="container">
    <header id="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="inner">
        <div id="brand">
          <div class="pjax">
          
  <h1 itemprop="name headline">TCP和UDP基础知识点
  </h1>
  
<div class="meta">
  <span class="item" title="Created: 2021-08-15 09:28:32">
    <span class="icon">
      <i class="ic i-calendar"></i>
    </span>
    <span class="text">Posted on</span>
    <time itemprop="dateCreated datePublished" datetime="2021-08-15T09:28:32+08:00">2021-08-15</time>
  </span>
  <span class="item" title="Symbols count in article">
    <span class="icon">
      <i class="ic i-pen"></i>
    </span>
    <span class="text">Symbols count in article</span>
    <span>8.5k</span>
    <span class="text">words</span>
  </span>
  <span class="item" title="Reading time">
    <span class="icon">
      <i class="ic i-clock"></i>
    </span>
    <span class="text">Reading time</span>
    <span>8 mins.</span>
  </span>
</div>


          </div>
        </div>
        <nav id="nav">
  <div class="inner">
    <div class="toggle">
      <div class="lines" aria-label="Toggle navigation bar">
        <span class="line"></span>
        <span class="line"></span>
        <span class="line"></span>
      </div>
    </div>
    <ul class="menu">
      <li class="item title"><a href="/" rel="start">Monkey's Blog</a></li>
    </ul>
    <ul class="right">
      <li class="item theme">
        <i class="ic i-sun"></i>
      </li>
      <li class="item search">
        <i class="ic i-search"></i>
      </li>
    </ul>
  </div>
</nav>

      </div>
      <div id="imgs" class="pjax">
          <img src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202111020852730.png">
      </div>
    </header>
    <div id="waves">
      <svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
        <defs>
          <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z" />
        </defs>
        <g class="parallax">
          <use xlink:href="#gentle-wave" x="48" y="0" />
          <use xlink:href="#gentle-wave" x="48" y="3" />
          <use xlink:href="#gentle-wave" x="48" y="5" />
          <use xlink:href="#gentle-wave" x="48" y="7" />
        </g>
      </svg>
    </div>
    <main>
      <div class="inner">
        <div id="main" class="pjax">
          
  <div class="article wrap">
    
<div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList">
<i class="ic i-home"></i>
<span><a href="/">Home</a></span><i class="ic i-angle-right"></i>
<span  class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/Computer-Networking/" itemprop="item" rel="index" title="In Computer-Networking"><span itemprop="name">Computer-Networking</span></a>
<meta itemprop="position" content="1" /></span>
</div>

    <article itemscope itemtype="http://schema.org/Article" class="post block" lang="en">
  <link itemprop="mainEntityOfPage" href="https://monkeyhh.top/Computer-Networking/Computer-Networking/TCP%E5%92%8CUDP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9">

  <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
    <meta itemprop="image" content="/images/avatar.jpg">
    <meta itemprop="name" content="Monkey-HH">
    <meta itemprop="description" content=", Learn, share, make progress">
  </span>

  <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
    <meta itemprop="name" content="">
  </span>

  <div class="body md" itemprop="articleBody">
    

    <h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>本文将按照下述网络介绍运输层两个重要的协议，TCP和UDP协议</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110101657537.png" alt="image-20211010165730480"></p>
<h1 id="TCP和UDP概述"><a href="#TCP和UDP概述" class="headerlink" title="TCP和UDP概述"></a>TCP和UDP概述</h1><p>运输层向高层用户屏蔽了下面网络核心的细节，使得应用程序看见好像在两个运输层实体之间有一条<u>端到端</u>的逻辑通信信道。</p>
<p>TCP和UDP都离不开计算机的端口，并实现<code>复用</code>和<code>分用</code>功能</p>
<ul>
<li>复用：应用层所有应用进程都可以通过运输层再传送给IP层。</li>
<li>分用：运输层从IP层收到发送给各应用进程的数据后，分别交付给致命的各应用进程。</li>
</ul>
<table>
<thead>
<tr>
<th align="center">协议</th>
<th align="center">特点</th>
<th align="center">数据单位</th>
<th align="center">首部大小</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TCP</td>
<td align="center">面向连接、可靠、面向字节流（根据情况决定传输报文的长度）、全双工</td>
<td align="center">TCP报文段</td>
<td align="center">20字节</td>
<td>差错检测、可靠传输、连接管理、流量控制、拥塞控制</td>
</tr>
<tr>
<td align="center">UDP</td>
<td align="center">无连接、尽最大努力、面向报文（上层报文整个传输）</td>
<td align="center">UDP用户数据报</td>
<td align="center">8字节</td>
<td>差错检测</td>
</tr>
</tbody></table>
<h1 id="说说这两个协议的首部"><a href="#说说这两个协议的首部" class="headerlink" title="说说这两个协议的首部"></a>说说这两个协议的首部</h1><h2 id="TCP首部"><a href="#TCP首部" class="headerlink" title="TCP首部"></a>TCP首部</h2><p>TCP报文段首部的前20个字节是固定的(图5-14)，后面有4n字节是根据需要而增加的选项(n是整数)。因此TCP首部的最小长度是20字节。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110091740030.png" alt="image-20211009174041976"></p>
<h3 id="源端口、目标端口"><a href="#源端口、目标端口" class="headerlink" title="源端口、目标端口"></a>源端口、目标端口</h3><p>如何标识唯一标识一个连接？答案是 TCP 连接的<code>四元组</code>——源 IP、源端口、目标 IP 和目标端口。</p>
<p>那 TCP 报文怎么没有源 IP 和目标 IP 呢？这是因为在 IP 层就已经处理了 IP 。TCP 只需要记录两者的端口即可。</p>
<h3 id="序列号"><a href="#序列号" class="headerlink" title="序列号"></a>序列号</h3><p>即<code>Sequence number</code>, 指的是本报文段第一个字节的序列号。</p>
<p>从图中可以看出，序列号是一个长为 4 个字节，也就是 32 位的无符号整数，表示范围为 [0 ，2^32 - 1]。如果到达最大值了后就循环到0。</p>
<p>序列号在 TCP 通信的过程中有两个作用:</p>
<ol>
<li>在 SYN 报文中交换彼此的初始序列号。</li>
<li>保证数据包按正确的顺序组装。</li>
</ol>
<h3 id="确认号"><a href="#确认号" class="headerlink" title="确认号"></a>确认号</h3><p>即<code>ACK(Acknowledgment number)</code>标志位为1时，确认号有效。用来告知对方下一个期望接收的序列号，对方发来的序号<code>确认号</code>前的所有字节已经全部收到。</p>
<h3 id="数据偏移"><a href="#数据偏移" class="headerlink" title="数据偏移"></a>数据偏移</h3><p>头部长度</p>
<h3 id="标记位"><a href="#标记位" class="headerlink" title="标记位"></a>标记位</h3><p>常见的标记位有<code>SYN</code>,<code>ACK</code>,<code>FIN</code>,<code>RST</code>,<code>PSH</code>。</p>
<p><code>SYN(SYNchronization)</code>：同步的意思，SYN=1&amp;&amp;ACK=0表明这是一个连接请求报文段。对方同意后会发SYN=1&amp;&amp;ACK=1。</p>
<p><code>ACK（ACKnowledgement）</code>：ACK=1时，确认才有效。</p>
<p> <code>FIN</code>： 即 Finish，=1表示要释放连接。</p>
<p><code>RST</code>：即 Reset，用来强制断开连接。</p>
<p><code>PSH</code>： 即 Push, 告知对方这些数据包收到后应该马上交给上层的应用，不能缓存。</p>
<h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p>占用两个字节，也就是 16 位，但实际上是不够用的。因此 TCP 引入了窗口缩放的选项，作为窗口缩放的比例因子，这个比例因子的范围在 0 ~ 14，比例因子可以将窗口的值扩大为原来的 2 ^ n 次方。</p>
<h3 id="校验和"><a href="#校验和" class="headerlink" title="校验和"></a>校验和</h3><p>占用两个字节，防止传输过程中数据包有损坏，如果遇到校验和有差错的报文，TCP 直接丢弃之，等待重传。</p>
<h3 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h3><p>可选项的格式如下:</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110091743818.webp" alt="img"></p>
<p>常用的可选项有以下几个:</p>
<ul>
<li>TimeStamp: TCP 时间戳，后面详细介绍。</li>
<li>MSS: 指的是 TCP 允许的从对方接收的最大报文段。</li>
<li>SACK: 选择确认选项。</li>
<li>Window Scale： 窗口缩放选项。</li>
</ul>
<h4 id="说说TimeStamp有什么用？"><a href="#说说TimeStamp有什么用？" class="headerlink" title="说说TimeStamp有什么用？"></a>说说TimeStamp有什么用？</h4><p>（1）计算RTT</p>
<p>发送方再发送报文段时把当前时钟的时间值放入时间戳字段，接收方在确认该报文段时把时间戳字段值复制到时间戳放回去，发送方收到确认报文后，可以准确算出RTT</p>
<p>（2）防止序号重复</p>
<p>前面提到，序号是有限的，只有32位，所以可以通过时间戳将序号相同的报文段区分开。</p>
<h2 id="UDP首部"><a href="#UDP首部" class="headerlink" title="UDP首部"></a>UDP首部</h2><ul>
<li>(1)<strong>源端口</strong>：2字节长，在需要对方回信时选用。不需要时可用全0。</li>
<li>(2)<strong>目的端口</strong>：2字节长，这在终点交付报文时必须使用。</li>
<li>(3)<strong>长度</strong>：2字节长，表示UDP用户数据报的长度，其最小值是8 (仅有首部)。</li>
<li>(4)<strong>检验和</strong>：2字节长，检测UDP用户数据报在传输中是否有错。有错就丢弃。</li>
</ul>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110091720459.png" alt="image-20211009172037414"></p>
<blockquote>
<p>UDP是怎么做到差错检测的？</p>
<p>在计算检验和时，会有一个<strong>伪首部</strong>（只用于计算检验和，不传输），UDP计算检验和的方法和计算IP数据报首部检验和的方法相似。但不同的是: IP 数据报的检验和只检验IP数据报的首部，但UDP的检验和是把首部和数据部分一起都检验。</p>
<p>然后从左到右，每2个字节为一行（检验和设为全0），排满，然后相加，结果取反码。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110091804812.png" alt="image-20211009180403750"></p>
</blockquote>
<h1 id="说说TCP的连接管理"><a href="#说说TCP的连接管理" class="headerlink" title="说说TCP的连接管理"></a>说说TCP的连接管理</h1><h2 id="TCP三次握手建立连接"><a href="#TCP三次握手建立连接" class="headerlink" title="TCP三次握手建立连接"></a>TCP三次握手建立连接</h2><p>其实应该叫三报文握手，因为其实是一次握手交换了三个报文。</p>
<p>建立连接要确认的<strong>双方</strong>都要具备的能力： <code>发送的能力</code>和<code>接收的能力</code>，于是有三次握手的过程</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110091802899.png" alt="image-20211009180219849"></p>
<ol>
<li><p>从最开始双方都处于<code>CLOSED</code>状态。然后服务端开始监听某个端口，进入了<code>LISTEN</code>状态。</p>
</li>
<li><p>然后客户端主动发起连接，发送 SYN , 自己变成了<code>SYN-SENT</code>状态。</p>
</li>
<li><p>服务端接收到，返回<code>SYN</code>和<code>ACK</code>(对应客户端发来的SYN)，自己变成了<code>SYN-REVD</code>。</p>
</li>
<li><p>之后客户端再发送<code>ACK</code>给服务端，自己变成了<code>ESTABLISHED</code>状态；服务端收到<code>ACK</code>之后，也变成了<code>ESTABLISHED</code>状态。</p>
</li>
</ol>
<p><strong>注意</strong>：SYN 是需要消耗一个序列号的，下次发送对应的 ACK 序列号要加1。</p>
<blockquote>
<p>规则：凡是需要对端确认的，一定消耗TCP报文的序列号。</p>
</blockquote>
<p>SYN 需要对端的确认， 而 ACK 并不需要，因此 SYN 消耗一个序列号而 ACK 不需要。</p>
<h3 id="为什么不能2次握手"><a href="#为什么不能2次握手" class="headerlink" title="为什么不能2次握手"></a>为什么不能2次握手</h3><p>根本原因: <u>无法确认客户端的接收能力</u>。</p>
<p>分析如下:</p>
<p>A给B发了SYN包，但超时了没收到确认报文，于是重传，欸，这一次的成功了，然后干完活，把连接断了。</p>
<p>然后事情来了，第一次的SYN包居然只是堵车，不是丢失，到了B。B就建立了连接，但是A没有，A不知道B 收到了这个自己认为丢失了的SYN包，但后B就被PUA了，造成资源浪费。</p>
<h3 id="为什么不能4次"><a href="#为什么不能4次" class="headerlink" title="为什么不能4次"></a>为什么不能4次</h3><p>3次能干的事，要4次干嘛。</p>
<h3 id="三次握手的过程中可以携带数据吗？"><a href="#三次握手的过程中可以携带数据吗？" class="headerlink" title="三次握手的过程中可以携带数据吗？"></a>三次握手的过程中可以携带数据吗？</h3><p>第三次握手的时候，可以携带。前两次握手不能携带数据。</p>
<p>如果前两次握手能够携带数据，那么一旦有人想攻击服务器，那么他只需要在第一次握手中的 SYN 报文中放大量数据，那么服务器势必会消耗更多的<strong>时间</strong>和<strong>内存空间</strong>去处理这些数据，增大了服务器被攻击的风险。</p>
<p>第三次握手的时候，客户端已经处于<code>ESTABLISHED</code>状态，并且已经能够确认服务器的接收、发送能力正常，这个时候相对安全了，可以携带数据。</p>
<h3 id="同时向对方请求连接会咋样？"><a href="#同时向对方请求连接会咋样？" class="headerlink" title="同时向对方请求连接会咋样？"></a>同时向对方请求连接会咋样？</h3><p>如果双方同时发 <code>SYN</code>报文，状态变化会是怎样的呢？</p>
<p>这是一个可能会发生的情况。</p>
<p>状态变迁如下:</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110091822944.png" alt="image-20211009182251891"></p>
<p>在发送方给接收方发<code>SYN</code>报文的同时，接收方也给发送方发<code>SYN</code>报文，两个人刚上了!</p>
<p>发完<code>SYN</code>，两者的状态都变为<code>SYN-SENT</code>。</p>
<p>在各自收到对方的<code>SYN</code>后，两者状态都变为<code>SYN-REVD</code>。</p>
<p>接着会回复对应的<code>ACK + SYN</code>，这个报文在对方接收之后，两者状态一起变为<code>ESTABLISHED</code>。</p>
<p>这就是同时打开情况下的状态变迁。</p>
<h2 id="说说TCP四次挥手断开连接"><a href="#说说TCP四次挥手断开连接" class="headerlink" title="说说TCP四次挥手断开连接"></a>说说TCP四次挥手断开连接</h2><p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110091823944.png" alt="image-20211009182350882"></p>
<p>刚开始双方处于<code>ESTABLISHED</code>状态。</p>
<p>客户端要断开了，向服务器发送 <code>FIN</code> 报文，FIN是一个标志位，表示finish。</p>
<p>发送后客户端变成了<code>FIN-WAIT-1</code>状态。注意, 这时候客户端同时也变成了<code>half-close(半关闭)</code>状态，即无法向服务端发送报文，只能接收。</p>
<p>服务端接收后向客户端确认，变成了<code>CLOSED-WAIT</code>状态。</p>
<p>客户端接收到了服务端的确认，变成了<code>FIN-WAIT2</code>状态。</p>
<p>随后，服务端向客户端发送<code>FIN</code>，自己进入<code>LAST-ACK</code>状态，</p>
<p>客户端收到服务端发来的<code>FIN</code>后，自己变成了<code>TIME-WAIT</code>状态，然后发送 ACK 给服务端。</p>
<p>注意了，这个时候，客户端需要等待足够长的时间，具体来说，是 2 个 <code>MSL</code>(<code>Maximum Segment Lifetime，报文最大生存时间</code>), 在这段时间内如果客户端没有收到服务端的重发请求，那么表示 ACK 成功到达，挥手结束，否则客户端重发 ACK。</p>
<h3 id="为什么A在TIME-WAIT状态必须等待2MSL的时间？"><a href="#为什么A在TIME-WAIT状态必须等待2MSL的时间？" class="headerlink" title="为什么A在TIME-WAIT状态必须等待2MSL的时间？"></a>为什么A在TIME-WAIT状态必须等待2MSL的时间？</h3><p>可以拆分成两个问题</p>
<p>为什么要等？因为要看看B是不是真的收到A最后一次挥手信息，如果没收到B的超时重传，说明B收到了确认，自己就可以关了。</p>
<p>为什么是2MSL？那A第四次挥手的信息过去要1MSL，B如果没收到，发超时重传也要1MSL，加起来就2MSL。</p>
<h1 id="说说半连接队列和-SYN-Flood-攻击的关系"><a href="#说说半连接队列和-SYN-Flood-攻击的关系" class="headerlink" title="说说半连接队列和 SYN Flood 攻击的关系"></a>说说半连接队列和 SYN Flood 攻击的关系</h1><p>三次握手前，服务端的状态从<code>CLOSED</code>变为<code>LISTEN</code>, 同时在内部创建了两个队列：<strong>半连接队列</strong>和<strong>全连接队列</strong>，即<strong>SYN队列</strong>和<strong>ACCEPT队列</strong>。</p>
<h3 id="半连接队列"><a href="#半连接队列" class="headerlink" title="半连接队列"></a>半连接队列</h3><p>当客户端发送<code>SYN</code>到服务端，服务端收到以后回复<code>ACK</code>和<code>SYN</code>，状态由<code>LISTEN</code>变为<code>SYN_RCVD</code>，此时这个连接就被推入了<strong>SYN队列</strong>，也就是<strong>半连接队列</strong>。</p>
<h3 id="全连接队列"><a href="#全连接队列" class="headerlink" title="全连接队列"></a>全连接队列</h3><p>当客户端返回<code>ACK</code>, 服务端接收后，三次握手完成。这个时候连接等待被具体的应用取走，在被取走之前，它会被推入另外一个 TCP 维护的队列，也就是**全连接队列(Accept Queue)**。</p>
<h3 id="SYN-Flood-攻击原理"><a href="#SYN-Flood-攻击原理" class="headerlink" title="SYN Flood 攻击原理"></a>SYN Flood 攻击原理</h3><p>SYN Flood 属于典型的 DoS/DDoS 攻击。其攻击的原理很简单，就是用客户端在短时间内伪造大量不存在的 IP 地址，并向服务端疯狂发送<code>SYN</code>。对于服务端而言，会产生两个危险的后果:</p>
<ol>
<li>处理大量的<code>SYN</code>包并返回对应<code>ACK</code>, 势必有大量连接处于<code>SYN_RCVD</code>状态，从而占满整个<strong>半连接队列</strong>，无法处理正常的请求。</li>
<li>由于是不存在的 IP，服务端长时间收不到客户端的<code>ACK</code>，会导致服务端不断重发数据，直到耗尽服务端的资源。</li>
</ol>
<h3 id="如何应对-SYN-Flood-攻击？"><a href="#如何应对-SYN-Flood-攻击？" class="headerlink" title="如何应对 SYN Flood 攻击？"></a>如何应对 SYN Flood 攻击？</h3><ol>
<li>增加 SYN 连接，也就是增加半连接队列的容量。</li>
<li>减少 SYN + ACK 重试次数，避免大量的超时重发。</li>
<li>利用 SYN Cookie 技术，在服务端接收到<code>SYN</code>后不立即分配连接资源，而是根据这个<code>SYN</code>计算出一个Cookie，连同第二次握手回复给客户端，在客户端回复<code>ACK</code>的时候带上这个<code>Cookie</code>值，服务端验证 Cookie 合法之后才分配连接资源。</li>
</ol>
<h1 id="说说TCP快速打开的原理（TFO）"><a href="#说说TCP快速打开的原理（TFO）" class="headerlink" title="说说TCP快速打开的原理（TFO）"></a>说说TCP快速打开的原理（TFO）</h1><p>上面讲了 TCP 三次握手，可能有人会说，每次都三次握手好麻烦呀！能不能优化一点？</p>
<p>可以啊。今天来说说这个优化后的 TCP 握手流程，也就是 TCP 快速打开(TCP Fast Open, 即TFO)的原理。</p>
<p>优化的过程是这样的，还记得我们说 SYN Flood 攻击时提到的 SYN Cookie 吗？这个 Cookie 可不是浏览器的<code>Cookie</code>, 用它同样可以实现 TFO。</p>
<h3 id="TFO-流程"><a href="#TFO-流程" class="headerlink" title="TFO 流程"></a>TFO 流程</h3><h4 id="首轮三次握手"><a href="#首轮三次握手" class="headerlink" title="首轮三次握手"></a>首轮三次握手</h4><p>首先客户端发送<code>SYN</code>给服务端，服务端接收到。</p>
<p>注意哦！现在服务端不是立刻回复 SYN + ACK，而是通过计算得到一个<code>SYN Cookie</code>, 将这个<code>Cookie</code>放到 TCP 报文的 <code>Fast Open</code>选项中，然后才给客户端返回。</p>
<p>客户端拿到这个 Cookie 的值缓存下来。后面正常完成三次握手。</p>
<p>首轮三次握手就是这样的流程。而后面的三次握手就不一样啦！</p>
<h4 id="后面的三次握手"><a href="#后面的三次握手" class="headerlink" title="后面的三次握手"></a>后面的三次握手</h4><p>在后面的三次握手中，客户端会将之前缓存的 <code>Cookie</code>、<code>SYN</code> 和<code>HTTP请求</code>(是的，你没看错)发送给服务端，服务端验证了 Cookie 的合法性，如果不合法直接丢弃；如果是合法的，那么就正常返回<code>SYN + ACK</code>。</p>
<p>重点来了，现在服务端能向客户端发 HTTP 响应了！这是最显著的改变，三次握手还没建立，仅仅验证了 Cookie 的合法性，就可以返回 HTTP 响应了。</p>
<p>当然，客户端的<code>ACK</code>还得正常传过来，不然怎么叫三次握手嘛。</p>
<p>流程如下:</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110100940114.png" alt="image-20211010094007054"></p>
<p>注意: 客户端最后握手的 ACK 不一定要等到服务端的 HTTP 响应到达才发送，两个过程没有任何关系。</p>
<h3 id="TFO-的优势"><a href="#TFO-的优势" class="headerlink" title="TFO 的优势"></a>TFO 的优势</h3><p>TFO 的优势并不在与首轮三次握手，而在于后面的握手，在拿到客户端的 Cookie 并验证通过以后，可以直接返回 HTTP 响应，充分利用了<strong>1 个RTT</strong>(Round-Trip Time，往返时延)的时间<strong>提前进行数据传输</strong>，积累起来还是一个比较大的优势。</p>
<h1 id="说说TCP可靠传输"><a href="#说说TCP可靠传输" class="headerlink" title="说说TCP可靠传输"></a>说说TCP可靠传输</h1><p>TCP的滑动窗口是以<u>字节</u>为单位的。</p>
<h2 id="停止等待协议"><a href="#停止等待协议" class="headerlink" title="停止等待协议"></a>停止等待协议</h2><p>简而言之，就是A发送消息给B，B得发确认消息说收到了，如果A在规定时间内没收到确认消息，那就重新发送消息。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110092301350.png" alt="image-20211009230155299"></p>
<p>那规定时间内A没收到确认消息，有三种情况：</p>
<ul>
<li>第一种就是B没收到A的消息，就是上图b情况</li>
<li>第二种就是确认消息丢了，俗称确认丢失，如下图a</li>
<li>第三种就是网络堵塞，俗称确认迟到，如下图b</li>
</ul>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110092305728.png" alt="image-20211009230513671"></p>
<p>这种可靠传输协议就叫做<code>自动重传请求ARQ (Automatic Repeat reQuest)</code>。</p>
<blockquote>
<p>任何情况下，都不会是B发个消息过来给A说，你的信息有错啦，重发一遍，这样复杂化了。</p>
</blockquote>
<h2 id="连续ARQ协议"><a href="#连续ARQ协议" class="headerlink" title="连续ARQ协议"></a>连续ARQ协议</h2><p>那么很明显这种一次只能发一个消息的方式信道利用率太低了，能不能连续发多个消息啊（即流水线传输的方式）？这就涉及到<code>连续ARQ协议</code></p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110092308095.png" alt="image-20211009230828047"></p>
<p>这样子就可以很好地利用信道，连续发送多个分组，不必每发完一个分组就停顿下来等待确认，可以让信道上一直有数据不间断地传送。</p>
<p>那么具体是怎么实现呢？这就离不开下面讲的<code>滑动窗口</code>。</p>
<p>TCP 滑动窗口分为两种: <strong>发送窗口</strong>和<strong>接收窗口</strong>。</p>
<h2 id="发送窗口"><a href="#发送窗口" class="headerlink" title="发送窗口"></a>发送窗口</h2><p>其结构如下，此处做了一个简化，事实上序号有限，且循环使用，事实上为圆环状：</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110092201686.png" alt="image-20211009220146631"></p>
<p>小于P1的是已发送并已收到确认的部分，而大于P3的是不允许发送的部分。</p>
<ul>
<li>P3 - P1 = A的<code>发送窗口</code></li>
<li>P2 - P1 = 已发送但尚未收到确认的字节数</li>
<li>P3 - P2 = 允许发送但当前尚未发送的字节数(又称为<code>可用窗口</code>或<code>有效窗口</code>)</li>
</ul>
<p>TCP的<code>发送窗口</code>在<code>发送缓存</code>中滑过，P1前的都会从缓存中移除</p>
<h2 id="接收窗口"><a href="#接收窗口" class="headerlink" title="接收窗口"></a>接收窗口</h2><p>接收窗口结构和发送窗口类似：</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110092219082.png" alt="image-20211009221918035"></p>
<p>可以看到，接收窗口会影响发送窗口，只有接收窗口的左边滑动了（即发送确认），发送窗口的左边才会滑动。</p>
<h1 id="说说TCP流量控制"><a href="#说说TCP流量控制" class="headerlink" title="说说TCP流量控制"></a>说说TCP流量控制</h1><p>这里结合前面可靠运输部分</p>
<p>这里我们不用太复杂的例子，以一个最简单的来回来模拟一下流量控制的过程，方便大家理解。</p>
<p>首先双方三次握手，初始化各自的窗口大小，均为 200 个字节。</p>
<p>假如当前发送端给接收端发送 100 个字节，那么此时对于发送端而言，P2 当然要右移 100 个字节，也就是说当前的<code>可用窗口</code>减少了 100 个字节，这很好理解。</p>
<p>现在这 100 个到达了接收端，被放到接收端的缓冲队列中。不过此时由于大量负载的原因，接收端处理不了这么多字节，只能处理 40 个字节，剩下的 <code>60</code> 个字节被留在了缓冲队列中。</p>
<p>注意了，此时接收端的情况是处理能力不够用啦，你发送端给我少发点，所以此时接收端的接收窗口应该缩小，具体来说，缩小 60 个字节，由 200 个字节变成了 140 字节，因为缓冲队列还有 60 个字节没被应用拿走。</p>
<p>因此，<u>接收端会在 ACK 的报文首部带上缩小后的滑动窗口 140 字节</u>，发送端对应地调整发送窗口的大小为 140 个字节。</p>
<p>此时对于发送端而言，已经发送且确认的部分增加 40 字节，也就是P1 右移 40 个字节，同时<strong>发送窗口</strong>缩小为 140 个字节。</p>
<p>这也就是<strong>流量控制</strong>的过程。尽管回合再多，整个控制的过程和原理是一样的。</p>
<h1 id="说说TCP拥塞控制"><a href="#说说TCP拥塞控制" class="headerlink" title="说说TCP拥塞控制"></a>说说TCP拥塞控制</h1><p>首先，要区分一下流量控制和拥塞控制。</p>
<p><code>流量控制</code>：往往是指点对点通信量的控制，是个端到端的问题(接收端控制发送端)。流量控制所要做的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p>
<p><code>拥塞控制</code>：拥塞是指网络中对资源的需求&gt;可用资源，而拥塞控制是整个网络环境的影响，防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不至于过载，是一个<strong>全局性</strong>的过程，涉及到到所有的主机、所有的路由器，以及与降低网络传输性能有关的所有因素。</p>
<p>来看一个图方便理解拥塞控制。</p>
<p>在图5-23中的横坐标是<strong>提供的负载</strong>(offered load), 代表单位时间内输入给网络的分组数目。因此提供的负载也称为输入负载或网络负载。纵坐标是<strong>吞吐量</strong>(throughput)，代表单位时间内从网络输出的分组数目。</p>
<p>具有理想拥塞控制的网络，在吞吐量饱和之前，网络吞吐量应等于提供的负载，故吞吐量曲线是45°的斜线。但当提供的负载超过某-限度时，由于网络资源受限，吞吐量不再增长而保持为水平线，即吞吐量达到饱和。这就表明提供的负载中有一部分损失掉了(例如，输入到网络的某些分组被某个结点丢弃了)。虽然如此，在这种理想的拥塞控制作用下，网络的吞吐量仍然维持在其所能达到的最大值。</p>
<p>但是，实际网络的情况就很不相同了。从图5-23可看出，随着提供的负载的增大，网络吞吐量的增长速率逐渐减小。也就是说，在网络吞吐量还未达到饱和时，就已经有-部分的输入分组被丢弃了。当网络的吞吐量明显地小于理想的吞吐量时，网络就进入了<strong>轻度拥塞</strong>的状态。更值得注意的是，当提供的负载达到某一数值时， 网络的吞吐量反而随提供的负载的增大而下降，这时网络就进入了拥塞状态。当提供的负载继续增大到某一数值时， 网络的吞吐量就下降到零，网络已无法工作，这就是所谓的**死锁(deadlock)**。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110092346004.png" alt="image-20211009234652951"></p>
<p>对于拥塞控制来说，TCP 每条连接都需要维护两个核心状态:</p>
<ul>
<li>拥塞窗口（Congestion Window，cwnd）</li>
<li>慢开始门限（Slow Start Threshold，ssthresh）</li>
</ul>
<p>涉及到的算法有这几个:</p>
<ul>
<li>慢启动</li>
<li>拥塞避免</li>
<li>快速重传和快速恢复</li>
</ul>
<p>接下来，我们就来一一拆解这些状态和算法。首先，从拥塞窗口说起。</p>
<h3 id="拥塞窗口"><a href="#拥塞窗口" class="headerlink" title="拥塞窗口"></a>拥塞窗口</h3><p>拥塞窗口（Congestion Window，cwnd）是指目前自己还能传输的数据量大小。</p>
<p>那么之前介绍了接收窗口的概念，两者有什么区别呢？</p>
<ul>
<li>接收窗口(rwnd)是<code>接收端</code>给的限制</li>
<li>拥塞窗口(cwnd)是<code>发送端</code>的限制</li>
</ul>
<p>限制谁呢？</p>
<p>限制的是<code>发送窗口</code>的大小。</p>
<p>有了这两个窗口，如何来计算<code>发送窗口</code>？</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发送窗口大小 = min(rwnd, cwnd)</span><br></pre></td></tr></table></figure>

<p>取两者的较小值。而拥塞控制，就是来控制<code>cwnd</code>的变化。</p>
<h3 id="慢启动与拥塞避免"><a href="#慢启动与拥塞避免" class="headerlink" title="慢启动与拥塞避免"></a>慢启动与拥塞避免</h3><p>这两个其实是同一个拥塞控制的两个不同阶段所采用的不同算法</p>
<p><code>慢开始</code>：开始时，拥塞窗口cwnd=1，发送方每收到一个对报文段的确认，cwnd就<u>加一倍</u>，即<strong>倍数增长</strong>。</p>
<p><code>拥塞避免</code>：发送方每收到一个对报文段的确认，cwnd就<u>加一</u>，即<strong>加数增长</strong>。</p>
<p>下面具体讲讲什么时候用慢开始，什么时候用拥塞避免：</p>
<ul>
<li>当cwnd &lt; ssthresh时，使用上述的慢开始算法。</li>
<li>当cwnd&gt;ssthresh时，停止使用慢开始算法而改用拥塞避免算法。</li>
<li>当cwnd = ssthresh时，既可使用慢开始算法，也可使用拥塞避免算法。</li>
</ul>
<blockquote>
<p>当网络拥塞时，ssthresh就会变为当前<u>拥塞窗口值的一半</u>。</p>
</blockquote>
<p>下面来看一个例子：</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110100840182.png" alt="image-20211010084031119"></p>
<blockquote>
<p>①注:请注意，因为现在是讲原理，把窗口的单位改为报文段的个数。实际上应当是“拥塞窗口仅增加一个MSS的大小，单位是字节”。</p>
</blockquote>
<p>当TCP连接进行初始化时，把拥塞窗口cwnd 置为1。在本例中，慢开始门限的初始值设置为16 个报文段，即<br>ssthresh = 16。在执行慢开始算法时，发送方每收到一个对新报文段的确认ACK，就把拥塞窗口值加1,然后开始下一轮的传输(请注意，图5-25的横坐标是传输轮次，不是时间)。因此拥塞窗口cwnd随着传输轮次按指数规律增长。当拥塞窗口cwnd增长到慢开始门限值ssthresh时(图中的点➊，此时拥塞窗口cwnd = 16)， 就改为执行拥塞避免算法，拥塞窗口<br>按线性规律增长。</p>
<p>当拥塞窗口(cwnd = 24时，网络出现了超时(图中的点@)，发送方判断为网络拥塞。于是调整门限值ssthresh = cwnd/2= 12，同时设置拥塞窗口cwnd= 1,进入慢开始阶段。按照慢开始算法，发送方每收到一个对新报文段的确认ACK，就把拥塞窗口值加1。当拥塞窗口cwnd =ssthresh = 12时(图中的点❸，这是新的ssthresh 值)，改为执行拥塞避免。</p>
<p>当拥塞窗口cwnd= 16时(图中的点❹)，出现了一个新的情况，就是发送方一连收到3个对同一个报文段的重复确认(图中记为3-ACK)。关于什么是重复确认下面会讲解到。</p>
<h3 id="快速重传和快速恢复"><a href="#快速重传和快速恢复" class="headerlink" title="快速重传和快速恢复"></a>快速重传和快速恢复</h3><h4 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h4><p>在 TCP 传输的过程中，如果发生了丢包，即接收端发现数据段不是按序到达的时候，接收端的处理是重复发送之前的 ACK。</p>
<p>比如第 5 个包丢了，即使第 6、7 个包到达的接收端，接收端也一律返回第 4 个包的 ACK。当发送端收到 3 个重复的 对d第四个包的ACK 时，意识到丢包了，于是马上进行重传，不用等到一个 RTO 的时间到了才重传。</p>
<p>这就是<strong>快速重传</strong>，它解决的是<strong>是否需要重传</strong>的问题。</p>
<h4 id="选择性重传SACK"><a href="#选择性重传SACK" class="headerlink" title="选择性重传SACK"></a>选择性重传SACK</h4><p>那你可能会问了，既然要重传，那么只重传第 5 个包还是第5、6、7 个包都重传呢？</p>
<p>当然第 6、7 个都已经到达了，TCP 的设计者也不傻，已经传过去干嘛还要传？干脆记录一下哪些包到了，哪些没到，针对性地重传。</p>
<p>在收到发送端的报文后，接收端回复一个 ACK 报文，那么在这个报文首部的可选项中，就可以加上<code>SACK</code>这个属性，通过<code>left edge</code>和<code>right edge</code>告知发送端已经收到了哪些区间的数据报。因此，即使第 5 个包丢包了，当收到第 6、7 个包之后，接收端依然会告诉发送端，这两个包到了。剩下第 5 个包没到，就重传这个包。这个过程也叫做<strong>选择性重传(SACK，Selective Acknowledgment)<strong>，它解决的是</strong>如何重传</strong>的问题。</p>
<h4 id="快速恢复"><a href="#快速恢复" class="headerlink" title="快速恢复"></a>快速恢复</h4><p>当然，发送端收到三次重复 ACK 之后，发现丢包，觉得现在的网络已经有些拥塞了，此处不是进入慢开始算法，而是自己会进入<strong>快速恢复</strong>阶段。</p>
<p>在这个阶段，发送端如下改变：</p>
<ul>
<li>拥塞阈值降低为 cwnd 的一半</li>
<li>cwnd 的大小变为拥塞阈值</li>
<li>cwnd 线性增加</li>
</ul>
<p>以上就是 TCP 拥塞控制的经典算法: <strong>慢启动</strong>、<strong>拥塞避免</strong>、<strong>快速重传和快速恢复</strong>。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p>计算机网络谢希仁第七版</p>
</li>
<li><p>[神三元博客]: <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDcwODg5NjAzMDg1I2hlYWRpbmctMTM=">https://juejin.cn/post/6844904070889603085#heading-13</span></p>
</li>
</ol>

      <div class="tags">
          <a href="/tags/Computer-Networking/" rel="tag"><i class="ic i-tag"></i> Computer-Networking</a>
          <a href="/tags/TCP/" rel="tag"><i class="ic i-tag"></i> TCP</a>
          <a href="/tags/UDP/" rel="tag"><i class="ic i-tag"></i> UDP</a>
      </div>
  </div>

   <footer>

    <div class="meta">
  <span class="item">
    <span class="icon">
      <i class="ic i-calendar-check"></i>
    </span>
    <span class="text">Edited on</span>
    <time title="Modified: 2021-11-02 08:53:28" itemprop="dateModified" datetime="2021-11-02T08:53:28+08:00">2021-11-02</time>
  </span>
  <span id="Computer-Networking/Computer-Networking/TCP和UDP基础知识点" class="item leancloud_visitors" data-flag-title="TCP和UDP基础知识点" title="Views">
      <span class="icon">
        <i class="ic i-eye"></i>
      </span>
      <span class="text">Views</span>
      <span class="leancloud-visitors-count"></span>
      <span class="text">times</span>
  </span>
</div>

      

<div id="copyright">
<ul>
  <li class="author">
    <strong>Post author:  </strong>Monkey-HH <i class="ic i-at"><em>@</em></i>
  </li>
  <li class="link">
    <strong>Post link: </strong>
    <a href="https://monkeyhh.top/Computer-Networking/Computer-Networking/TCP%E5%92%8CUDP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" title="TCP和UDP基础知识点">https://monkeyhh.top/Computer-Networking/Computer-Networking/TCP和UDP基础知识点</a>
  </li>
  <li class="license">
    <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> unless stating additionally.
  </li>
</ul>
</div>

  </footer>

</article>

  </div>
  

<div class="post-nav">
    <div class="item left">
      

  <a href="/Computer-Networking/Computer-Networking/HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;monkey-HH&#x2F;picBed&#x2F;raw&#x2F;master&#x2F;picbed&#x2F;img&#x2F;202111012245441.png" title="HTTP基础知识点">
  <span class="type">Previous Post</span>
  <span class="category"><i class="ic i-flag"></i> Computer-Networking</span>
  <h3>HTTP基础知识点</h3>
  </a>

    </div>
    <div class="item right">
    </div>
</div>

  
  <div class="wrap" id="comments"></div>


        </div>
        <div id="sidebar">
          

<div class="inner">

  <div class="panels">
    <div class="inner">
      <div class="contents panel pjax" data-title="Contents">
          <ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%BC%95%E8%A8%80"><span class="toc-number">1.</span> <span class="toc-text">引言</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#TCP%E5%92%8CUDP%E6%A6%82%E8%BF%B0"><span class="toc-number">2.</span> <span class="toc-text">TCP和UDP概述</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%8D%8F%E8%AE%AE%E7%9A%84%E9%A6%96%E9%83%A8"><span class="toc-number">3.</span> <span class="toc-text">说说这两个协议的首部</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#TCP%E9%A6%96%E9%83%A8"><span class="toc-number">3.1.</span> <span class="toc-text">TCP首部</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%BA%90%E7%AB%AF%E5%8F%A3%E3%80%81%E7%9B%AE%E6%A0%87%E7%AB%AF%E5%8F%A3"><span class="toc-number">3.1.1.</span> <span class="toc-text">源端口、目标端口</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%BA%8F%E5%88%97%E5%8F%B7"><span class="toc-number">3.1.2.</span> <span class="toc-text">序列号</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%A1%AE%E8%AE%A4%E5%8F%B7"><span class="toc-number">3.1.3.</span> <span class="toc-text">确认号</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%95%B0%E6%8D%AE%E5%81%8F%E7%A7%BB"><span class="toc-number">3.1.4.</span> <span class="toc-text">数据偏移</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%A0%87%E8%AE%B0%E4%BD%8D"><span class="toc-number">3.1.5.</span> <span class="toc-text">标记位</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F"><span class="toc-number">3.1.6.</span> <span class="toc-text">窗口大小</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%A0%A1%E9%AA%8C%E5%92%8C"><span class="toc-number">3.1.7.</span> <span class="toc-text">校验和</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8F%AF%E9%80%89%E9%A1%B9"><span class="toc-number">3.1.8.</span> <span class="toc-text">可选项</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4TimeStamp%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%EF%BC%9F"><span class="toc-number">3.1.8.1.</span> <span class="toc-text">说说TimeStamp有什么用？</span></a></li></ol></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#UDP%E9%A6%96%E9%83%A8"><span class="toc-number">3.2.</span> <span class="toc-text">UDP首部</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4TCP%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86"><span class="toc-number">4.</span> <span class="toc-text">说说TCP的连接管理</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5"><span class="toc-number">4.1.</span> <span class="toc-text">TCP三次握手建立连接</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD2%E6%AC%A1%E6%8F%A1%E6%89%8B"><span class="toc-number">4.1.1.</span> <span class="toc-text">为什么不能2次握手</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%83%BD4%E6%AC%A1"><span class="toc-number">4.1.2.</span> <span class="toc-text">为什么不能4次</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%8F%AF%E4%BB%A5%E6%90%BA%E5%B8%A6%E6%95%B0%E6%8D%AE%E5%90%97%EF%BC%9F"><span class="toc-number">4.1.3.</span> <span class="toc-text">三次握手的过程中可以携带数据吗？</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%90%8C%E6%97%B6%E5%90%91%E5%AF%B9%E6%96%B9%E8%AF%B7%E6%B1%82%E8%BF%9E%E6%8E%A5%E4%BC%9A%E5%92%8B%E6%A0%B7%EF%BC%9F"><span class="toc-number">4.1.4.</span> <span class="toc-text">同时向对方请求连接会咋样？</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4TCP%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5"><span class="toc-number">4.2.</span> <span class="toc-text">说说TCP四次挥手断开连接</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%B8%BA%E4%BB%80%E4%B9%88A%E5%9C%A8TIME-WAIT%E7%8A%B6%E6%80%81%E5%BF%85%E9%A1%BB%E7%AD%89%E5%BE%852MSL%E7%9A%84%E6%97%B6%E9%97%B4%EF%BC%9F"><span class="toc-number">4.2.1.</span> <span class="toc-text">为什么A在TIME-WAIT状态必须等待2MSL的时间？</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C-SYN-Flood-%E6%94%BB%E5%87%BB%E7%9A%84%E5%85%B3%E7%B3%BB"><span class="toc-number">5.</span> <span class="toc-text">说说半连接队列和 SYN Flood 攻击的关系</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97"><span class="toc-number">5.0.1.</span> <span class="toc-text">半连接队列</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97"><span class="toc-number">5.0.2.</span> <span class="toc-text">全连接队列</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#SYN-Flood-%E6%94%BB%E5%87%BB%E5%8E%9F%E7%90%86"><span class="toc-number">5.0.3.</span> <span class="toc-text">SYN Flood 攻击原理</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9-SYN-Flood-%E6%94%BB%E5%87%BB%EF%BC%9F"><span class="toc-number">5.0.4.</span> <span class="toc-text">如何应对 SYN Flood 攻击？</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4TCP%E5%BF%AB%E9%80%9F%E6%89%93%E5%BC%80%E7%9A%84%E5%8E%9F%E7%90%86%EF%BC%88TFO%EF%BC%89"><span class="toc-number">6.</span> <span class="toc-text">说说TCP快速打开的原理（TFO）</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#TFO-%E6%B5%81%E7%A8%8B"><span class="toc-number">6.0.1.</span> <span class="toc-text">TFO 流程</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E9%A6%96%E8%BD%AE%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"><span class="toc-number">6.0.1.1.</span> <span class="toc-text">首轮三次握手</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%90%8E%E9%9D%A2%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"><span class="toc-number">6.0.1.2.</span> <span class="toc-text">后面的三次握手</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#TFO-%E7%9A%84%E4%BC%98%E5%8A%BF"><span class="toc-number">6.0.2.</span> <span class="toc-text">TFO 的优势</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4TCP%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93"><span class="toc-number">7.</span> <span class="toc-text">说说TCP可靠传输</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85%E5%8D%8F%E8%AE%AE"><span class="toc-number">7.1.</span> <span class="toc-text">停止等待协议</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E8%BF%9E%E7%BB%ADARQ%E5%8D%8F%E8%AE%AE"><span class="toc-number">7.2.</span> <span class="toc-text">连续ARQ协议</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8F%91%E9%80%81%E7%AA%97%E5%8F%A3"><span class="toc-number">7.3.</span> <span class="toc-text">发送窗口</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3"><span class="toc-number">7.4.</span> <span class="toc-text">接收窗口</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4TCP%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6"><span class="toc-number">8.</span> <span class="toc-text">说说TCP流量控制</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6"><span class="toc-number">9.</span> <span class="toc-text">说说TCP拥塞控制</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%8B%A5%E5%A1%9E%E7%AA%97%E5%8F%A3"><span class="toc-number">9.0.1.</span> <span class="toc-text">拥塞窗口</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%85%A2%E5%90%AF%E5%8A%A8%E4%B8%8E%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D"><span class="toc-number">9.0.2.</span> <span class="toc-text">慢启动与拥塞避免</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0%E5%92%8C%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D"><span class="toc-number">9.0.3.</span> <span class="toc-text">快速重传和快速恢复</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%BF%AB%E9%80%9F%E9%87%8D%E4%BC%A0"><span class="toc-number">9.0.3.1.</span> <span class="toc-text">快速重传</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E9%80%89%E6%8B%A9%E6%80%A7%E9%87%8D%E4%BC%A0SACK"><span class="toc-number">9.0.3.2.</span> <span class="toc-text">选择性重传SACK</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D"><span class="toc-number">9.0.3.3.</span> <span class="toc-text">快速恢复</span></a></li></ol></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%8F%82%E8%80%83"><span class="toc-number">10.</span> <span class="toc-text">参考</span></a></li></ol>
      </div>
      <div class="related panel pjax" data-title="Related">
        <ul>
          <li><a href="/Computer-Networking/Computer-Networking/HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" rel="bookmark" title="HTTP基础知识点">HTTP基础知识点</a></li><li class="active"><a href="/Computer-Networking/Computer-Networking/TCP%E5%92%8CUDP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" rel="bookmark" title="TCP和UDP基础知识点">TCP和UDP基础知识点</a></li>
        </ul>
      </div>
      <div class="overview panel" data-title="Overview">
        <div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="image" itemprop="image" alt="Monkey-HH"
      data-src="/images/avatar.jpg">
  <p class="name" itemprop="name">Monkey-HH</p>
  <div class="description" itemprop="description">Learn, share, make progress</div>
</div>

<nav class="state">
    <div class="item posts">
      <a href="/archives/">
        <span class="count">17</span>
        <span class="name">posts</span>
      </a>
    </div>
    <div class="item categories">
      <a href="/categories/">
        <span class="count">6</span>
        <span class="name">categories</span>
      </a>
    </div>
    <div class="item tags">
      <a href="/tags/">
        <span class="count">8</span>
        <span class="name">tags</span>
      </a>
    </div>
</nav>

<div class="social">
      <span class="exturl item github" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmtleS1ISA==" title="https:&#x2F;&#x2F;github.com&#x2F;monkey-HH"><i class="ic i-github"></i></span>
      <span class="exturl item email" data-url="bWFpbHRvOmhoanNjYXVAMTYzLmNvbQ==" title="mailto:hhjscau@163.com"><i class="ic i-envelope"></i></span>
</div>

<ul class="menu">
  
    
  <li class="item">
    <a href="/" rel="section"><i class="ic i-home"></i>Home</a>
  </li>

        
  <li class="item dropdown">
      <a href="javascript:void(0);"><i class="ic i-feather"></i>Posts</a>
    <ul class="submenu">

        
  <li class="item">
    <a href="/categories/" rel="section"><i class="ic i-th"></i>Categories</a>
  </li>

        
  <li class="item">
    <a href="/tags/" rel="section"><i class="ic i-tags"></i>Tags</a>
  </li>

  </ul>
    
  <li class="item">
    <a href="/friends/" rel="section"><i class="ic i-heart"></i>Friends</a>
  </li>

    
  <li class="item">
    <a href="/about/" rel="section"><i class="ic i-user"></i>About</a>
  </li>

    
  <li class="item">
    <a href="/links/" rel="section"><i class="ic i-magic"></i>Links</a>
  </li>


</ul>

      </div>
    </div>
  </div>

  <ul id="quick">
    <li class="prev pjax">
    </li>
    <li class="up"><i class="ic i-arrow-up"></i></li>
    <li class="down"><i class="ic i-arrow-down"></i></li>
    <li class="next pjax">
    </li>
    <li class="percent"></li>
  </ul>
</div>


        </div>
        <div class="dimmer"></div>
      </div>
    </main>
    <footer id="footer">
      <div class="inner">
        <div class="widgets">
          
<div class="rpost pjax">
  <h2>Random Posts</h2>
  <ul>
      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/HelloWorld/" title="In HelloWorld">HelloWorld</a>
</div>

    <span><a href="/HelloWorld/hello-world" title="hello-world">hello-world</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/CSS/" title="In CSS">CSS</a>
</div>

    <span><a href="/FrontEnd/CSS/FrontEnd/CSS/CSS%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93" title="CSS布局总结">CSS布局总结</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/Computer-Networking/" title="In Computer-Networking">Computer-Networking</a>
</div>

    <span><a href="/Computer-Networking/Computer-Networking/HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" title="HTTP基础知识点">HTTP基础知识点</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" title="JavaScript数据类型">JavaScript数据类型</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E7%BB%A7%E6%89%BF%E6%96%B9%E6%A1%88" title="JavaScript常用继承方案">JavaScript常用继承方案</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2" title="浏览器Web安全攻防">浏览器Web安全攻防</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85" title="JavaScript作用域与闭包">JavaScript作用域与闭包</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/Computer-Networking/" title="In Computer-Networking">Computer-Networking</a>
</div>

    <span><a href="/Computer-Networking/Computer-Networking/TCP%E5%92%8CUDP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" title="TCP和UDP基础知识点">TCP和UDP基础知识点</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87" title="JavaScript执行上下文">JavaScript执行上下文</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%AD%E7%9A%84this" title="JavaScript中的this">JavaScript中的this</a></span>
  </li>

  </ul>
</div>
<div>
  <h2>Recent Comments</h2>
  <ul class="leancloud-recent-comment"></ul>
</div>

        </div>
        <div class="status">
  <div class="copyright">
    
    &copy; 
    <span itemprop="copyrightYear">2021</span>
    <span class="with-love">
      <i class="ic i-sakura rotate"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">Monkey-HH @ Monkey's Blog</span>
  </div>
  <div class="count">
    <span class="post-meta-item-icon">
      <i class="ic i-chart-area"></i>
    </span>
    <span title="Symbols count total">187k words</span>

    <span class="post-meta-divider">|</span>
    <span class="post-meta-item-icon">
      <i class="ic i-coffee"></i>
    </span>
    <span title="Reading time total">2:50</span>
  </div>
  <div class="powered-by">
    Powered by <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span>
  </div>
</div>

      </div>
    </footer>
  </div>
<script data-config type="text/javascript">
  var LOCAL = {
    path: 'Computer-Networking/Computer-Networking/TCP和UDP基础知识点',
    favicon: {
      show: "（●´3｀●）Goooood",
      hide: "(´Д｀)Booooom"
    },
    search : {
      placeholder: "Search for Posts",
      empty: "We didn't find any results for the search: ${query}",
      stats: "${hits} results found in ${time} ms"
    },
    valine: true,fancybox: true,copyright: 'Copied to clipboard successfully! <br> All articles in this blog are licensed under <i class="ic i-creative-commons"></i>BY-NC-SA.',
    ignores : [
      function(uri) {
        return uri.includes('#');
      },
      function(uri) {
        return new RegExp(LOCAL.path+"$").test(uri);
      }
    ]
  };
</script>

<script src="https://cdn.polyfill.io/v2/polyfill.js"></script>

<script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script>

<script src="/js/app.js?v=0.2.5"></script>




</body>
</html>
