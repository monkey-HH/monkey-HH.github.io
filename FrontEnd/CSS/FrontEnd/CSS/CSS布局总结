



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#FFF">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">

<link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico">
  <meta http-equiv="Cache-Control" content="no-transform">
  <meta http-equiv="Cache-Control" content="no-siteapp">


<link rel="alternate" type="application/rss+xml" title="" href="https://monkeyhh.top/rss.xml" />
<link rel="alternate" type="application/atom+xml" title="" href="https://monkeyhh.top/atom.xml" />
<link rel="alternate" type="application/json" title="" href="https://monkeyhh.top/feed.json" />

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">

<link rel="stylesheet" href="/css/app.css?v=0.2.5">

  
  <meta name="keywords" content="CSS" />


<link rel="canonical" href="https://monkeyhh.top/FrontEnd/CSS/FrontEnd/CSS/CSS%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93">



  <title>
CSS布局总结 - CSS - FrontEnd |
Monkey's Blog = </title>
<meta name="generator" content="Hexo 5.4.0"></head>
<body itemscope itemtype="http://schema.org/WebPage">
  <div id="loading">
    <div class="cat">
      <div class="body"></div>
      <div class="head">
        <div class="face"></div>
      </div>
      <div class="foot">
        <div class="tummy-end"></div>
        <div class="bottom"></div>
        <div class="legs left"></div>
        <div class="legs right"></div>
      </div>
      <div class="paw">
        <div class="hands left"></div>
        <div class="hands right"></div>
      </div>
    </div>
  </div>
  <div id="container">
    <header id="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="inner">
        <div id="brand">
          <div class="pjax">
          
  <h1 itemprop="name headline">CSS布局总结
  </h1>
  
<div class="meta">
  <span class="item" title="Created: 2021-06-10 12:01:30">
    <span class="icon">
      <i class="ic i-calendar"></i>
    </span>
    <span class="text">Posted on</span>
    <time itemprop="dateCreated datePublished" datetime="2021-06-10T12:01:30+08:00">2021-06-10</time>
  </span>
  <span class="item" title="Symbols count in article">
    <span class="icon">
      <i class="ic i-pen"></i>
    </span>
    <span class="text">Symbols count in article</span>
    <span>32k</span>
    <span class="text">words</span>
  </span>
  <span class="item" title="Reading time">
    <span class="icon">
      <i class="ic i-clock"></i>
    </span>
    <span class="text">Reading time</span>
    <span>30 mins.</span>
  </span>
</div>


          </div>
        </div>
        <nav id="nav">
  <div class="inner">
    <div class="toggle">
      <div class="lines" aria-label="Toggle navigation bar">
        <span class="line"></span>
        <span class="line"></span>
        <span class="line"></span>
      </div>
    </div>
    <ul class="menu">
      <li class="item title"><a href="/" rel="start">Monkey's Blog</a></li>
    </ul>
    <ul class="right">
      <li class="item theme">
        <i class="ic i-sun"></i>
      </li>
      <li class="item search">
        <i class="ic i-search"></i>
      </li>
    </ul>
  </div>
</nav>

      </div>
      <div id="imgs" class="pjax">
        <ul>
          <li class="item" data-background-image="https://tva1.sinaimg.cn/large/6833939bly1giclfdu6exj20zk0m87hw.jpg"></li>
          <li class="item" data-background-image="https://tva1.sinaimg.cn/large/6833939bly1giph47e9vtj20zk0m8x6l.jpg"></li>
          <li class="item" data-background-image="https://tva1.sinaimg.cn/large/6833939bly1giclga70tsj20zk0m84mr.jpg"></li>
          <li class="item" data-background-image="https://tva1.sinaimg.cn/large/6833939bly1giph4baakhj20zk0m8h5q.jpg"></li>
          <li class="item" data-background-image="https://tva1.sinaimg.cn/large/6833939bly1giclgi503lj20zk0m8hdt.jpg"></li>
          <li class="item" data-background-image="https://tva1.sinaimg.cn/large/6833939bly1gicliierfjj20zk0m8npd.jpg"></li>
        </ul>
      </div>
    </header>
    <div id="waves">
      <svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
        <defs>
          <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z" />
        </defs>
        <g class="parallax">
          <use xlink:href="#gentle-wave" x="48" y="0" />
          <use xlink:href="#gentle-wave" x="48" y="3" />
          <use xlink:href="#gentle-wave" x="48" y="5" />
          <use xlink:href="#gentle-wave" x="48" y="7" />
        </g>
      </svg>
    </div>
    <main>
      <div class="inner">
        <div id="main" class="pjax">
          
  <div class="article wrap">
    
<div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList">
<i class="ic i-home"></i>
<span><a href="/">Home</a></span><i class="ic i-angle-right"></i>
<span  itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/FrontEnd/" itemprop="item" rel="index" title="In FrontEnd"><span itemprop="name">FrontEnd</span></a>
<meta itemprop="position" content="1" /></span>
<i class="ic i-angle-right"></i>
<span  class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/FrontEnd/CSS/" itemprop="item" rel="index" title="In CSS"><span itemprop="name">CSS</span></a>
<meta itemprop="position" content="2" /></span>
</div>

    <article itemscope itemtype="http://schema.org/Article" class="post block" lang="en">
  <link itemprop="mainEntityOfPage" href="https://monkeyhh.top/FrontEnd/CSS/FrontEnd/CSS/CSS%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93">

  <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
    <meta itemprop="image" content="/images/avatar.jpg">
    <meta itemprop="name" content="Monkey-HH">
    <meta itemprop="description" content=", Learn, share, make progress">
  </span>

  <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
    <meta itemprop="name" content="">
  </span>

  <div class="body md" itemprop="articleBody">
    

    <h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>CSS布局有很多的方式，一直学得很细碎，这次就总结一下所有的CSS布局以及相关知识点。</p>
<h1 id="抛弃“砖块”，拥抱“流”"><a href="#抛弃“砖块”，拥抱“流”" class="headerlink" title="抛弃“砖块”，拥抱“流”"></a>抛弃“砖块”，拥抱“流”</h1><p>“流”实际上是 CSS 世界中的一种基本的定位和布局机制，是水平的。</p>
<p>CSS世界构建的基石是HTML，而HTML最具代表的两个基石div和span正好是CSS 世界中块级元素和内联级元素的代表，它们对应的正是图 所示的盛水容器中的水和木头， 其特性表现也正如现实世界的水和木头。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110201620183.png" alt="image-20211001133203472"></p>
<p>在初步学习CSS的时候很容易觉得页面是砖块的方式搭建起来的，这句话既对也错。确实可以将页面划分成多个模块，但其内部离不开流。<u>不要用搭砖块的方式理解CSS，要用流的方式理解CSS。</u></p>
<p>简单的一个例子，如果为每一个砖块设定好尺寸，将砖块精心布置堆叠，建立起来一个房子，似乎没什么问题。但事实上，房子，通常就是浏览器窗口，每个人电脑屏幕大小不一，更别提移动端适配的问题了，“房子”的大小，一定是会变化的。并且如果有一个“房间”想改大小，结局很可能是整栋“房子”重建。</p>
<p>用流的方式的好处：</p>
<p>①布局更健壮，自适应性更强</p>
<p>②容错性更强</p>
<h2 id="流的体现"><a href="#流的体现" class="headerlink" title="流的体现"></a>流的体现</h2><p>width宽度表现有一种为“外部尺寸”特性，即元素大小由外部容器决定，子元素像流一样充满整个容器。例如一个div标签。</p>
<h3 id="块级元素与流"><a href="#块级元素与流" class="headerlink" title="块级元素与流"></a>块级元素与流</h3><p>我们来看看常见的一个水平居中方案margin:0 auto，与流的关系，详细过程如下</p>
<p>①块级元素符合“外部尺寸”特性，即充分利用空间、流的特性，margin、border、padding、width自动分配，此时width会直接“吃满”父级容器的宽度，即width直接就是父元素的width。</p>
<p>②当设置了width具体数值，margin和padding默认为0，则元素的流动性就会被阻断，因为元素给定宽度就像河流中间竖了两个大闸一样。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110201719235.png" alt="image-20211020171940166"></p>
<p>③那此时margin:0 auto就会让水平方向上平分剩下的空间，则表现上就是水平居中了。</p>
<blockquote>
<p><strong>可能会有的疑惑</strong>：</p>
<p>margin:auto 的填充规则如下：</p>
<p>（1）如果一侧定值，一侧 auto，则 auto 为剩余空间大小。 </p>
<p>（2）如果两侧均是 auto，则平分剩余空间。</p>
<p><strong>延伸知识点⭐</strong>：</p>
<p>借由第二点，<code>margin 属性的 auto 计算就是为块级元素左中右对齐而设计的，和内联元素使用 text-align 控制左中右对齐正好遥相呼应</code>。这一点非常重要，如果想让某个块状元素右对齐，脑子里不要就一个 float:right，很多时候，margin-left:auto 才是最佳实践！！左对齐同理。</p>
</blockquote>
<h3 id="absolute绝对定位与流的关系"><a href="#absolute绝对定位与流的关系" class="headerlink" title="absolute绝对定位与流的关系"></a>absolute绝对定位与流的关系</h3><p>上面的方式其实有一个不太让人满意的地方，那就是会发现，其实就算margin都设成auto，垂直方向上都不会居中，那如何才能水平和垂直方向上都居中呢？</p>
<blockquote>
<p>原理：</p>
<p>①absolute元素在同时设置了left+right为0，会表现为<strong>格式化宽度</strong></p>
<p>②absolute元素在同时设置了top+bottom为0，会表现为<strong>格式化高度</strong></p>
<p>③相对方向上偏移值为0，即两边都拉扯，则此时会和div“正常流宽度”一样，同属于外部尺寸，水平和垂直方向都表现为流的特性。</p>
</blockquote>
<p>由于绝对定位元素的格式化高度即使父元素 height:auto 也是支持的，因此，其应用场景可以相当广泛，可能唯一的不足就是此居中计算 IE8 及以上版本浏览器才支持。</p>
<h2 id="流的破坏"><a href="#流的破坏" class="headerlink" title="流的破坏"></a>流的破坏</h2><ul>
<li>float</li>
<li>绝对定位</li>
</ul>
<h2 id="流向的改变"><a href="#流向的改变" class="headerlink" title="流向的改变"></a>流向的改变</h2><ul>
<li>direction：改变水平流向，“镜像反转”</li>
<li>writing-mode：改变“横”与“纵”的规则</li>
</ul>
<h1 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h1><p>页面渲染时，dom 元素所采用的 <strong>布局模型</strong>。可通过<code>box-sizing</code>进行设置。根据计算宽高的区域可分为：</p>
<ul>
<li><code>content-box</code> (W3C 标准盒模型)</li>
<li><code>border-box</code> (IE 盒模型)</li>
<li><code>padding-box</code> (FireFox 曾经支持)</li>
<li><code>margin-box</code> (浏览器未实现)</li>
</ul>
<blockquote>
<p>Tips: 理论上是有上面 4 种盒子，但现在 w3c 与 mdn 规范中均只支持 <code>content-box</code> 与 <code>border-box</code>； </p>
</blockquote>
<h2 id="块级盒子和内联盒子"><a href="#块级盒子和内联盒子" class="headerlink" title="块级盒子和内联盒子"></a>块级盒子和内联盒子</h2><p>在 CSS 中我们广泛地使用两种“盒子” —— <strong>块级****盒子</strong> (<strong>block box</strong>) 和 <strong>内联盒子</strong> (<strong>inline box</strong>)<strong>。</strong>这两种盒子会在<strong>页面流</strong>（page flow）和<strong>元素之间的关系</strong>方面表现出不同的行为:</p>
<ol>
<li>一个被定义成块级的（block）盒子会表现出以下行为:</li>
</ol>
<ul>
<li>盒子会在内联的方向上扩展并占据父容器在该方向上的所有可用空间，在绝大数情况下意味着盒子会和父容器一样宽</li>
<li>每个盒子都会换行</li>
<li><a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a> 属性可以发挥作用</li>
<li>内边距（padding）, 外边距（margin） 和 边框（border） 会将其他元素从当前盒子周围“推开”</li>
</ul>
<p>除非特殊指定，诸如标题(<code>&lt;h1&gt;</code>等)和段落(<code>&lt;p&gt;</code>)默认情况下都是块级的盒子。</p>
<ol start="2">
<li>如果一个盒子对外显示为 <code>inline</code>，那么他的行为如下:</li>
</ol>
<ul>
<li>盒子不会产生换行。</li>
<li> <a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/width"><code>width</code></a> 和 <a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height"><code>height</code></a> 属性将不起作用。</li>
<li>垂直方向的内边距、外边距以及边框会被应用但是不会把其他处于 <code>inline</code> 状态的盒子推开。</li>
<li>水平方向的内边距、外边距以及边框会被应用且会把其他处于 <code>inline</code> 状态的盒子推开。</li>
</ul>
<p>用做链接的 <code>&lt;a&gt;</code> 元素、 <code>&lt;span&gt;</code>、 <code>&lt;em&gt;</code> 以及 <code>&lt;strong&gt;</code> 都是默认处于 <code>inline</code> 状态的。</p>
<h1 id="说说属性的“百分比”的参考对象"><a href="#说说属性的“百分比”的参考对象" class="headerlink" title="说说属性的“百分比”的参考对象"></a>说说属性的“百分比”的参考对象</h1><h2 id="正常定位下"><a href="#正常定位下" class="headerlink" title="正常定位下"></a>正常定位下</h2><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">参考对象</th>
<th align="center">默认值</th>
<th align="center">特殊说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">width</td>
<td align="center">父元素content-box:width</td>
<td align="center">auto</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">height</td>
<td align="center">父元素content-box:height</td>
<td align="center">auto</td>
<td align="center">父级必须有高度值，因为默认计算值是auto，auto*百分比=NaN。或者使用绝对定位。</td>
</tr>
<tr>
<td align="center">padding</td>
<td align="center">父元素content-box:width</td>
<td align="center">0</td>
<td align="center">不支持auto</td>
</tr>
<tr>
<td align="center">border-width</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">不支持百分比、auto</td>
</tr>
<tr>
<td align="center">margin</td>
<td align="center">父元素content-box:width</td>
<td align="center">0</td>
<td align="center">默认值为0，所以设置了width后，不会自动填充容器，要讲margin设为auto才能填充。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">参考对象</th>
<th align="center">默认值</th>
<th align="center">特殊说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">line-height</td>
<td align="center">font-size</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">vertical-align</td>
<td align="center">line-height</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">translate</td>
<td align="center">自身尺寸</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">border-radius</td>
<td align="center">自身的宽度</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">background-size</td>
<td align="center">自身尺寸</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>和常规元素相比，absolute 绝对定位元素的“包含块”有以下 3 个明显差异：</p>
<p>（1）内联元素也可以作为“包含块”所在的元素； </p>
<p>（2）“包含块”所在的元素不是父块级元素，而是最近的 position 不为 static 的祖先 元素或根元素； </p>
<p>（3）计算和定位是相对于包含块的 padding box 而不是 content box。</p>
<p>当设置父元素为relative，子元素开启absolute，子元素的属性如下</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>参考对象</th>
<th>默认值</th>
<th>特殊说明</th>
</tr>
</thead>
<tbody><tr>
<td>width、left、right、padding、margin</td>
<td>包含块的padding-box的宽度</td>
<td></td>
<td></td>
</tr>
<tr>
<td>height、top、bottom</td>
<td>包含块的padding-box的高度</td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>设置绝对定位后，left、bottom、left、right默认值都不为0，是不是auto有待考察，但默认下会贴着content-box的边。当设置为0时候，可以看到，它会贴着包含块的border内边。179页</p>
<h1 id="如何让一个元素水平垂直居中？"><a href="#如何让一个元素水平垂直居中？" class="headerlink" title="如何让一个元素水平垂直居中？"></a>如何让一个元素水平垂直居中？</h1><h2 id="流-定宽（高）-自动margin"><a href="#流-定宽（高）-自动margin" class="headerlink" title="流+定宽（高）+自动margin"></a>流+定宽（高）+自动margin</h2><p>这就是伟大的margin:0 auto</p>
<p><strong>步骤</strong>：</p>
<p>①<code>容器定宽</code>：father盒子必须指定了宽度</p>
<p>②<code>元素定宽</code>:son盒子必须指定了宽度</p>
<p>②<code>自动水平margin</code>：son盒子的左右外边距都设置为auto</p>
<blockquote>
<p>原理：在第一节的“块级元素与流”小节中有原理。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;<span class="comment">/*⭐第一步：一定要指定宽度*/</span></span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">0</span> auto;<span class="comment">/*⭐第二步：一定要设置水平方向的margin为auto*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是我们会想，这样子可以实现水平居中，那让垂直方向上满足，容器定高、元素定高、自动margin，那岂不是直接就能实现垂直方向上的居中？事实上不可以，因为居中的前提是在对应方向上有“流”的自动填充特性。</p>
<p>然而CSS里流的方向是<strong>“水平”</strong>的，元素高度是稀缺的。</p>
<p>那这时候就会像，那把流的方向换一下，不就可以了？确实</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    writing-mode: vertical-lr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">200px</span>;<span class="comment">/*⭐第一步：一定要指定宽度*/</span></span><br><span class="line">	<span class="attribute">margin</span>: auto <span class="number">0</span>;<span class="comment">/*⭐第二步：一定要设置垂直方向的margin为auto*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="水平和垂直同时居中"><a href="#水平和垂直同时居中" class="headerlink" title="水平和垂直同时居中"></a>水平和垂直同时居中</h2><h3 id="1-行内元素"><a href="#1-行内元素" class="headerlink" title="1.行内元素"></a>1.行内元素</h3><p>这里指的行内元素值得是“外部盒子”为“行内盒子”的元素，即包括“行内元素”和“行内块元素”等。</p>
<p>这里的#father是div等块级元素，其下面包含着的才是行内元素</p>
<p>水平居中就是用text-align</p>
<p>垂直居中就是让line-height==height</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">width</span> : <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里就有一个启发，块级元素也可以利用这一点</p>
<ul>
<li>父元素设置 text-align 为 center </li>
<li>子元素设置 display 为 inline-block，vertical-align 为 middle</li>
</ul>
<h3 id="2-定宽高的块级元素"><a href="#2-定宽高的块级元素" class="headerlink" title="2.定宽高的块级元素"></a>2.定宽高的块级元素</h3><h4 id="2-1绝对定位-负margin"><a href="#2-1绝对定位-负margin" class="headerlink" title="2.1绝对定位+负margin"></a>2.1绝对定位+负margin</h4><p>最原始的方法啦。</p>
<p>此方法适合IE7及以下，如果不用管IE7浏览器，这种方法可以直接淘汰了。</p>
<p><strong>步骤</strong>：</p>
<p>①son盒子必须指定宽度</p>
<p>②father盒子的position设为relative</p>
<p>③son盒子的position设为absolute，且left和top为50%</p>
<p>④son盒子的左边距为<code>自己宽度的一半</code>的<code>负值</code>，上边距同理</p>
<blockquote>
<p>原理：</p>
<p>①left是相对于“包含块”的宽度来的，设为50%之后，并不是完全居中，所以要用一个“负的margin”来“修正”偏差。</p>
<p>②顺便讲讲absolute的包含块计算规则（《CSS世界》178页）：</p>
<p>1.根元素（<html>）是“初始包含块”</p>
<p>2.对于其他元素，如果该元素的position是relative或者static，则其“包含块”为其最近的“块容器祖先盒子”的content box 组成。</p>
<p>3.如果元素的position：fixed，则“包含块”为“初始包含块”</p>
<p>4.如果元素的position：absolute，则“包含块”为最近的不为static的祖先元素的padding box边界形成。如果该祖先元素是纯inline元素，则是另一种情况了，这里不展开讲。</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">200px</span>;<span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>: -<span class="number">100px</span>;<span class="comment">/*⭐自己宽度的一半*/</span></span><br><span class="line">    <span class="attribute">margin-top</span>: -<span class="number">25px</span>;<span class="comment">/*⭐自己高度的一半*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的一点是，可能有的读者会觉得margin的值可以用百分比来代替，因为认为margin是相对于自己宽度来计算的，这在正常情况下是正确的，但是对于absolute元素来说，margin的百分比值是相对于包含块来说的。</p>
<h4 id="2-2绝对定位-自动margin-格式化宽高"><a href="#2-2绝对定位-自动margin-格式化宽高" class="headerlink" title="2.2绝对定位 + 自动margin/格式化宽高"></a>2.2绝对定位 + 自动margin/格式化宽高</h4><blockquote>
<p>原理：</p>
<p>①absolute元素在同时设置了left+right为0，会表现为<strong>格式化宽度</strong></p>
<p>②absolute元素在同时设置了top+bottom为0，会表现为<strong>格式化高度</strong></p>
<p>③此时会和div“正常流宽度”一样，同属于外部尺寸，那么接下来的原理就和“流+自动margin”一样了。（绝对定位中相对方向的偏移值都设为0，尺寸拉扯，保持流体特性）</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: aqua;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: blue;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果想要只是水平或者垂直方向上的居中，则只设置对应方向上的属性就行了。</p>
<h3 id="3-不定宽高的块级元素"><a href="#3-不定宽高的块级元素" class="headerlink" title="3.不定宽高的块级元素"></a>3.不定宽高的块级元素</h3><h4 id="3-1-绝对定位-自动margin-fit-content-格式化宽高升级版"><a href="#3-1-绝对定位-自动margin-fit-content-格式化宽高升级版" class="headerlink" title="3.1 绝对定位+自动margin + fit-content / 格式化宽高升级版"></a>3.1 绝对定位+自动margin + fit-content / 格式化宽高升级版</h4><p>fit-content是CSS3 里面的关键字，此时内容变现为包裹性、自适应性。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: aqua;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: blue;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">	<span class="attribute">width</span>: fit-content;</span><br><span class="line">	<span class="attribute">height</span>: fit-content;</span><br><span class="line">	<span class="attribute">top</span>: <span class="number">0</span>;<span class="attribute">right</span>: <span class="number">0</span>;<span class="attribute">bottom</span>: <span class="number">0</span>;<span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-2绝对定位-transform"><a href="#3-2绝对定位-transform" class="headerlink" title="3.2绝对定位+transform"></a>3.2绝对定位+transform</h4><ul>
<li><p>此方法只适用于 ie9+，且移动开发中，transform的百分比值会导致例如微信闪退等bug。</p>
</li>
<li><p>而且这个方法占用了transform 属性， 这会导致绝对定位元素无法使用包含transform 属性的动画效果。</p>
</li>
</ul>
<p><strong>步骤</strong>：</p>
<ul>
<li>父元素设置定位 relative </li>
<li>居中元素设置绝对定位，top 和 left 各 50%， transform 偏移“自身宽高”的一半。</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: aqua;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#son</span> &#123;</span><br><span class="line">	<span class="attribute">background-color</span>: blue;</span><br><span class="line">	<span class="attribute">position</span>: absolute;<span class="attribute">left</span>: <span class="number">50%</span>;<span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3flex布局"><a href="#3-3flex布局" class="headerlink" title="3.3flex布局"></a>3.3flex布局</h4><p>非常省事的方式。</p>
<p>如果只想要某个方向上的居中，就只设置对应方向上的属性就行。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:flex;</span><br><span class="line">  <span class="attribute">justify-content</span>:center;<span class="comment">/*水平居中*/</span></span><br><span class="line">  <span class="attribute">align-items</span>:center;<span class="comment">/*垂直居中*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-table布局"><a href="#3-4-table布局" class="headerlink" title="3.4 table布局"></a>3.4 table布局</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="浮动布局的优点？缺点？怎么清除浮动？"><a href="#浮动布局的优点？缺点？怎么清除浮动？" class="headerlink" title="浮动布局的优点？缺点？怎么清除浮动？"></a>浮动布局的优点？缺点？怎么清除浮动？</h1><blockquote>
<p>浮动布局简介:当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变现的好像浮动元素不存在一样。</p>
</blockquote>
<h2 id="float的特性"><a href="#float的特性" class="headerlink" title="float的特性"></a>float的特性</h2><p>浮动的本质是为了实现文字环绕效果</p>
<ul>
<li><p> 包裹性、自适应性。</p>
</li>
<li><p> <strong>块状化并格式化上下文</strong>：一旦浮动，则会display变成block或者table（inline-table）。</p>
</li>
<li><p> 破坏文档流； </p>
</li>
<li><p> 没有任何 margin 合并；</p>
</li>
</ul>
<blockquote>
<p>第二点可以看出：不要指望使用 text-align 属性控制浮动元素的左右对齐，因为 text-align 对块级元素是无效的。</p>
</blockquote>
<p>还有一点值得关注，float的兄弟absolute与float兼具“块状化”“包裹性”“破坏性”等特性，但absolute 血脉更纯，能力更霸道。同时用，<strong>float会失效</strong>。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.brother</span> &#123; </span><br><span class="line"> <span class="attribute">position</span>: absolute; </span><br><span class="line"> <span class="attribute">float</span>: left; // 无效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="float的优点"><a href="#float的优点" class="headerlink" title="float的优点"></a>float的优点</h2><p>这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的，第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题</p>
<h2 id="float的缺点"><a href="#float的缺点" class="headerlink" title="float的缺点"></a>float的缺点</h2><p>①脱离“文档流”，失去了流的特性，会导致布局失去弹性，十分脆弱。</p>
<p>用流的时候事实上除了最原始的实现文字环绕效果，其他用途大多偏离了设计者原先的思想，变成了“砌砖头”的思想，应该更多去挖掘CSS世界的<code>流动性</code>和<code>自适应性</code>。</p>
<p>②导致高度塌陷，无法撑起父级元素等其他问题。</p>
<h2 id="清除浮动的影响"><a href="#清除浮动的影响" class="headerlink" title="清除浮动的影响"></a>清除浮动的影响</h2><p>首先我们要知道实现浮动的原理，导致为什么有浮动的影响？参考《CSS世界》152页</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;me.jpg&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;animal&quot;</span>&gt;</span>小猫 1，小猫 2，...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>①高度塌陷：摆脱父元素的限制。</p>
<p>可以让跟随的内容可以和浮动的元素在同一个水平线上。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110171157263.png" alt="image-20211017115711230"></p>
<p>黑色那一横就是div盒子的边框，可以看到他高度塌陷了，下面p标签的文字才能上来。</p>
<p>②行框盒子区域限制——实现环绕效果：行框盒子和浮动元素的不可重叠性。</p>
<p>注意，这里说的是“行框盒子”，也就是每行内联元素所在的那个盒子，而非外部的块状 盒子。</p>
<p>比如<p class="animal">小猫 1，小猫 2，…</p>的行框盒子就是”小猫 1，小猫 2，…”，外部块状盒子是包括p标签的。</p>
<p>我们可以借 助::first-line 伪元素暴露第一行的“行框盒子”区域，</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110171203610.png" alt="image-20211017120305658"></p>
<p>CSS 代码如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.animal</span><span class="selector-pseudo">:first</span>-line &#123; </span><br><span class="line"> <span class="attribute">background</span>: red; </span><br><span class="line"> <span class="attribute">color</span>: white; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>可以看到：行框盒子如果和浮动元素的垂直高度有 重叠，则行框盒子在正常定位状态下只会跟随浮动元素，而不会发生重叠。</p>
<h3 id="父元素设置高度？"><a href="#父元素设置高度？" class="headerlink" title="父元素设置高度？"></a>父元素设置高度？</h3><p>既然有了高度， 何来“高度塌陷”。这句话对不对呢？对的，但是只解决了高度塌陷的问题，并没有解决“行框盒子区域限制”的问题。并且这样子就会失去盒子的弹性，布局就会很脆弱，稍微该一下内部大小就会出事。例子可以看《CSS世界》153页</p>
<h3 id="成事不足败事有余的clear"><a href="#成事不足败事有余的clear" class="headerlink" title="成事不足败事有余的clear?"></a>成事不足败事有余的clear?</h3><p>先来看看常见的两种方式，本质都是一样的，利用clear</p>
<p>1.直接加块级元素</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加额外标签并且添加clear属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.利用伪类</p>
<p>clear属性只有块级元素才有效，而::after等伪元素默认都是内联水平，所以块状化。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	<span class="attribute">display</span>: table;<span class="comment">/*也可以是block、list-item等*/</span></span><br><span class="line">	<span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>注意点</strong>：</p>
<p>clear官方解释：元素盒子的边不能和“前面的浮动元素”相邻，表现上就是clear元素自己换行（以实现不和前面浮动元素换行），有“己所不欲勿施于人”的意味。所以不是真正的清除浮动，所以可能会有某些bug，如</p>
<p>①如果clear:both元素前面的元素就是float元素，则margin-top负值即使设置成-9999px，也不见效果</p>
<p>②clear:both后面的元素依旧可能会发生文字环绕效果。</p>
<h3 id="成功的答案：BFC！"><a href="#成功的答案：BFC！" class="headerlink" title="成功的答案：BFC！"></a>成功的答案：BFC！</h3><p>BFC，全称 Block Formatting Context，块级格式化上下文。</p>
<p><strong>本质</strong>：具有BFC的元素，“内部元素”的翻江倒海，不会影响“外部元素”。</p>
<p>欸，那么就可以发现其重要的两个应用</p>
<ol>
<li>BFC不可能发生margin重叠：因为margin重叠是会影响外面的元素的</li>
<li><code>清除浮动的影响</code>：因为浮动会导致布局高度塌陷，那就一定会影响后面的元素的布局。</li>
</ol>
<blockquote>
<p>那么什么时候触发BFC呢？</p>
</blockquote>
<ul>
<li><html>根元素</li>
<li>浮动元素：float的值不为none</li>
<li>绝对定位元素：position的值不为relative和static</li>
<li>overflow的值为auto、scroll或hidden</li>
<li>display的值为inline-block、table-cell、table-caption</li>
</ul>
<p>前面的例子中有提到::f:rst-line伪元素暴露第一行的例子中，如果对文字设置成BFC之后，则文字为了和浮动元素产生交集，边顺着浮动边缘形成自己的封闭上下文。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110182152102.png" alt="image-20211018215204035"></p>
<p>而在这些方法中，几乎每个方法都会有各自的问题，但只有overflow才是大神！</p>
<p>那么现在清除浮动就有第三种方法了</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="float实现自适应布局"><a href="#float实现自适应布局" class="headerlink" title="float实现自适应布局"></a>float实现自适应布局</h2><h3 id="两列布局"><a href="#两列布局" class="headerlink" title="两列布局"></a>两列布局</h3><p>此处以左侧定宽，右侧自适应为例</p>
<h4 id="float-margin"><a href="#float-margin" class="headerlink" title="float+margin"></a>float+margin</h4><p>原理就是普通流体布局，加margin的目的就是表示右侧的所有元素必须和左侧保持至少margin的距离，才不会产生重叠的现象。更多例子可以看《CSS世界》156页</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的技巧适用于一侧定宽一侧自适应：如果是宽度不固定，也有办法处理，即下一种方法。</p>
<p>如果是百分比宽度，则也是可以的</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123; </span><br><span class="line"> <span class="attribute">float</span>: left; </span><br><span class="line"> <span class="attribute">width</span>: <span class="number">50%</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.right</span> &#123; </span><br><span class="line"> <span class="attribute">margin-left</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="float-overflow：基于BFC特性布局"><a href="#float-overflow：基于BFC特性布局" class="headerlink" title="float+overflow：基于BFC特性布局"></a>float+overflow：基于BFC特性布局</h4><p>此处利用的原理是：给右边开BFC。</p>
<p>右边为了不影响左侧的布局，即不会和左边产生交集，就顺着左边浮动边缘形成自己的封闭上下文。</p>
<blockquote>
<p>这种方式比上面的浮动布局更加自适应，更加智能。</p>
<p>因为不用管左侧的width、margin。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如果要中间有个间隔，那就可以通过左边或者右边的padding或者margin来设置。</p>
<p>建议在浮动元素上设置margin。</p>
<h4 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.root</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h3><h4 id="左中定宽，右自适应"><a href="#左中定宽，右自适应" class="headerlink" title="左中定宽，右自适应"></a>左中定宽，右自适应</h4><p>事实上，对于所有的左侧都定宽，右侧自适应的布局，三种方案都是和两列布局中的是一样的。</p>
<p>原理和两列布局中一致，多出来的中间那一列定宽的css样式和上面左边列一样</p>
<h4 id="左右定宽，中自适应（所谓的圣杯布局）"><a href="#左右定宽，中自适应（所谓的圣杯布局）" class="headerlink" title="左右定宽，中自适应（所谓的圣杯布局）"></a>左右定宽，中自适应（所谓的圣杯布局）</h4><p>要求：屏幕大小变化，左右定宽，中间的宽度会变。</p>
<p><u>事实上，和两列布局中几种方案也是一样的思想，也就是右侧和上面的左侧设置一样。</u></p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110182233161.png" alt="image-20211018223300106"></p>
<p>header和footer就不说了，比较简单，宽度拉满就可以了，这里只关注中间的部分。</p>
<h5 id="float-margin-1"><a href="#float-margin-1" class="headerlink" title="float+margin"></a>float+margin</h5><p>和两列布局中的一样，只不过右边也得加个margin。并且右侧是float:right</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.center</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>:<span class="number">0px</span> <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center; </span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: aquamarine;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，在 html 内 center 反而放后面，因为块级元素都是会独立占据一行的，如果放在前面，会使 right 列被顶下去。</p>
</blockquote>
<h5 id="float-overflow"><a href="#float-overflow" class="headerlink" title="float+overflow"></a>float+overflow</h5><p>只需将上面 center 列的 css 中 margin 属性替换成 overflow：hidden 即可</p>
<p>原理就是BFC，不加的话可能会重叠。</p>
<h5 id="flex布局-1"><a href="#flex布局-1" class="headerlink" title="flex布局"></a>flex布局</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="selector-class">.root</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.left</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.center</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aquamarine;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.right</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">float</span>: right;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;root&quot;&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">left</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;center&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">div</span> class=&quot;<span class="attribute">right</span>&quot;&gt;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure>

<h1 id="如何实现品字布局？"><a href="#如何实现品字布局？" class="headerlink" title="如何实现品字布局？"></a>如何实现品字布局？</h1><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>品字布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    * &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">      <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin-left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.div3</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>);</span></span><br><span class="line"><span class="css">    &#125;</span></span><br><span class="line"><span class="css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110182328997.png" alt="image-20211018232815934"></p>
<h2 id="第二种（全屏版）"><a href="#第二种（全屏版）" class="headerlink" title="第二种（全屏版）"></a>第二种（全屏版）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>品字布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.div1</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.div2</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.div3</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110182328387.png" alt="image-20211018232840334"></p>
<h1 id="布局题：div垂直居中，左右10px，高度始终为宽度一半"><a href="#布局题：div垂直居中，左右10px，高度始终为宽度一半" class="headerlink" title="布局题：div垂直居中，左右10px，高度始终为宽度一半"></a>布局题：div垂直居中，左右10px，高度始终为宽度一半</h1><blockquote>
<p>问题描述: 实现一个div垂直居中, 其距离屏幕左右两边各10px, 其高度始终是宽度的50%。同时div中有一个文字A，文字需要水平垂直居中。</p>
</blockquote>
<h2 id="思路一：利用height-0-padding-bottom-50"><a href="#思路一：利用height-0-padding-bottom-50" class="headerlink" title="思路一：利用height:0; padding-bottom: 50%;"></a>思路一：利用height:0; padding-bottom: 50%;</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      *&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.outer_wrapper</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* flex布局让块垂直居中 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.inner_wrapper</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding-bottom</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;outer_wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner_wrapper&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>强调两点:</p>
<ol>
<li>padding-bottom究竟是相对于谁的？</li>
</ol>
<p>答案是相对于<code>父元素的width值</code>。</p>
<p>那么对于这个out_wrapper的用意就很好理解了。 CSS呈流式布局，div默认宽度填满，即100%大小，给out_wrapper设置margin: 0 10px;相当于让左右分别减少了10px。</p>
<ol>
<li>父元素相对定位，那绝对定位下的子元素宽高若设为百分比，是相对谁而言的？</li>
</ol>
<p>相对于父元素的(content + padding)值, 注意不含border</p>
<p>延伸：如果子元素不是绝对定位，那宽高设为百分比是相对于父元素的宽高，标准盒模型下是content, IE盒模型是content+padding+border。</p>
<h2 id="思路二-利用calc和vw"><a href="#思路二-利用calc和vw" class="headerlink" title="思路二: 利用calc和vw"></a>思路二: 利用calc和vw</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      * &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">html</span>,</span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* vw是视口的宽度， 1vw代表1%的视口宽度 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100vw</span> - <span class="number">20px</span>);</span></span><br><span class="line"><span class="css">        <span class="comment">/* 宽度的一半 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">50vw</span> - <span class="number">10px</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="css">        <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 下面两行让块垂直居中 */</span></span></span><br><span class="line"><span class="css">        <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191720039.gif" alt="test"></p>
<h1 id="Flex弹性盒子布局"><a href="#Flex弹性盒子布局" class="headerlink" title="Flex弹性盒子布局"></a>Flex弹性盒子布局</h1><h2 id="什么是Flex布局"><a href="#什么是Flex布局" class="headerlink" title="什么是Flex布局"></a>什么是Flex布局</h2><blockquote>
<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191731832.jpeg" alt="img"></p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191732556.png" alt="img"></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h2 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h2><h3 id="container的属性"><a href="#container的属性" class="headerlink" title="container的属性"></a>container的属性</h3><ul>
<li><p>flex-direction：主轴的方向。</p>
</li>
<li><p>flex-wrap：超出父容器子容器的排列样式。</p>
</li>
<li><p>flex-flow：<code>flex-direction</code> 属性和 <code>flex-wrap</code> 属性的简写形式。</p>
</li>
<li><p>justify-content：子容器在主轴的排列方向。</p>
</li>
<li><p>align-items：子容器在交叉轴的排列方向。</p>
</li>
<li><p>align-content：多根轴线的对齐方式。</p>
</li>
</ul>
<h4 id="1-flex-direction属性"><a href="#1-flex-direction属性" class="headerlink" title="1.flex-direction属性"></a>1.flex-direction属性</h4><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<p>它有四个值</p>
<ul>
<li><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</li>
<li><code>column</code>：主轴为垂直方向，起点在上沿。</li>
<li><code>row</code>（默认值）：主轴为水平方向，起点在左端。</li>
<li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li>
</ul>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191735116.png" alt="img"></p>
<h4 id="2-flex-wrap属性"><a href="#2-flex-wrap属性" class="headerlink" title="2.flex-wrap属性"></a>2.flex-wrap属性</h4><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191737560.png" alt="img"></p>
<p>它可能取三个值。</p>
<p>（1）<code>nowrap</code>（默认）：不换行。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191737966.png" alt="img"></p>
<p>（2）<code>wrap</code>：换行，第一行在上方。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191737808.jpeg" alt="img"></p>
<p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191737174.jpeg" alt="img"></p>
<h4 id="3-flex-flow"><a href="#3-flex-flow" class="headerlink" title="3.flex-flow"></a>3.flex-flow</h4><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<h4 id="4-justify-content属性"><a href="#4-justify-content属性" class="headerlink" title="4.justify-content属性"></a>4.justify-content属性</h4><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191739908.png" alt="img"></p>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<blockquote>
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
</blockquote>
<h4 id="5-align-items属性"><a href="#5-align-items属性" class="headerlink" title="5.align-items属性"></a>5.align-items属性</h4><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191739324.png" alt="img"></p>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<blockquote>
<ul>
<li><code>flex-start</code>：交叉轴的起点对齐。</li>
<li><code>flex-end</code>：交叉轴的终点对齐。</li>
<li><code>center</code>：交叉轴的中点对齐。</li>
<li><code>baseline</code>: 项目的第一行文字的基线对齐。</li>
<li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
</blockquote>
<h4 id="6-align-content属性"><a href="#6-align-content属性" class="headerlink" title="6.align-content属性"></a>6.align-content属性</h4><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110191833272.png" alt="img"></p>
<p>该属性可能取6个值。</p>
<blockquote>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
</blockquote>
<h3 id="item的属性"><a href="#item的属性" class="headerlink" title="item的属性"></a>item的属性</h3><ul>
<li><p>order：子容器的排列顺序</p>
</li>
<li><p>flex-grow：子容器剩余空间的拉伸比例</p>
</li>
<li><p>flex-shrink：子容器超出空间的压缩比例</p>
</li>
<li><p>flex-basis：子容器在不伸缩情况下的原始尺寸</p>
</li>
<li><p>flex：子元素的 <code>flex</code> 属性是 <code>flex-grow</code>,<code>flex-shrink</code> 和  <code>flex-basis</code> 的简写</p>
</li>
<li><p>align-self</p>
</li>
</ul>
<h4 id="1-order属性"><a href="#1-order属性" class="headerlink" title="1.order属性"></a>1.order属性</h4><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110192340365.png" alt="img"></p>
<h4 id="2-flex-grow属性"><a href="#2-flex-grow属性" class="headerlink" title="2.flex-grow属性"></a>2.flex-grow属性</h4><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110192341573.png" alt="img"></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h4 id="3-flex-shrink属性"><a href="#3-flex-shrink属性" class="headerlink" title="3.flex-shrink属性"></a>3.flex-shrink属性</h4><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110192341643.jpeg" alt="img"></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h4 id="4-flex-basis属性"><a href="#4-flex-basis属性" class="headerlink" title="4.flex-basis属性"></a>4.flex-basis属性</h4><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h4 id="5-flex属性"><a href="#5-flex属性" class="headerlink" title="5.flex属性"></a>5.flex属性</h4><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h4 id="6-align-self属性"><a href="#6-align-self属性" class="headerlink" title="6.align-self属性"></a>6.align-self属性</h4><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110192343581.png" alt="img"></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<p>更多的实战例子可以看 <span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA3L2ZsZXgtZXhhbXBsZXMuaHRtbA==">Flex 布局教程：实例篇——阮一峰</span></p>
<h1 id="Grid格栅布局"><a href="#Grid格栅布局" class="headerlink" title="Grid格栅布局"></a>Grid格栅布局</h1><p>flex 布局虽然强大，但是只能是一维布局，如果要进行二维布局，那么我们还需要使用 grid。</p>
<p>grid 布局又称为“网格布局”，可以实现二维布局方式，和之前的 表格<code>table</code>布局差不多，然而，这是使用 CSS 控制的，不是使用 HTML 控制的，同时还可以依赖于媒体查询根据不同的上下文得新定义布局。</p>
<blockquote>
<p>网格布局还可以让我们摆脱现在布局中存在的文档流限制，换句话说，你的结构不需要根据设计稿从上往上布置了。这也意味着您可以自由地更改页面元素位置。这最适合你在不同的断点位置实现你最需要的布局，而不再需要为响应你的设计而担心HTML结构的问题。</p>
</blockquote>
<p>和 <code>table</code> 布局不同的是，<code>grid</code> 布局不需要在 HTML 中使用特定的标签布局，所有的布局都是在 CSS 中完成的，你可以随意定义你的 grid 网格。</p>
<blockquote>
<p>没有 HTML 结构的网格布局有助于使用流体、调整顺序等技术管理或更改布局。通过结合 CSS 的媒体查询属性，可以控制网格布局容器和他们的子元素，使用页面的布局根据不同的设备和可用空间调整元素的显示风格与定位，而不需要去改变文档结构的本质内容。</p>
</blockquote>
<p>有一篇关于bootstrap和grid布局的文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLnRoZW9kby5jb20vMjAxOC8wMy9zdG9wLXVzaW5nLWJvb3RzdHJhcC1sYXlvdXQtdGhhbmtzLXRvLWNzcy1ncmlkLw==">How I stopped using Bootstrap’s layout thanks to CSS Grid</span></p>
<h2 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="容器和项目"><a href="#容器和项目" class="headerlink" title="容器和项目"></a>容器和项目</h3><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。</p>
<blockquote>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。</p>
<p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<code>&lt;p&gt;</code>元素就不是项目。Grid 布局只对项目生效。</p>
<h3 id="行和列"><a href="#行和列" class="headerlink" title="行和列"></a>行和列</h3><p>容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200019487.png" alt="image-20211020001949419" style="zoom:50%;" />

<p>上图中，水平的深色区域就是”行”，垂直的深色区域就是”列”。</p>
<h3 id="单元格"><a href="#单元格" class="headerlink" title="单元格"></a>单元格</h3><p>行和列的交叉区域，称为”单元格”（cell）。</p>
<p>正常情况下，<code>n</code>行和<code>m</code>列会产生<code>n x m</code>个单元格。比如，3行3列会产生9个单元格。</p>
<h3 id="网格线"><a href="#网格线" class="headerlink" title="网格线"></a>网格线</h3><p>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p>
<p>正常情况下，<code>n</code>行有<code>n + 1</code>根水平网格线，<code>m</code>列有<code>m + 1</code>根垂直网格线，比如三行就有四根水平网格线。</p>
<h2 id="container属性"><a href="#container属性" class="headerlink" title="container属性"></a>container属性</h2><h3 id="1-display-属性"><a href="#1-display-属性" class="headerlink" title="1.display 属性"></a>1.display 属性</h3><p><code>display: grid</code>指定一个容器采用网格布局。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200021086.png" alt="image-20211020002136028" style="zoom:50%;" />

<p>上图是<code>display: grid</code>的<span class="exturl" data-url="aHR0cHM6Ly9qc2Jpbi5jb20vZ3V2aXZ1bS9lZGl0P2h0bWwsY3NzLG91dHB1dA==">效果</span>。</p>
<p>默认情况下，容器元素都是块级元素，但也可以设成行内元素。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码指定<code>div</code>是一个行内元素，该元素内部采用网格布局。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200021261.png" alt="image-20211020002147206" style="zoom:50%;" />

<p>上图是<code>display: inline-grid</code>的<span class="exturl" data-url="aHR0cHM6Ly9qc2Jpbi5jb20vcWF0aXRhdi9lZGl0P2h0bWwsY3NzLG91dHB1dA==">效果</span>。</p>
<blockquote>
<p>注意，设为网格布局以后，容器子元素（项目）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</p>
</blockquote>
<h3 id="2-grid-template-columns-属性，-grid-template-rows-属性"><a href="#2-grid-template-columns-属性，-grid-template-rows-属性" class="headerlink" title="2.grid-template-columns 属性， grid-template-rows 属性"></a>2.grid-template-columns 属性， grid-template-rows 属性</h3><p>容器指定了网格布局以后，接着就要划分行和列。<code>grid-template-columns</code>属性定义每一列的列宽，<code>grid-template-rows</code>属性定义每一行的行高。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码指定了一个三行三列的网格，列宽和行高都是<code>100px</code>。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200847969.png" alt="image-20211020084742891" style="zoom:33%;" />

<p>除了使用绝对单位，也可以使用百分比。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">  grid-template-rows: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">  grid-template-rows: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>（1）repeat()</strong></p>
<p>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用<code>repeat()</code>函数，简化重复的值。上面的代码用<code>repeat()</code>改写如下。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">  grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">33.33%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>repeat()</code>接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p>
<p><code>repeat()</code>重复某种模式也是可以的。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">100px</span> <span class="number">20px</span> <span class="number">80px</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码、定义了6列，第一列和第四列的宽度为<code>100px</code>，第二列和第五列为<code>20px</code>，第三列和第六列为<code>80px</code>。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200849531.png" alt="image-20211020084907460" style="zoom:25%;" />

<p><strong>（3）fr 关键字</strong></p>
<p>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的两倍。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码表示两个相同宽度的列。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200849367.png" alt="image-20211020084940294" style="zoom: 25%;" />

<p><code>fr</code>可以与绝对长度的单位结合使用，这时会非常方便。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200850008.png" alt="image-20211020085024942" style="zoom: 33%;" />

<p><strong>（4）minmax()</strong></p>
<p><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="built_in">minmax</span>(<span class="number">100px</span>, <span class="number">1</span>fr);</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，<code>minmax(100px, 1fr)</code>表示列宽不小于<code>100px</code>，不大于<code>1fr</code>。</p>
<p><strong>（5）auto 关键字</strong></p>
<p><code>auto</code>关键字表示由浏览器自己决定长度。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> auto <span class="number">100px</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了<code>min-width</code>，且这个值大于最大宽度。</p>
<p><strong>（6）网格线的名称</strong></p>
<p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line">  grid-template-rows: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。</p>
<p>网格布局允许同一根线有多个名字，比如<code>[fifth-line row-5]</code>。</p>
<p><strong>（7）布局实例</strong></p>
<p><code>grid-template-columns</code>属性对于网页布局非常有用。两栏式布局只需要一行代码。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">70%</span> <span class="number">30%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码将左边栏设为70%，右边栏设为30%。</p>
<p>传统的十二网格布局，写起来也很容易。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">12</span>, <span class="number">1</span>fr);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="3-grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性"><a href="#3-grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性" class="headerlink" title="3.grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性"></a>3.grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性</h3><p><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-row-gap: <span class="number">20px</span>;</span><br><span class="line">  grid-<span class="attribute">column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，<code>grid-row-gap</code>用于设置行间距，<code>grid-column-gap</code>用于设置列间距。</p>
<p><code>grid-gap</code>属性是<code>grid-column-gap</code>和<code>grid-row-gap</code>的合并简写形式，语法如下。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>因此，上面一段 CSS 代码等同于下面的代码。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  grid-gap: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果<code>grid-gap</code>省略了第二个值，浏览器认为第二个值等于第一个值。</p>
<blockquote>
<p>根据最新标准，上面三个属性名的<code>grid-</code>前缀已经删除，<code>grid-column-gap</code>和<code>grid-row-gap</code>写成<code>column-gap</code>和<code>row-gap</code>，<code>grid-gap</code>写成<code>gap</code>。</p>
</blockquote>
<h3 id="4-grid-template-areas-属性"><a href="#4-grid-template-areas-属性" class="headerlink" title="4.grid-template-areas 属性"></a>4.grid-template-areas 属性</h3><p>网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-areas: <span class="string">&#x27;a b c&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;d e f&#x27;</span></span><br><span class="line">                       <span class="string">&#x27;g h i&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码先划分出9个单元格，然后将其定名为<code>a</code>到<code>i</code>的九个区域，分别对应这九个单元格。</p>
<p>多个单元格合并成一个区域的写法如下。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grid-template-areas: <span class="string">&#x27;a a a&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;b b b&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;c c c&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码将9个单元格分成<code>a</code>、<code>b</code>、<code>c</code>三个区域。</p>
<p>下面是一个布局实例。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grid-template-areas: <span class="string">&quot;header header header&quot;</span></span><br><span class="line">                     <span class="string">&quot;main main sidebar&quot;</span></span><br><span class="line">                     <span class="string">&quot;footer footer footer&quot;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，顶部是页眉区域<code>header</code>，底部是页脚区域<code>footer</code>，中间部分则为<code>main</code>和<code>sidebar</code>。</p>
<p>如果某些区域不需要利用，则使用”点”（<code>.</code>）表示。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grid-template-areas: <span class="string">&#x27;a . c&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;d . f&#x27;</span></span><br><span class="line">                     <span class="string">&#x27;g . i&#x27;</span>;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。</p>
<blockquote>
<p>注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<code>区域名-start</code>，终止网格线自动命名为<code>区域名-end</code>。</p>
<p>比如，区域名为<code>header</code>，则起始位置的水平网格线和垂直网格线叫做<code>header-start</code>，终止位置的水平网格线和垂直网格线叫做<code>header-end</code>。</p>
</blockquote>
<h3 id="5-grid-auto-flow-属性"><a href="#5-grid-auto-flow-属性" class="headerlink" title="5.grid-auto-flow 属性"></a>5.grid-auto-flow 属性</h3><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200853732.png" alt="image-20211020085328660" style="zoom:25%;" />

<p>这个顺序由<code>grid-auto-flow</code>属性决定，默认值是<code>row</code>，即”先行后列”。也可以将它设成<code>column</code>，变成”先列后行”。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-<span class="attribute">auto</span>-flow: column;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码设置了<code>column</code>以后，放置顺序就变成了下图。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200856788.png" alt="image-20211020085608716" style="zoom:25%;" />

<p><code>grid-auto-flow</code>属性除了设置成<code>row</code>和<code>column</code>，还可以设成<code>row dense</code>和<code>column dense</code>。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qc2Jpbi5jb20vd2FwZWpvay9lZGl0P2NzcyxvdXRwdXQ=">下面的例子</span>让1号项目和2号项目各占据两个单元格，然后在默认的<code>grid-auto-flow: row</code>情况下，会产生下面这样的布局。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200856749.png" alt="image-20211020085636667" style="zoom:25%;" />

<p>上图中，1号项目后面的位置是空的，这是因为3号项目默认跟着2号项目，所以会排在2号项目后面。</p>
<p>现在修改设置，设为<code>row dense</code>，表示”先行后列”，并且尽可能紧密填满，尽量不出现空格。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-<span class="attribute">auto</span>-flow: row dense;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码的效果如下。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200857987.png" alt="image-20211020085708908" style="zoom:25%;" />

<p>上图会先填满第一行，再填满第二行，所以3号项目就会紧跟在1号项目的后面。8号项目和9号项目就会排到第四行。</p>
<p>如果将设置改为<code>column dense</code>，表示”先列后行”，并且尽量填满空格。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-<span class="attribute">auto</span>-flow: column dense;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qc2Jpbi5jb20vcHVwb2R1Yy8xL2VkaXQ/aHRtbCxjc3Msb3V0cHV0">上面代码</span>的效果如下。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200857256.png" alt="image-20211020085736185" style="zoom:25%;" />

<p>上图会先填满第一列，再填满第2列，所以3号项目在第一列，4号项目在第二列。8号项目和9号项目被挤到了第四列。</p>
<h3 id="6-justify-items-属性，-align-items-属性，-place-items-属性"><a href="#6-justify-items-属性，-align-items-属性，-place-items-属性" class="headerlink" title="6.justify-items 属性， align-items 属性， place-items 属性"></a>6.justify-items 属性， align-items 属性， place-items 属性</h3><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右），<code>align-items</code>属性设置单元格内容的垂直位置（上中下）。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这两个属性的写法完全相同，都可以取下面这些值。</p>
<blockquote>
<ul>
<li>start：对齐单元格的起始边缘。</li>
<li>end：对齐单元格的结束边缘。</li>
<li>center：单元格内部居中。</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码表示，单元格的内容左对齐，效果如下图。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200900280.png" alt="image-20211020090015204" style="zoom: 33%;" />

<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码表示，单元格的内容头部对齐，效果如下图。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200900077.png" alt="image-20211020090045993" style="zoom:50%;" />

<p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: &lt;align-items&gt; &lt;justify-items&gt;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面是一个例子。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-items: start end;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果省略第二个值，则浏览器认为与第一个值相等。</p>
<h3 id="7-justify-content-属性，-align-content-属性，-place-content-属性"><a href="#7-justify-content-属性，-align-content-属性，-place-content-属性" class="headerlink" title="7.justify-content 属性， align-content 属性， place-content 属性"></a>7.justify-content 属性， align-content 属性， place-content 属性</h3><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以<code>justify-content</code>属性为例，<code>align-content</code>属性的图完全一样，只是将水平方向改成垂直方向。）</p>
<blockquote>
<ul>
<li>start - 对齐容器的起始边框。</li>
</ul>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200901293.png" alt="image-20211020090119207" style="zoom:33%;" />

<blockquote>
<ul>
<li>end - 对齐容器的结束边框。</li>
</ul>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200901125.png" alt="image-20211020090141037" style="zoom:33%;" />

<blockquote>
<ul>
<li>stretch - 项目大小没有指定时，拉伸占据整个网格容器。</li>
</ul>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200902315.png" alt="image-20211020090203225" style="zoom:33%;" />

<blockquote>
<ul>
<li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。    </li>
</ul>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200902144.png" alt="image-20211020090232055" style="zoom:33%;" />

<blockquote>
<ul>
<li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li>
</ul>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200902211.png" alt="image-20211020090255132" style="zoom:33%;" />

<blockquote>
<ul>
<li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li>
</ul>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200903613.png" alt="image-20211020090313525" style="zoom:33%;" />

<p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-<span class="attribute">content</span>: &lt;align-content&gt; &lt;justify-content&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面是一个例子。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-<span class="attribute">content</span>: space-around space-evenly;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果省略第二个值，浏览器就会假定第二个值等于第一个值。</p>
<h3 id="8-grid-auto-columns-属性，-grid-auto-rows-属性"><a href="#8-grid-auto-columns-属性，-grid-auto-rows-属性" class="headerlink" title="8.grid-auto-columns 属性， grid-auto-rows 属性"></a>8.grid-auto-columns 属性， grid-auto-rows 属性</h3><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。</p>
<p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p>
<p>下面的例子里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  grid-template-<span class="attribute">columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-template-rows: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  grid-<span class="attribute">auto</span>-rows: <span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码指定新增的行高统一为50px（原始的行高为100px）。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200905367.png" alt="image-20211020090519282" style="zoom:33%;" />

<h3 id="9-grid-template-属性，-grid-属性"><a href="#9-grid-template-属性，-grid-属性" class="headerlink" title="9.grid-template 属性， grid 属性"></a>9.grid-template 属性， grid 属性</h3><p><code>grid-template</code>属性是<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</p>
<p><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。</p>
<p>从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这两个属性了。</p>
<h2 id="item属性"><a href="#item属性" class="headerlink" title="item属性"></a>item属性</h2><h3 id="1-grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性"><a href="#1-grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性" class="headerlink" title="1.grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性"></a>1.grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性</h3><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p>
<blockquote>
<ul>
<li><code>grid-column-start</code>属性：左边框所在的垂直网格线</li>
<li><code>grid-column-end</code>属性：右边框所在的垂直网格线</li>
<li><code>grid-row-start</code>属性：上边框所在的水平网格线</li>
<li><code>grid-row-end</code>属性：下边框所在的水平网格线</li>
</ul>
</blockquote>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-start: <span class="number">2</span>;</span><br><span class="line">  grid-column-end: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200906137.png" alt="image-20211020090642051" style="zoom:33%;" />

<p>上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。</p>
<p>除了1号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的<code>grid-auto-flow</code>属性决定，这个属性的默认值是<code>row</code>，因此会”先行后列”进行排列。读者可以把这个属性的值分别改成<code>column</code>、<code>row dense</code>和<code>column dense</code>，看看其他项目的位置发生了怎样的变化。</p>
<p>下面的例子是指定四个边框位置的效果。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-start: <span class="number">1</span>;</span><br><span class="line">  grid-column-end: <span class="number">3</span>;</span><br><span class="line">  grid-row-start: <span class="number">2</span>;</span><br><span class="line">  grid-row-end: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200906155.png" alt="image-20211020090659067" style="zoom:33%;" />

<p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-start: header-start;</span><br><span class="line">  grid-column-end: header-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，左边框和右边框的位置，都指定为网格线的名字。</p>
<p>这四个属性的值还可以使用<code>span</code>关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-start: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码表示，1号项目的左边框距离右边框跨越2个网格。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200908844.png" alt="image-20211020090805759" style="zoom:33%;" />

<p>这与<span class="exturl" data-url="aHR0cHM6Ly9qc2Jpbi5jb20vbXVqaWhpYi9lZGl0P2h0bWwsY3NzLG91dHB1dA==">下面的代码</span>效果完全一样。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-end: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>使用这四个属性，如果产生了项目的重叠，则使用<code>z-index</code>属性指定项目的重叠顺序。</p>
<h3 id="2-grid-column-属性，-grid-row-属性"><a href="#2-grid-column-属性，-grid-row-属性" class="headerlink" title="2.grid-column 属性， grid-row 属性"></a>2.grid-column 属性， grid-row 属性</h3><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-column: &lt;start-line&gt; / &lt;end-line&gt;;</span><br><span class="line">  grid-row: &lt;start-line&gt; / &lt;end-line&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面是一个例子。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  grid-row: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column-start: <span class="number">1</span>;</span><br><span class="line">  grid-column-end: <span class="number">3</span>;</span><br><span class="line">  grid-row-start: <span class="number">1</span>;</span><br><span class="line">  grid-row-end: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，项目<code>item-1</code>占据第一行，从第一根列线到第三根列线。</p>
<p>这两个属性之中，也可以使用<code>span</code>关键字，表示跨越多少个网格。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b03532</span>;</span><br><span class="line">  grid-column: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  grid-row: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b03532</span>;</span><br><span class="line">  grid-column: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">  grid-row: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qc2Jpbi5jb20vdm9sdWdvdy9lZGl0P2h0bWwsY3NzLG91dHB1dA==">上面代码</span>中，项目<code>item-1</code>占据的区域，包括第一行 + 第二行、第一列 + 第二列。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200908770.png" alt="image-20211020090851688" style="zoom:33%;" />

<p>斜杠以及后面的部分可以省略，默认跨越一个网格。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-column: <span class="number">1</span>;</span><br><span class="line">  grid-row: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>上面代码中，项目<code>item-1</code>占据左上角第一个网格。</p>
<h3 id="3-grid-area-属性"><a href="#3-grid-area-属性" class="headerlink" title="3.grid-area 属性"></a>3.grid-area 属性</h3><p><code>grid-area</code>属性指定项目放在哪一个区域。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  grid-area: e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qc2Jpbi5jb20vcW9rZXhvYi9lZGl0P2NzcyxvdXRwdXQ=">上面代码</span>中，1号项目位于<code>e</code>区域，效果如下图。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200911881.png" alt="image-20211020091141796" style="zoom:33%;" />

<p><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">  grid-area: <span class="number">1</span> / <span class="number">1</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="4-justify-self-属性，-align-self-属性，-place-self-属性"><a href="#4-justify-self-属性，-align-self-属性，-place-self-属性" class="headerlink" title="4.justify-self 属性， align-self 属性， place-self 属性"></a>4.justify-self 属性， align-self 属性， place-self 属性</h3><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p>
<p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  justify-self: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>这两个属性都可以取下面四个值。</p>
<blockquote>
<ul>
<li>start：对齐单元格的起始边缘。</li>
<li>end：对齐单元格的结束边缘。</li>
<li>center：单元格内部居中。</li>
<li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li>
</ul>
</blockquote>
<p>下面是<code>justify-self: start</code>的例子。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span>  &#123;</span><br><span class="line">  justify-self: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202110200912706.png" alt="image-20211020091253610" style="zoom:33%;" />

<p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-self: &lt;align-self&gt; &lt;justify-self&gt;;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>下面是一个例子。</p>
<blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place-self: center center;</span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果省略第二个值，<code>place-self</code>属性会认为这两个值相等。</p>
<h1 id="说说如何实现多端适配？"><a href="#说说如何实现多端适配？" class="headerlink" title="说说如何实现多端适配？"></a>说说如何实现多端适配？</h1><p>首先推荐一篇文章，可以先了解一下一些基础的概念，<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzODQ1NjE3NzI5NTQ5">关于移动端适配，你必须要知道的——抖音前端安全</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDk3ODE5OTI=">设计体系的响应式设计 | Ant Design 4.0 系列分享</span></p>
<h2 id="搭砖块——设置固定宽高的方式？❌"><a href="#搭砖块——设置固定宽高的方式？❌" class="headerlink" title="搭砖块——设置固定宽高的方式？❌"></a>搭砖块——设置固定宽高的方式？❌</h2><p>对于刚入行的新人，由于他们对CSS的理解可能还比较浅,布局的思维方式还停留在搭积木的思维模式上，表现为给元素设置固定宽、高并进行拼接，布局方式为固定布局。固定布局确实更容易上手，因为它和现实中房屋建造的特点一致，但是固定布局<strong>缺乏弹性</strong>，并不能很好地适配各种尺寸。而我们在开头就说过，不能用砖块的思想来学习CSS。</p>
<h2 id="百分比布局？❌"><a href="#百分比布局？❌" class="headerlink" title="百分比布局？❌"></a>百分比布局？❌</h2><p>两个缺点：</p>
<ul>
<li>计算困难，如果我们要定义一个元素的宽度和高度，按照设计稿，必须换算成百分比单位。</li>
<li>每个属性的百分比的参考对象不唯一，十分复杂。前面有详细描述到，这里不再赘述。</li>
</ul>
<h2 id="媒体查询-纯vw布局❌"><a href="#媒体查询-纯vw布局❌" class="headerlink" title="媒体查询+纯vw布局❌"></a>媒体查询+纯vw布局❌</h2><p>百分比布局的方式既然因为参考对象不同，导致计算很困难，那似乎直接用vw来计算，所有元素的参考对象就是屏幕大小，似乎问题就变简单了。</p>
<p>在这种纯vw单位的布局方式下，布局尺寸和图文大小既不使用px单位，也不使用rem单位，而是统-使用vw单位。例如，视觉稿上图片的尺寸是120px<em>80px，使用vw单位表示就是（假设屏幕是375px</em>375px）:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">120</span>*<span class="number">100</span>/<span class="number">375</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(<span class="number">80</span>*<span class="number">100</span>/<span class="number">375</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一切单位皆是vw。于是，开发的时候只需要使用vw单位按照1 : 1的尺寸将视觉稿复刻下来，就可以做到无论是什么宽度的设备，都会等比例缩放，不用担心因为设备宽度不一样而出现错位或无法对齐等布局问题。<br>但是，不建议在长期维护的大型项目中使用纯vw布局方式，因为这种布局方式一旦确定，后期更换布局的成本会非常高，这种布局方式比较适合用在运营活动页面中。<br>另外，纯vw单位的布局方式就像搬砖砌墙，虽然简单直接，但是并不利于对CSS的深入学习。因此，建议在有了一定的CSS基础之后，使用基于rem和vw单位并配合calc()函数的适配方案进行布局开发， 徜徉在CSS世界中，感受CSS布局新特性的美。</p>
<h2 id="媒体查询-rem布局？❌"><a href="#媒体查询-rem布局？❌" class="headerlink" title="媒体查询+rem布局？❌"></a>媒体查询+rem布局？❌</h2><blockquote>
<p>rem是CSS3新增的一个相对单位，这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小</p>
</blockquote>
<p>所以，要想使整个网页保持弹性其实很简单，<u>让元素的宽高和文字的尺寸大小都使用rem单位， 然后在不同宽度的设备下设置准确的根字号大小</u>就可以了。</p>
<p>于是，诞生了两种做法</p>
<p>（1）设定临界点处的“根字号”</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>缺点</strong>：</p>
<p>对于非临界点尺寸的设备很不友好，例如Pixel 2手机的宽度是411px,不属于任何临界点，代码中使用的根字号是16px,显然偏小，最终的体验就不好。</p>
<p>(2)头部嵌入-段JavaScript代码， 根据屏幕尺寸设置对应的根字号大小。例如，下面是曾经在业界用过一段时间的计算公式: </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.width = <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">7.5</span> + <span class="string">&#x27;px&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>第二种做法的优点在于任何宽度的手机都有对应的根字号设置，但是缺点很多。</p>
<ul>
<li>首先，在我看来，CSS布局效果使用了JavaScript,这是“原罪”；</li>
<li>其次，根字号会线性放大，如果是使用iPad等设备访问，则会看到超级夸张的字号和布局尺寸；但是，用户使用大屏幕，<strong>用户使用更大的屏幕，是想看到更多的内容，而不是更大的字</strong>。</li>
<li>最后，基准字号是50px,与默认的16px相去甚远，日后想要推翻之前的适配策略(例如改成16px的基准字号)则改动巨大，举步维艰。</li>
</ul>
<h2 id="媒体查询-viewport-calc-函数-rem"><a href="#媒体查询-viewport-calc-函数-rem" class="headerlink" title="媒体查询+viewport+calc()函数+rem"></a>媒体查询+viewport+calc()函数+rem</h2><p>有了vw单位，再配合calc() 函数进行计算 ，无须使用任何JavaScript代码，我们就可以实现基于设备宽度的移动端布局适配方案。例如，希望375px ~ 414px的宽度区间的根字号大小是16px ~ 18px,就可以这么设置:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="comment">/* 375px宽度使用16px基准尺寸，39=414-375这样就保证414px的时候是18px */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">16px</span> + <span class="number">2</span> * (<span class="number">100vw</span> - <span class="number">375px</span>) / <span class="number">39</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以如果是375px的时候，font-size就是16px，中间值例如400px那font-size就是16px+2*（100vw-375px）/39=17.28px，414px的时候就是刚好18px。</p>
<p>断点间的适配就更好了，无论尺寸多少，都有一个合适的根字号大小。</p>
<p>此时只需要把视觉稿对应的px尺寸使用rem表示就可以了。例如，视觉稿上图片尺寸是120pxx80px，则我们布局的时候使用:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">7.5rem</span>;<span class="comment">/*cal(120/16rem)*/</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">5rem</span>;<span class="comment">/*cal(80/16rem)*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最佳实践代码"><a href="#最佳实践代码" class="headerlink" title="最佳实践代码"></a>最佳实践代码</h3><p>下面这段CSS代码是最常用的基于rem和vw单位并配合calc() 函数的移动端适配代码， 大家可以自行微调或者直接复制粘贴到自己的项目中使用，例如screen and可以删除，1000px之后的尺寸可以使用固定值等:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 375px作为16px基准，414px宽度时正好对应18px的根字号大小 */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">16px</span> + <span class="number">2</span> * (<span class="number">100vw</span> - <span class="number">375px</span>) / <span class="number">39</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 屏幕宽度从414px到1000px，根字号大小累积增加4px（18px-22px） */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">18px</span> + <span class="number">4</span> * (<span class="number">100vw</span> - <span class="number">414px</span>) / <span class="number">586</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1000px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="comment">/* 屏幕宽度从1000px往后每增加100px，根字号大小就增加0.5px */</span></span><br><span class="line">        <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">22px</span> + <span class="number">5</span> * (<span class="number">100vw</span> - <span class="number">1000px</span>) / <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码的优点是兼容性非常强，尺寸有弹性，纯CSS驱动，同时在宽屏下布局尺寸不至于过大(1000px宽度屏幕下的字号是22px,使用之前的JavaScript计算方法的话，1000px宽度 屏幕下的字号大约是43px，尺寸太大)</p>
<blockquote>
<p><strong>rem单位不是万能的</strong></p>
<p>上面的rem单位布局方法并不是万能的，首先渲染尺寸并不总是整数，例如，1.25rem在375px宽度屏幕下的计算值是20px,但是在414px宽度屏幕下的计算值却是22.5px。非整数尺寸偶尔会带来一些渲染的问题，例如，当SVG图标尺寸不是整数的时候，边缘可能会出现奇怪的间隙;又如，需要精确知道若干个列表的高度之和的时候，如果列表的高度不是整数，则最终的高度值和实际的渲染高度值会有误差。在这些场景下，可以将对应元素的rem单位改成px单位进行表示。</p>
</blockquote>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE5LzAzL2dyaWQtbGF5b3V0LXR1dG9yaWFsLmh0bWw=">CSS Grid 网格布局教程——阮一峰</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA3L2ZsZXgtZ3JhbW1hci5odG1s">Flex 布局教程：语法篇——阮一峰</span></p>
</li>
<li><p><a href=""></a></p>
</li>
</ol>

      <div class="tags">
          <a href="/tags/CSS/" rel="tag"><i class="ic i-tag"></i> CSS</a>
      </div>
  </div>

   <footer>

    <div class="meta">
  <span class="item">
    <span class="icon">
      <i class="ic i-calendar-check"></i>
    </span>
    <span class="text">Edited on</span>
    <time title="Modified: 2021-12-28 10:24:19" itemprop="dateModified" datetime="2021-12-28T10:24:19+08:00">2021-12-28</time>
  </span>
  <span id="FrontEnd/CSS/FrontEnd/CSS/CSS布局总结" class="item leancloud_visitors" data-flag-title="CSS布局总结" title="Views">
      <span class="icon">
        <i class="ic i-eye"></i>
      </span>
      <span class="text">Views</span>
      <span class="leancloud-visitors-count"></span>
      <span class="text">times</span>
  </span>
</div>

      

<div id="copyright">
<ul>
  <li class="author">
    <strong>Post author:  </strong>Monkey-HH <i class="ic i-at"><em>@</em></i>
  </li>
  <li class="link">
    <strong>Post link: </strong>
    <a href="https://monkeyhh.top/FrontEnd/CSS/FrontEnd/CSS/CSS%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93" title="CSS布局总结">https://monkeyhh.top/FrontEnd/CSS/FrontEnd/CSS/CSS布局总结</a>
  </li>
  <li class="license">
    <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> unless stating additionally.
  </li>
</ul>
</div>

  </footer>

</article>

  </div>
  

<div class="post-nav">
    <div class="item left">
      

  <a href="/FrontEnd/CSS/FrontEnd/CSS/CSS%E9%80%89%E6%8B%A9%E5%99%A8" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;monkey-HH&#x2F;picBed&#x2F;raw&#x2F;master&#x2F;picbed&#x2F;img&#x2F;202109231754245.png" title="CSS选择器">
  <span class="type">Previous Post</span>
  <span class="category"><i class="ic i-flag"></i> CSS</span>
  <h3>CSS选择器</h3>
  </a>

    </div>
    <div class="item right">
      

  <a href="/FrontEnd/CSS/FrontEnd/CSS/CSS3%E5%8A%A8%E7%94%BB%E5%85%A5%E9%97%A8" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;tva1.sinaimg.cn&#x2F;mw690&#x2F;6833939bly1giclx29mstj20zk0m8hdt.jpg" title="CSS3动画入门">
  <span class="type">Next Post</span>
  <span class="category"><i class="ic i-flag"></i> CSS</span>
  <h3>CSS3动画入门</h3>
  </a>

    </div>
</div>

  
  <div class="wrap" id="comments"></div>


        </div>
        <div id="sidebar">
          

<div class="inner">

  <div class="panels">
    <div class="inner">
      <div class="contents panel pjax" data-title="Contents">
          <ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%BC%95%E8%A8%80"><span class="toc-number">1.</span> <span class="toc-text">引言</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%8A%9B%E5%BC%83%E2%80%9C%E7%A0%96%E5%9D%97%E2%80%9D%EF%BC%8C%E6%8B%A5%E6%8A%B1%E2%80%9C%E6%B5%81%E2%80%9D"><span class="toc-number">2.</span> <span class="toc-text">抛弃“砖块”，拥抱“流”</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B5%81%E7%9A%84%E4%BD%93%E7%8E%B0"><span class="toc-number">2.1.</span> <span class="toc-text">流的体现</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%8E%E6%B5%81"><span class="toc-number">2.1.1.</span> <span class="toc-text">块级元素与流</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#absolute%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%81%E7%9A%84%E5%85%B3%E7%B3%BB"><span class="toc-number">2.1.2.</span> <span class="toc-text">absolute绝对定位与流的关系</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B5%81%E7%9A%84%E7%A0%B4%E5%9D%8F"><span class="toc-number">2.2.</span> <span class="toc-text">流的破坏</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B5%81%E5%90%91%E7%9A%84%E6%94%B9%E5%8F%98"><span class="toc-number">2.3.</span> <span class="toc-text">流向的改变</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E7%9B%92%E6%A8%A1%E5%9E%8B"><span class="toc-number">3.</span> <span class="toc-text">盒模型</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%9D%97%E7%BA%A7%E7%9B%92%E5%AD%90%E5%92%8C%E5%86%85%E8%81%94%E7%9B%92%E5%AD%90"><span class="toc-number">3.1.</span> <span class="toc-text">块级盒子和内联盒子</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4%E5%B1%9E%E6%80%A7%E7%9A%84%E2%80%9C%E7%99%BE%E5%88%86%E6%AF%94%E2%80%9D%E7%9A%84%E5%8F%82%E8%80%83%E5%AF%B9%E8%B1%A1"><span class="toc-number">4.</span> <span class="toc-text">说说属性的“百分比”的参考对象</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%AD%A3%E5%B8%B8%E5%AE%9A%E4%BD%8D%E4%B8%8B"><span class="toc-number">4.1.</span> <span class="toc-text">正常定位下</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D"><span class="toc-number">4.2.</span> <span class="toc-text">绝对定位</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%A6%82%E4%BD%95%E8%AE%A9%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%EF%BC%9F"><span class="toc-number">5.</span> <span class="toc-text">如何让一个元素水平垂直居中？</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B5%81-%E5%AE%9A%E5%AE%BD%EF%BC%88%E9%AB%98%EF%BC%89-%E8%87%AA%E5%8A%A8margin"><span class="toc-number">5.1.</span> <span class="toc-text">流+定宽（高）+自动margin</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B0%B4%E5%B9%B3%E5%92%8C%E5%9E%82%E7%9B%B4%E5%90%8C%E6%97%B6%E5%B1%85%E4%B8%AD"><span class="toc-number">5.2.</span> <span class="toc-text">水平和垂直同时居中</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0"><span class="toc-number">5.2.1.</span> <span class="toc-text">1.行内元素</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-%E5%AE%9A%E5%AE%BD%E9%AB%98%E7%9A%84%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0"><span class="toc-number">5.2.2.</span> <span class="toc-text">2.定宽高的块级元素</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#2-1%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E8%B4%9Fmargin"><span class="toc-number">5.2.2.1.</span> <span class="toc-text">2.1绝对定位+负margin</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#2-2%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E8%87%AA%E5%8A%A8margin-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AE%BD%E9%AB%98"><span class="toc-number">5.2.2.2.</span> <span class="toc-text">2.2绝对定位 + 自动margin&#x2F;格式化宽高</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-%E4%B8%8D%E5%AE%9A%E5%AE%BD%E9%AB%98%E7%9A%84%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0"><span class="toc-number">5.2.3.</span> <span class="toc-text">3.不定宽高的块级元素</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#3-1-%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-%E8%87%AA%E5%8A%A8margin-fit-content-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AE%BD%E9%AB%98%E5%8D%87%E7%BA%A7%E7%89%88"><span class="toc-number">5.2.3.1.</span> <span class="toc-text">3.1 绝对定位+自动margin + fit-content &#x2F; 格式化宽高升级版</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-2%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D-transform"><span class="toc-number">5.2.3.2.</span> <span class="toc-text">3.2绝对定位+transform</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-3flex%E5%B8%83%E5%B1%80"><span class="toc-number">5.2.3.3.</span> <span class="toc-text">3.3flex布局</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-4-table%E5%B8%83%E5%B1%80"><span class="toc-number">5.2.3.4.</span> <span class="toc-text">3.4 table布局</span></a></li></ol></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80%E7%9A%84%E4%BC%98%E7%82%B9%EF%BC%9F%E7%BC%BA%E7%82%B9%EF%BC%9F%E6%80%8E%E4%B9%88%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%EF%BC%9F"><span class="toc-number">6.</span> <span class="toc-text">浮动布局的优点？缺点？怎么清除浮动？</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#float%E7%9A%84%E7%89%B9%E6%80%A7"><span class="toc-number">6.1.</span> <span class="toc-text">float的特性</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#float%E7%9A%84%E4%BC%98%E7%82%B9"><span class="toc-number">6.2.</span> <span class="toc-text">float的优点</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#float%E7%9A%84%E7%BC%BA%E7%82%B9"><span class="toc-number">6.3.</span> <span class="toc-text">float的缺点</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%BD%B1%E5%93%8D"><span class="toc-number">6.4.</span> <span class="toc-text">清除浮动的影响</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%88%B6%E5%85%83%E7%B4%A0%E8%AE%BE%E7%BD%AE%E9%AB%98%E5%BA%A6%EF%BC%9F"><span class="toc-number">6.4.1.</span> <span class="toc-text">父元素设置高度？</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%88%90%E4%BA%8B%E4%B8%8D%E8%B6%B3%E8%B4%A5%E4%BA%8B%E6%9C%89%E4%BD%99%E7%9A%84clear"><span class="toc-number">6.4.2.</span> <span class="toc-text">成事不足败事有余的clear?</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%88%90%E5%8A%9F%E7%9A%84%E7%AD%94%E6%A1%88%EF%BC%9ABFC%EF%BC%81"><span class="toc-number">6.4.3.</span> <span class="toc-text">成功的答案：BFC！</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#float%E5%AE%9E%E7%8E%B0%E8%87%AA%E9%80%82%E5%BA%94%E5%B8%83%E5%B1%80"><span class="toc-number">6.5.</span> <span class="toc-text">float实现自适应布局</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%B8%A4%E5%88%97%E5%B8%83%E5%B1%80"><span class="toc-number">6.5.1.</span> <span class="toc-text">两列布局</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#float-margin"><span class="toc-number">6.5.1.1.</span> <span class="toc-text">float+margin</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#float-overflow%EF%BC%9A%E5%9F%BA%E4%BA%8EBFC%E7%89%B9%E6%80%A7%E5%B8%83%E5%B1%80"><span class="toc-number">6.5.1.2.</span> <span class="toc-text">float+overflow：基于BFC特性布局</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#flex%E5%B8%83%E5%B1%80"><span class="toc-number">6.5.1.3.</span> <span class="toc-text">flex布局</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E4%B8%89%E5%88%97%E5%B8%83%E5%B1%80"><span class="toc-number">6.5.2.</span> <span class="toc-text">三列布局</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%B7%A6%E4%B8%AD%E5%AE%9A%E5%AE%BD%EF%BC%8C%E5%8F%B3%E8%87%AA%E9%80%82%E5%BA%94"><span class="toc-number">6.5.2.1.</span> <span class="toc-text">左中定宽，右自适应</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#%E5%B7%A6%E5%8F%B3%E5%AE%9A%E5%AE%BD%EF%BC%8C%E4%B8%AD%E8%87%AA%E9%80%82%E5%BA%94%EF%BC%88%E6%89%80%E8%B0%93%E7%9A%84%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%EF%BC%89"><span class="toc-number">6.5.2.2.</span> <span class="toc-text">左右定宽，中自适应（所谓的圣杯布局）</span></a><ol class="toc-child"><li class="toc-item toc-level-5"><a class="toc-link" href="#float-margin-1"><span class="toc-number">6.5.2.2.1.</span> <span class="toc-text">float+margin</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#float-overflow"><span class="toc-number">6.5.2.2.2.</span> <span class="toc-text">float+overflow</span></a></li><li class="toc-item toc-level-5"><a class="toc-link" href="#flex%E5%B8%83%E5%B1%80-1"><span class="toc-number">6.5.2.2.3.</span> <span class="toc-text">flex布局</span></a></li></ol></li></ol></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%93%81%E5%AD%97%E5%B8%83%E5%B1%80%EF%BC%9F"><span class="toc-number">7.</span> <span class="toc-text">如何实现品字布局？</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%AC%AC%E4%B8%80%E7%A7%8D"><span class="toc-number">7.1.</span> <span class="toc-text">第一种</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%AC%AC%E4%BA%8C%E7%A7%8D%EF%BC%88%E5%85%A8%E5%B1%8F%E7%89%88%EF%BC%89"><span class="toc-number">7.2.</span> <span class="toc-text">第二种（全屏版）</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%B8%83%E5%B1%80%E9%A2%98%EF%BC%9Adiv%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%EF%BC%8C%E5%B7%A6%E5%8F%B310px%EF%BC%8C%E9%AB%98%E5%BA%A6%E5%A7%8B%E7%BB%88%E4%B8%BA%E5%AE%BD%E5%BA%A6%E4%B8%80%E5%8D%8A"><span class="toc-number">8.</span> <span class="toc-text">布局题：div垂直居中，左右10px，高度始终为宽度一半</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%80%9D%E8%B7%AF%E4%B8%80%EF%BC%9A%E5%88%A9%E7%94%A8height-0-padding-bottom-50"><span class="toc-number">8.1.</span> <span class="toc-text">思路一：利用height:0; padding-bottom: 50%;</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%80%9D%E8%B7%AF%E4%BA%8C-%E5%88%A9%E7%94%A8calc%E5%92%8Cvw"><span class="toc-number">8.2.</span> <span class="toc-text">思路二: 利用calc和vw</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#Flex%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E5%B8%83%E5%B1%80"><span class="toc-number">9.</span> <span class="toc-text">Flex弹性盒子布局</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%98%AFFlex%E5%B8%83%E5%B1%80"><span class="toc-number">9.1.</span> <span class="toc-text">什么是Flex布局</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5"><span class="toc-number">9.2.</span> <span class="toc-text">基本概念</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AE%B9%E5%99%A8%E7%9A%84%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.</span> <span class="toc-text">容器的属性</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#container%E7%9A%84%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.1.</span> <span class="toc-text">container的属性</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#1-flex-direction%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.1.1.</span> <span class="toc-text">1.flex-direction属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#2-flex-wrap%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.1.2.</span> <span class="toc-text">2.flex-wrap属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-flex-flow"><span class="toc-number">9.3.1.3.</span> <span class="toc-text">3.flex-flow</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#4-justify-content%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.1.4.</span> <span class="toc-text">4.justify-content属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#5-align-items%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.1.5.</span> <span class="toc-text">5.align-items属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#6-align-content%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.1.6.</span> <span class="toc-text">6.align-content属性</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="#item%E7%9A%84%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.2.</span> <span class="toc-text">item的属性</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="#1-order%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.2.1.</span> <span class="toc-text">1.order属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#2-flex-grow%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.2.2.</span> <span class="toc-text">2.flex-grow属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#3-flex-shrink%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.2.3.</span> <span class="toc-text">3.flex-shrink属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#4-flex-basis%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.2.4.</span> <span class="toc-text">4.flex-basis属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#5-flex%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.2.5.</span> <span class="toc-text">5.flex属性</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="#6-align-self%E5%B1%9E%E6%80%A7"><span class="toc-number">9.3.2.6.</span> <span class="toc-text">6.align-self属性</span></a></li></ol></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#Grid%E6%A0%BC%E6%A0%85%E5%B8%83%E5%B1%80"><span class="toc-number">10.</span> <span class="toc-text">Grid格栅布局</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5-1"><span class="toc-number">10.1.</span> <span class="toc-text">基本概念</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%B9%E5%99%A8%E5%92%8C%E9%A1%B9%E7%9B%AE"><span class="toc-number">10.1.1.</span> <span class="toc-text">容器和项目</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E8%A1%8C%E5%92%8C%E5%88%97"><span class="toc-number">10.1.2.</span> <span class="toc-text">行和列</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%8D%95%E5%85%83%E6%A0%BC"><span class="toc-number">10.1.3.</span> <span class="toc-text">单元格</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E7%BD%91%E6%A0%BC%E7%BA%BF"><span class="toc-number">10.1.4.</span> <span class="toc-text">网格线</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#container%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.</span> <span class="toc-text">container属性</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-display-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.1.</span> <span class="toc-text">1.display 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-grid-template-columns-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-template-rows-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.2.</span> <span class="toc-text">2.grid-template-columns 属性， grid-template-rows 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-grid-row-gap-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-column-gap-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-gap-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.3.</span> <span class="toc-text">3.grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-grid-template-areas-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.4.</span> <span class="toc-text">4.grid-template-areas 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-grid-auto-flow-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.5.</span> <span class="toc-text">5.grid-auto-flow 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#6-justify-items-%E5%B1%9E%E6%80%A7%EF%BC%8C-align-items-%E5%B1%9E%E6%80%A7%EF%BC%8C-place-items-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.6.</span> <span class="toc-text">6.justify-items 属性， align-items 属性， place-items 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#7-justify-content-%E5%B1%9E%E6%80%A7%EF%BC%8C-align-content-%E5%B1%9E%E6%80%A7%EF%BC%8C-place-content-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.7.</span> <span class="toc-text">7.justify-content 属性， align-content 属性， place-content 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#8-grid-auto-columns-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-auto-rows-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.8.</span> <span class="toc-text">8.grid-auto-columns 属性， grid-auto-rows 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#9-grid-template-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.2.9.</span> <span class="toc-text">9.grid-template 属性， grid 属性</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#item%E5%B1%9E%E6%80%A7"><span class="toc-number">10.3.</span> <span class="toc-text">item属性</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-grid-column-start-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-column-end-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-row-start-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-row-end-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.3.1.</span> <span class="toc-text">1.grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-grid-column-%E5%B1%9E%E6%80%A7%EF%BC%8C-grid-row-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.3.2.</span> <span class="toc-text">2.grid-column 属性， grid-row 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-grid-area-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.3.3.</span> <span class="toc-text">3.grid-area 属性</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-justify-self-%E5%B1%9E%E6%80%A7%EF%BC%8C-align-self-%E5%B1%9E%E6%80%A7%EF%BC%8C-place-self-%E5%B1%9E%E6%80%A7"><span class="toc-number">10.3.4.</span> <span class="toc-text">4.justify-self 属性， align-self 属性， place-self 属性</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E8%AF%B4%E8%AF%B4%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%AB%AF%E9%80%82%E9%85%8D%EF%BC%9F"><span class="toc-number">11.</span> <span class="toc-text">说说如何实现多端适配？</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%90%AD%E7%A0%96%E5%9D%97%E2%80%94%E2%80%94%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9A%E5%AE%BD%E9%AB%98%E7%9A%84%E6%96%B9%E5%BC%8F%EF%BC%9F%E2%9D%8C"><span class="toc-number">11.1.</span> <span class="toc-text">搭砖块——设置固定宽高的方式？❌</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E7%99%BE%E5%88%86%E6%AF%94%E5%B8%83%E5%B1%80%EF%BC%9F%E2%9D%8C"><span class="toc-number">11.2.</span> <span class="toc-text">百分比布局？❌</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2-%E7%BA%AFvw%E5%B8%83%E5%B1%80%E2%9D%8C"><span class="toc-number">11.3.</span> <span class="toc-text">媒体查询+纯vw布局❌</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2-rem%E5%B8%83%E5%B1%80%EF%BC%9F%E2%9D%8C"><span class="toc-number">11.4.</span> <span class="toc-text">媒体查询+rem布局？❌</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2-viewport-calc-%E5%87%BD%E6%95%B0-rem"><span class="toc-number">11.5.</span> <span class="toc-text">媒体查询+viewport+calc()函数+rem</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E4%BB%A3%E7%A0%81"><span class="toc-number">11.5.1.</span> <span class="toc-text">最佳实践代码</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"><span class="toc-number">12.</span> <span class="toc-text">参考链接</span></a></li></ol>
      </div>
      <div class="related panel pjax" data-title="Related">
        <ul>
          <li><a href="/FrontEnd/CSS/FrontEnd/CSS/CSS%E9%80%89%E6%8B%A9%E5%99%A8" rel="bookmark" title="CSS选择器">CSS选择器</a></li><li class="active"><a href="/FrontEnd/CSS/FrontEnd/CSS/CSS%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93" rel="bookmark" title="CSS布局总结">CSS布局总结</a></li><li><a href="/FrontEnd/CSS/FrontEnd/CSS/CSS3%E5%8A%A8%E7%94%BB%E5%85%A5%E9%97%A8" rel="bookmark" title="CSS3动画入门">CSS3动画入门</a></li>
        </ul>
      </div>
      <div class="overview panel" data-title="Overview">
        <div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="image" itemprop="image" alt="Monkey-HH"
      data-src="/images/avatar.jpg">
  <p class="name" itemprop="name">Monkey-HH</p>
  <div class="description" itemprop="description">Learn, share, make progress</div>
</div>

<nav class="state">
    <div class="item posts">
      <a href="/archives/">
        <span class="count">39</span>
        <span class="name">posts</span>
      </a>
    </div>
    <div class="item categories">
      <a href="/categories/">
        <span class="count">16</span>
        <span class="name">categories</span>
      </a>
    </div>
    <div class="item tags">
      <a href="/tags/">
        <span class="count">20</span>
        <span class="name">tags</span>
      </a>
    </div>
</nav>

<div class="social">
      <span class="exturl item github" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmtleS1ISA==" title="https:&#x2F;&#x2F;github.com&#x2F;monkey-HH"><i class="ic i-github"></i></span>
      <span class="exturl item email" data-url="bWFpbHRvOmhoanNjYXVAMTYzLmNvbQ==" title="mailto:hhjscau@163.com"><i class="ic i-envelope"></i></span>
</div>

<ul class="menu">
  
    
  <li class="item">
    <a href="/" rel="section"><i class="ic i-home"></i>Home</a>
  </li>

        
  <li class="item dropdown">
      <a href="javascript:void(0);"><i class="ic i-feather"></i>Posts</a>
    <ul class="submenu">

        
  <li class="item">
    <a href="/categories/" rel="section"><i class="ic i-th"></i>Categories</a>
  </li>

        
  <li class="item">
    <a href="/tags/" rel="section"><i class="ic i-tags"></i>Tags</a>
  </li>

  </ul>
    
  <li class="item">
    <a href="/friends/" rel="section"><i class="ic i-heart"></i>Friends</a>
  </li>

    
  <li class="item">
    <a href="/about/" rel="section"><i class="ic i-user"></i>About</a>
  </li>

    
  <li class="item">
    <a href="/links/" rel="section"><i class="ic i-magic"></i>Links</a>
  </li>


</ul>

      </div>
    </div>
  </div>

  <ul id="quick">
    <li class="prev pjax">
        <a href="/FrontEnd/CSS/FrontEnd/CSS/CSS%E9%80%89%E6%8B%A9%E5%99%A8" rel="prev" title="Previous Post"><i class="ic i-chevron-left"></i></a>
    </li>
    <li class="up"><i class="ic i-arrow-up"></i></li>
    <li class="down"><i class="ic i-arrow-down"></i></li>
    <li class="next pjax">
        <a href="/FrontEnd/CSS/FrontEnd/CSS/CSS3%E5%8A%A8%E7%94%BB%E5%85%A5%E9%97%A8" rel="next" title="Next Post"><i class="ic i-chevron-right"></i></a>
    </li>
    <li class="percent"></li>
  </ul>
</div>


        </div>
        <div class="dimmer"></div>
      </div>
    </main>
    <footer id="footer">
      <div class="inner">
        <div class="widgets">
          
<div class="rpost pjax">
  <h2>Random Posts</h2>
  <ul>
      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91Promise%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAPromise" title="【手撕JavaScript系列】Promise介绍以及实现一个Promise">【手撕JavaScript系列】Promise介绍以及实现一个Promise</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91this%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81bind%E3%80%81apply" title="【手撕JavaScript系列】this原理以及模拟实现call、bind、apply">【手撕JavaScript系列】this原理以及模拟实现call、bind、apply</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83%E6%96%B9%E6%A1%88%EF%BC%9ACookie%E3%80%81Session%E3%80%81Token%E3%80%81JWT%E3%80%81%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" title="接口鉴权方案：Cookie、Session、Token、JWT、单点登录">接口鉴权方案：Cookie、Session、Token、JWT、单点登录</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%BA%8B%E4%BB%B6" title="JavaScript事件">JavaScript事件</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E7%BB%A7%E6%89%BF%E6%96%B9%E6%A1%88" title="JavaScript常用继承方案">JavaScript常用继承方案</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF" title="JavaScript事件循环">JavaScript事件循环</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/axios%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%A5%E9%97%A8" title="axios基础知识点入门">axios基础知识点入门</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/ComputerBasics/" title="In ComputerBasics">ComputerBasics</a>
<i class="ic i-angle-right"></i>
<a href="/categories/ComputerBasics/Computer-Networking/" title="In Computer_Networking">Computer_Networking</a>
</div>

    <span><a href="/ComputerBasics/Computer-Networking/ComputerBasics/Computer_Networking/TCP%E5%92%8CUDP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" title="TCP和UDP基础知识点">TCP和UDP基础知识点</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E5%8E%9F%E5%BD%A2%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE" title="JavaScript原型与原型链">JavaScript原型与原型链</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/CI-CD/" title="In CI&CD">CI&CD</a>
</div>

    <span><a href="/CI-CD/CI&CD/%E3%80%90Nginx%E3%80%91Nginx%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8" title="【Nginx】Nginx基础入门">【Nginx】Nginx基础入门</a></span>
  </li>

  </ul>
</div>
<div>
  <h2>Recent Comments</h2>
  <ul class="leancloud-recent-comment"></ul>
</div>

        </div>
        <div class="status">
  <div class="copyright">
    
    &copy; 2021 – 
    <span itemprop="copyrightYear">2022</span>
    <span class="with-love">
      <i class="ic i-sakura rotate"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">Monkey-HH @ Monkey's Blog</span>
  </div>
  <div class="count">
    <span class="post-meta-item-icon">
      <i class="ic i-chart-area"></i>
    </span>
    <span title="Symbols count total">540k words</span>

    <span class="post-meta-divider">|</span>
    <span class="post-meta-item-icon">
      <i class="ic i-coffee"></i>
    </span>
    <span title="Reading time total">8:11</span>
  </div>
  <div class="powered-by">
    Powered by <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span>
  </div>
</div>

      </div>
    </footer>
  </div>
<script data-config type="text/javascript">
  var LOCAL = {
    path: 'FrontEnd/CSS/FrontEnd/CSS/CSS布局总结',
    favicon: {
      show: "（●´3｀●）Goooood",
      hide: "(´Д｀)Booooom"
    },
    search : {
      placeholder: "Search for Posts",
      empty: "We didn't find any results for the search: ${query}",
      stats: "${hits} results found in ${time} ms"
    },
    valine: true,fancybox: true,copyright: 'Copied to clipboard successfully! <br> All articles in this blog are licensed under <i class="ic i-creative-commons"></i>BY-NC-SA.',
    ignores : [
      function(uri) {
        return uri.includes('#');
      },
      function(uri) {
        return new RegExp(LOCAL.path+"$").test(uri);
      }
    ]
  };
</script>

<script src="https://cdn.polyfill.io/v2/polyfill.js"></script>

<script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script>

<script src="/js/app.js?v=0.2.5"></script>




</body>
</html>
