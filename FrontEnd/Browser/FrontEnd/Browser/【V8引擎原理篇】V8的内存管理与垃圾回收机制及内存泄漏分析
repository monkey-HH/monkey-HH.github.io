



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#FFF">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">

<link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico">
  <meta http-equiv="Cache-Control" content="no-transform">
  <meta http-equiv="Cache-Control" content="no-siteapp">


<link rel="alternate" type="application/rss+xml" title="" href="https://monkeyhh.top/rss.xml" />
<link rel="alternate" type="application/atom+xml" title="" href="https://monkeyhh.top/atom.xml" />
<link rel="alternate" type="application/json" title="" href="https://monkeyhh.top/feed.json" />

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">

<link rel="stylesheet" href="/css/app.css?v=0.2.5">

  
  <meta name="keywords" content="Browser,Javascript" />


<link rel="canonical" href="https://monkeyhh.top/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90">



  <title>
【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析 - Browser - FrontEnd |
Monkey's Blog = </title>
<meta name="generator" content="Hexo 5.4.0"></head>
<body itemscope itemtype="http://schema.org/WebPage">
  <div id="loading">
    <div class="cat">
      <div class="body"></div>
      <div class="head">
        <div class="face"></div>
      </div>
      <div class="foot">
        <div class="tummy-end"></div>
        <div class="bottom"></div>
        <div class="legs left"></div>
        <div class="legs right"></div>
      </div>
      <div class="paw">
        <div class="hands left"></div>
        <div class="hands right"></div>
      </div>
    </div>
  </div>
  <div id="container">
    <header id="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="inner">
        <div id="brand">
          <div class="pjax">
          
  <h1 itemprop="name headline">【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析
  </h1>
  
<div class="meta">
  <span class="item" title="Created: 2022-01-02 12:00:00">
    <span class="icon">
      <i class="ic i-calendar"></i>
    </span>
    <span class="text">Posted on</span>
    <time itemprop="dateCreated datePublished" datetime="2022-01-02T12:00:00+08:00">2022-01-02</time>
  </span>
  <span class="item" title="Symbols count in article">
    <span class="icon">
      <i class="ic i-pen"></i>
    </span>
    <span class="text">Symbols count in article</span>
    <span>8.8k</span>
    <span class="text">words</span>
  </span>
  <span class="item" title="Reading time">
    <span class="icon">
      <i class="ic i-clock"></i>
    </span>
    <span class="text">Reading time</span>
    <span>8 mins.</span>
  </span>
</div>


          </div>
        </div>
        <nav id="nav">
  <div class="inner">
    <div class="toggle">
      <div class="lines" aria-label="Toggle navigation bar">
        <span class="line"></span>
        <span class="line"></span>
        <span class="line"></span>
      </div>
    </div>
    <ul class="menu">
      <li class="item title"><a href="/" rel="start">Monkey's Blog</a></li>
    </ul>
    <ul class="right">
      <li class="item theme">
        <i class="ic i-sun"></i>
      </li>
      <li class="item search">
        <i class="ic i-search"></i>
      </li>
    </ul>
  </div>
</nav>

      </div>
      <div id="imgs" class="pjax">
          <img src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202080034272.png">
      </div>
    </header>
    <div id="waves">
      <svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
        <defs>
          <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z" />
        </defs>
        <g class="parallax">
          <use xlink:href="#gentle-wave" x="48" y="0" />
          <use xlink:href="#gentle-wave" x="48" y="3" />
          <use xlink:href="#gentle-wave" x="48" y="5" />
          <use xlink:href="#gentle-wave" x="48" y="7" />
        </g>
      </svg>
    </div>
    <main>
      <div class="inner">
        <div id="main" class="pjax">
          
  <div class="article wrap">
    
<div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList">
<i class="ic i-home"></i>
<span><a href="/">Home</a></span><i class="ic i-angle-right"></i>
<span  itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/FrontEnd/" itemprop="item" rel="index" title="In FrontEnd"><span itemprop="name">FrontEnd</span></a>
<meta itemprop="position" content="1" /></span>
<i class="ic i-angle-right"></i>
<span  class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/FrontEnd/Browser/" itemprop="item" rel="index" title="In Browser"><span itemprop="name">Browser</span></a>
<meta itemprop="position" content="2" /></span>
</div>

    <article itemscope itemtype="http://schema.org/Article" class="post block" lang="en">
  <link itemprop="mainEntityOfPage" href="https://monkeyhh.top/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90">

  <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
    <meta itemprop="image" content="/images/avatar.jpg">
    <meta itemprop="name" content="Monkey-HH">
    <meta itemprop="description" content=", Learn, share, make progress">
  </span>

  <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
    <meta itemprop="name" content="">
  </span>

  <div class="body md" itemprop="articleBody">
    

    <h1 id="内存管理基础"><a href="#内存管理基础" class="headerlink" title="内存管理基础"></a>内存管理基础</h1><h2 id="变量存储：堆空间和栈空间"><a href="#变量存储：堆空间和栈空间" class="headerlink" title="变量存储：堆空间和栈空间"></a>变量存储：堆空间和栈空间</h2><p>首先我们来看一个例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&quot;foo&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 场景①</span></span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 场景②</span></span><br><span class="line"><span class="keyword">var</span> bar = foo</span><br><span class="line">foo.name = <span class="string">&quot;baz&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(bar.name) <span class="comment">//baz</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，变量b和变量bar都是对原有的变量进行了复制，并且对原变量（a、foo）都进行了重新赋值，但两者的输出结果却不同，前者打印出了旧值，后者则打印出了新值，为什么会有这样子的区别呢？</p>
<p>我们都知道，在JavaScript中，变量可以分为原始类型和引用类型，那么他们在内存中是如何实现存储的呢？</p>
<p>内存被划分为代码空间、堆空间和栈空间。</p>
<p>我们在栈空间中存放的就是一个key-value对，key就是变量名，而对于原始类型的变量和引用类型的变量，他们的不同则在于value部分。</p>
<ul>
<li>原始类型：其value部分为一个具体的数值。</li>
<li>引用类型：其value部分为一个“内存地址”，而这个内存地址，则是指向“堆空间的地址”，即数据实际是存储在堆空间中。</li>
</ul>
<p>我们也可以通过开发者工具查看目前堆内存的状态，打开浏览器的开发者工具后，选择“Memory”面板，点击”take snapshot” 获取V8的堆内存快照。接着 “ctrl+f”(win),搜索“foo”。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202071358677.png" alt="image-20220207135839643" style="zoom:67%;" />

<p><span class="exturl" data-url="aHR0cHM6Ly9zcGVha2VyZGVjay5jb20vZGVlcHUxMDUvdjgtbWVtb3J5LXVzYWdlLXN0YWNrLWFuZC1oZWFw">点击这里</span>可以查看一个栈内存和堆内存的使用实例。</p>
<blockquote>
<p>堆内存和栈内存的特点如下：</p>
</blockquote>
<p><strong>栈内存：</strong>这是存储静态数据的地方，包括方法/函数框架、原始值和指向对象的指针。该空间由操作系统 (OS) 管理。</p>
<ul>
<li>数据存取的速度非常快，因为只需要关心入栈、出栈以及从栈顶读取数据，没有查询的过程</li>
<li>存储的数据大小是固定的（静态数据）</li>
<li>内存管理的方式简单且直接，并且由操作系统进行内存空间的管理，开发者无需关心</li>
<li>栈的size是有限的，因此要注意栈溢出的问题</li>
<li>多线程的应用中，每个线程可以拥有独立的栈内存</li>
<li>一般来说，栈内存的空间小于堆内存</li>
</ul>
<p><strong>堆内存：</strong>这是 V8 存储对象或动态数据的地方。这是最大的内存块，也是<strong>垃圾收集（GC）</strong>发生的地方。</p>
<ul>
<li>存取速度慢于栈内存</li>
<li>存储的数据大小可以改变（动态数据）</li>
<li>内存管理的难度更大，也是各种自动化内存管理工具所介入的区域</li>
<li>可能会出现内存溢出的问题</li>
<li>多线程的应用中，线程之间是共享堆内存的</li>
</ul>
<h2 id="不同的内存管理方式"><a href="#不同的内存管理方式" class="headerlink" title="不同的内存管理方式"></a>不同的内存管理方式</h2><p>大部分现代的编程语言并不想将内存管理的负担再交给开发者，因此大都配套了自动管理内存的方法（不一定是编程语言提供），当然有的编程语言仍然可以手动进行内存管理，甚至有些还提供了多种内存管理的方法，这些方法大致包括：</p>
<ul>
<li>手动管理：由开发者手动分配和释放对象的内存空间，比如C和C++</li>
<li>Garbage Collection（垃圾回收）：通过释放无用的内存空间来进行内存管理，这是现代编程语言采用最多的一种内存管理方式，包括Java，Kotlin，JavaScript，C#，Golang等语言都是默认采用GC进行内存管理，一般可基于引用计数(Reference counting)和标记清除(Mark Sweep)两种基本思路</li>
<li>Resource Acquisition is Initialization（RAII）：保证在任何情况下，使用对象时先构造对象，最后析构对象。在C++引入，Ada和Rust也会使用</li>
<li>Automatic Reference Counting（ARC）：和引用计数GC有些类似，但在代码中自动加入了retain/release，原先需要手动添加的用来处理内存管理的引用计数的代码可以自动地由编译器完成了，一般在Objective C或Swift开发中使用</li>
<li>Ownership：是Rust的一个特性，类似一个编译期的引用计数</li>
</ul>
<h2 id="常见的垃圾回收算法"><a href="#常见的垃圾回收算法" class="headerlink" title="常见的垃圾回收算法"></a>常见的垃圾回收算法</h2><ul>
<li><p>主流的垃圾回收算法是标记清理，即先给当前不使用的值加上标记，再回来回收它们的内存。</p>
</li>
<li><p>引用计数是另一种垃圾回收策略，需要记录值被引用了多少次。JavaScript 引擎不再使用这种算 法，但某些旧版本的 IE 仍然会受这种算法的影响，原因是 JavaScript 会访问非原生 JavaScript 对 象（如 DOM 元素）。</p>
</li>
</ul>
<h1 id="V8内存结构"><a href="#V8内存结构" class="headerlink" title="V8内存结构"></a>V8内存结构</h1><p>首先我们来看看V8引擎的内存结构是怎样的。正在运行的程序总是由 V8 进程中分配的一些内存表示，这称为<strong>Resident Set</strong>。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202071720939.png" alt="image-20220207172001634" style="zoom:80%;" />

<ul>
<li>Stack：栈空间，第一节已经介绍过。 </li>
<li>Heap memory：堆空间。</li>
<li><strong>New Space（Young generation）：</strong>新生代空间，用来临时存储新对象，空间被等分为两份，整体较小，采用 Scavenge（Minor GC） 算法进行垃圾回收。<ul>
<li>Semi space：新生代空间被一分为二，称为版空间，后面会详细介绍。</li>
</ul>
</li>
<li><strong>Old Space（Old generation）：</strong>老生代空间，用来存储经过两次 Minor GC 依然存活的对象，采用 标记清除 &amp; 整理（Mark-Sweep &amp; Mark-Compact，Major GC） 算法进行垃圾回收。<ul>
<li>Old pointer space：旧指针空间，包含具有指向其他对象的指针的幸存对象。</li>
<li>Old data space：旧数据空间，包含仅包含数据的对象（没有指向其他对象的指针）。字符串、装箱数字和未装箱双精度数组在“新空间”中存活两个次要 GC 周期后被移动到此处。</li>
</ul>
</li>
<li><strong>Large object space：</strong>这是大于其他空间大小限制的对象所在的位置。垃圾收集器永远不会移动大对象。</li>
<li>Code-space：这是Just In Time (JIT)编译器<strong>存储已编译代码块</strong>的地方，是唯一的可执行内存（不过过大的代码段也有可能存放在大对象空间）。</li>
<li>Cell space, property cell space, and map space：这些空间分别包含<code>Cells</code>、<code>PropertyCells</code>和<code>Maps</code>。这些空间中的每一个都包含大小相同的对象，并且对它们指向的对象类型有一些限制，这简化了收集。</li>
</ul>
<h1 id="V8的垃圾回收器概述"><a href="#V8的垃圾回收器概述" class="headerlink" title="V8的垃圾回收器概述"></a>V8的垃圾回收器概述</h1><p>V8是一个高性能的开源JavaScript和WebAssembly引擎，看一下V8官方的两段介绍：</p>
<blockquote>
<ul>
<li>V8 compiles and executes JavaScript source code, handles memory allocation for objects, and garbage collects objects it no longer needs.</li>
<li>V8’s stop-the-world, generational, accurate garbage collector is one of the keys to V8’s performance.</li>
</ul>
</blockquote>
<p>翻译过来就是：</p>
<ul>
<li>V8编译并执行JavaScript代码，能给JS对象进行内存分配，随后回收过期的垃圾。</li>
<li>V8的垃圾回收器是V8高性能表现的关键之一，这个垃圾回收器（garbage collector）的特点是<strong>暂停所有当前运行的线程，并执行垃圾回收线程</strong>（Stop The World 所以叫STW）、分代、准确。</li>
</ul>
<h3 id="全停顿（stop-the-wrold）"><a href="#全停顿（stop-the-wrold）" class="headerlink" title="全停顿（stop-the-wrold）"></a>全停顿（stop-the-wrold）</h3><p>V8 之中，对内存的使用有限制（64 位下约 1.4G、32 位下约 0.7G），为什么只分配这么小呢？主要的原因如下：</p>
<ul>
<li>JavaScript是单线程的，如果内存空间过大，会导致GC（garbage collect，垃圾回收）占用线程过长，使得JavaScript代码长时间没有响应。</li>
</ul>
<p>stop-the-world的意思为：大部分 V8 垃圾收集工作都是在主渲染线程上执行的，会暂停主线程的执行，导致JavaScript的执行暂停，参见下图，当需要维护太多对象时，通常会导致卡顿。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202071644819.png" alt="image-20220207164433981"></p>
<p>当然了，事实上我们也可以调整堆内存的限制，例如在Node.js中通过下列命令来调整：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 这是调整老生代这部分的内存，单位是MB。后面会详细介绍新生代和老生代内存</span><br><span class="line">node --max-old-space-size=2048 xxx.js </span><br><span class="line">// 这是调整新生代这部分的内存，单位是 KB。</span><br><span class="line">node --max-new-space-size=2048 xxx.js</span><br></pre></td></tr></table></figure>



<h3 id="分代（generational）"><a href="#分代（generational）" class="headerlink" title="分代（generational）"></a>分代（generational）</h3><p>有一个专业名词为：代际假说（the generational hypothesis），V8的GC是建立在代际假说的基础上的，主要有两点理论：</p>
<ul>
<li>大部分对象在内存中存在的时间很短（die young），即一经分配完内存，很快就变成不可访问了。</li>
<li>而一旦存活下来的对象就很有可能会长期存在。</li>
</ul>
<p>这两个特点不仅仅适用于 JavaScript，同样适用于大多数的动态语言，如 Java、Python 等。</p>
<blockquote>
<p>V8的垃圾回收策略主要基于分代式垃圾回收机制。在自动垃圾回收的演变过程中，人们发现没有一种垃圾回收算法能够胜任所有的场景。因为在实际的应用中，对象的生存周期长短不一，不同的算法只能针对特定情况具有最好的效果。为此，统计学在垃圾回收算法的发展中产生了较大的作用，现代的垃圾回收算法中按对象的存活时间将内存的垃圾回收进行不同的分代，然后分别对不同分代的内存施以更高效的算法。</p>
<p>——《深入浅出Nodejs》</p>
</blockquote>
<p>在 V8 中会把<strong>堆分为新生代和老生代</strong>两个区域：</p>
<ul>
<li>新生代内存空间：存放的是<strong>生存时间短</strong>的对象，空间较小，这个空间是由<strong>“Scavenger(Minor GC)”</strong>管理的。</li>
<li>老生代内存空间：存放的<strong>生存时间久</strong>的对象，空间较大，这个空间由<strong>“Major GC(Mark-Sweep &amp; Mark-Compact) ”</strong>管理。</li>
</ul>
<p>值得注意的是对于这两个内存空间，分别使用两个GC进行管理，具体的概念后面再介绍。</p>
<ul>
<li>Minor GC：Minor Garbage Collector，<strong>副</strong>垃圾回收器。</li>
<li>Major GC：Major  Garbage Collector，<strong>主</strong>垃圾回收器。</li>
</ul>
<h3 id="准确（accurate）"><a href="#准确（accurate）" class="headerlink" title="准确（accurate）"></a>准确（accurate）</h3><p>V8 预留所有的字的最后一位用于标记（tag）这个字中的内容的类型，1 表示指针，0 表示整数。</p>
<p>因此V8可以通过查看最后一位，快速分辨出指针和整数，在GC阶段，V8 能够跳过所有的整数，更快地沿着指针扫描堆中的对象，因此我们称之为准确的。</p>
<h1 id="副垃圾回收器：Minor-GC-Scavenger算法"><a href="#副垃圾回收器：Minor-GC-Scavenger算法" class="headerlink" title="副垃圾回收器：Minor GC (Scavenger算法)"></a>副垃圾回收器：Minor GC (Scavenger算法)</h1><p>上面提到了，我们将新生代内存空间一分为二，我们将这两个半空间分别称为“From-space”和“to-space”，一个处于使用中（From），一个处于闲置（To）中。</p>
<p>我们假设有这么一个场景：</p>
<ol>
<li>让我们假设当我们开始时“从空间”上已经有对象（块 01 到 06 标记为已用内存）</li>
<li>该过程创建一个新对象(07)</li>
<li>V8 尝试从空间中获取所需的内存，但那里没有可用空间来容纳我们的对象，因此此时会触发Minor GC。</li>
</ol>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202071746874.png" alt="image-20220207174638754"></p>
<p>此时，Minor GC就会检查From空间里的对象，如果是<strong>存活对象则复制到To内存</strong>中(在<u>To内存中按照顺序从头放置的</u>)，如果是非存活对象旧直接回收内存空间。（我们假设只有 1 3 5是存活的对象）</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202071750671.gif" alt="1"></p>
<p>我们可以注意到，Minor GC主要有三个步骤：</p>
<ol>
<li><strong>标记</strong>：把存活对象的内存空间标记</li>
<li><strong>复制</strong>：把存活对象从From-space移动到To-space。</li>
<li><strong>身份互换</strong>：From-space和To-space身份互换。</li>
</ol>
<blockquote>
<p>这下子我们会有个疑问。那干脆直接回收非存活对象占用的空间不就完了？后续的操作有用什么用处？</p>
</blockquote>
<p>答案就是：<strong>整理内存碎片~</strong></p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202071758959.png" alt="image-20220207175854682"></p>
<p>深色的小方块代表存活对象，白色部分表示待分配的内存，由于堆内存是连续分配的，这样零零散散的空间可能会导致稍微大一点的对象没有办法进行空间分配，这种零散的空间也叫做<strong>内存碎片</strong>。刚刚介绍的新生代垃圾回收算法也叫<strong>Scavenge算法</strong>。</p>
<p>Scavenge 算法主要就是解决内存碎片的问题，在进行一顿复制之后，To空间变成了这个样子：</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202071759026.png" alt="image-20220207175913638"></p>
<p>这样子，就方便后续分配连续内存了。</p>
<p><strong>Scavenge算法</strong>中，虽然导致新生代空间只剩一半，浪费了空间，但这有利于提高时间性能。</p>
<blockquote>
<p>那么对象是如何从新生代转为老生代的呢？</p>
</blockquote>
<p>我们来看一下V8官网是怎么说的：V8的堆被分成了不同的区域，我们用“生代”来称呼这些区域。主要分为新生代和老生代。而新生代又进一步划分成nursery和intermediate两个区域，对象初始时会被分配到nursery区域，经过一次gc后，如果对象依然存活，则会被复制到intermediate区域。再经过一次gc如果依然存活，则会被移动到老生代。</p>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202072116677.png" alt="generational-gc"></p>
<p>当一个对象经过新生代垃圾回收中多次复制仍然存活时，它就会被认为是生命周期较长的对象，随后会被移动到老生代内存空间中（也就是<code>晋升</code>）。 </p>
<p>在上面新生代垃圾回收过程中，并不是每一次都会把对象复制到闲置空间（To）中，而是在复制之前，会先判断两个条件，如果满足条件，则会触发对象晋升，而不是复制到闲置空间中。 </p>
<p>这两个条件分别是： </p>
<ul>
<li>已经经历过一次 Scavenge 回收。</li>
<li>To 空间的内存占用比超过限制，一般是25%。</li>
</ul>
<p>两个条件达成其一即可。 </p>
<h1 id="主垃圾回收器：Major-GC（Mark-Sweep-Compact算法）"><a href="#主垃圾回收器：Major-GC（Mark-Sweep-Compact算法）" class="headerlink" title="主垃圾回收器：Major GC（Mark-Sweep-Compact算法）"></a>主垃圾回收器：Major GC（Mark-Sweep-Compact算法）</h1><p>老生代区内存空间比较大，因此不再适合使用 Scavenge 算法进行垃圾回收：</p>
<ul>
<li>复制内存对象将耗费大量时间，垃圾回收执行效率不高</li>
<li>浪费的内存空间较大</li>
</ul>
<p>因此，Scavenge算法非常适合小数据，对于大型堆来说不适合。V8 中老生代的垃圾回收主要采用了 <strong>Mark-Sweep-Compact (标记 - 清除 - 整理)</strong> 的方式。</p>
<blockquote>
<p>V8官网称之为“Full Mark-Compact”，有的博文称之为“Mark-Sweep 及 Mark-Compact”的结合。</p>
</blockquote>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202072159336.png" alt="image-20220207215904103"></p>
<ul>
<li><strong>标记（Mark）：</strong>遍历堆中的所有对象，并标记活着的对象。</li>
<li><strong>清除（Sweep）：</strong>取回死亡对象所占的内存，将其加入到空闲列表（free-list）中。</li>
<li><strong>整理（Compact）：</strong>让存活对象往内存的一端移动，清理掉内存碎片。</li>
</ul>
<p>其过程就像是这样子的：</p>
<img data-src="C:/Users/monkey/Desktop/rcjSZ0T.gif" alt="rcjSZ0T" style="zoom: 67%;" />



<p>垃圾收集器遍历堆的对象的内存地址，把<code>死亡对象（dead Object）</code>加入到<code>空闲列表（free-list）</code>，</p>
<h1 id="V8-GC的优化方案"><a href="#V8-GC的优化方案" class="headerlink" title="V8 GC的优化方案"></a>V8 GC的优化方案</h1><p>在过去几年中，V8 垃圾收集器 (GC) 发生了很大变化。Orinoco 项目采用了一个顺序的、stop-the-world 的垃圾收集器，并将其转变为一个大部分并行和并发的收集器，并带有增量回退。</p>
<p>Orinoco 是 GC 项目的代号，它利用最新最好的并行、增量和并发技术进行垃圾收集，以释放主线程。</p>
<img data-src="C:/Users/monkey/AppData/Roaming/Typora/typora-user-images/image-20220208003423327.png" alt="image-20220208003423327" style="zoom:25%;" />



<h2 id="并行技术（Parallel）"><a href="#并行技术（Parallel）" class="headerlink" title="并行技术（Parallel）"></a>并行技术（Parallel）</h2><p>并行是主线程和辅助线程同时执行大致相等数量的工作。这仍然是一种“停止世界”的方法，但总暂停时间现在除以参与的线程数（加上一些同步开销）。</p>
<img data-src="C:/Users/monkey/AppData/Roaming/Typora/typora-user-images/image-20220208005715449.png" alt="image-20220208005715449" style="zoom: 33%;" />



<h2 id="增量标记-Incremental-marking"><a href="#增量标记-Incremental-marking" class="headerlink" title="增量标记(Incremental marking)"></a>增量标记(Incremental marking)</h2><p>由于JS的单线程机制，V8 在进行垃圾回收的时候，不可避免地会阻塞业务逻辑的执行，倘若老生代的垃圾回收任务很重，那么耗时会非常可怕，严重影响应用的性能。那这个时候为了避免这样问题，V8 采取了增量标记的方案，即<strong>将一口气完成的标记任务分为很多小的部分完成</strong>，每做完一个小的部分就”歇”一下，就js应用逻辑执行一会儿，然后再执行下面的部分，如果循环，直到标记阶段完成才进入内存碎片的整理上面来。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202080034956.png" alt="image-20220208003445571" style="zoom: 33%;" />



<h2 id="并发技术（Concurrent）"><a href="#并发技术（Concurrent）" class="headerlink" title="并发技术（Concurrent）"></a>并发技术（Concurrent）</h2><p>并发是指主线程不断执行 JavaScript，而辅助线程完全在后台进行 GC 工作。这是三种技术中最难的：JavaScript 堆上的任何东西都可以随时更改，使我们之前所做的工作无效。最重要的是，现在需要担心读/写竞争，因为辅助线程和主线程同时读取或修改相同的对象。这里的优点是主线程完全可以自由地执行 JavaScript——尽管由于与辅助线程的一些同步而存在少量开销。</p>
<img data-src="C:/Users/monkey/AppData/Roaming/Typora/typora-user-images/image-20220208010025892.png" alt="image-20220208010025892" style="zoom: 33%;" />

<h2 id="惰性清除（Lazy-Sweeping）"><a href="#惰性清除（Lazy-Sweeping）" class="headerlink" title="惰性清除（Lazy Sweeping）"></a>惰性清除（Lazy Sweeping）</h2><p>延迟死亡内存空间的清理，直到需要内存的时候再清理。</p>
<h1 id="优化后的V8-GC现状"><a href="#优化后的V8-GC现状" class="headerlink" title="优化后的V8 GC现状"></a>优化后的V8 GC现状</h1><h2 id="Minor-GC"><a href="#Minor-GC" class="headerlink" title="Minor GC"></a>Minor GC</h2><p>在V8新生代垃圾回收中，利用并行技术（Parallel），在复制阶段，即把活对象（live objects）从From-space转移（evacuate）到To-space这一个任务，分配给多个辅助线程（Helper Thread）。</p>
<p>为了避免同一个活对象被多次复制，每个线程在完成一个活动对象的复制过后，要去维护更新“转发指针”，以便其他线程找到该活动对象后可以判断该对象是否已经被复制。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202080114267.png" alt="image-20220208011452529" style="zoom:33%;" />

<h2 id="Major-GC"><a href="#Major-GC" class="headerlink" title="Major GC"></a>Major GC</h2><p>在V8老生代垃圾回收中，主要包括了两项优化技术：</p>
<ul>
<li><p><strong>并发标记（concurrent marking）</strong>：在V8老生代垃圾回收中，当堆的内存大小超过某个动态计算的极限过后，并发标记任务将被开启，多个辅助线程将被分配标记任务，它们各自拿到一些指针，并顺着这些指针去标记活动对象，此时并不会影响主线程上的JavaScript代码的执行。写屏障（write barrier）技术会追踪此期间主线上的JS代码创建的新对象引用。</p>
</li>
<li><p><strong>并行清除和并发整理</strong>：当并发标记完成或到达动态分配极限时，主线程将执行快速标记（）步骤。主线程再次扫描一次根集（root set）以确保所有活动对象都完成了标记。然后和部分的辅助线程一起开始并行整理（parallel compaction）及指针更新（pointer updating）。另外的辅助线程则会进行死亡对象的内存清除工作。</p>
</li>
</ul>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202080125807.png" alt="image-20220208012548908" style="zoom:33%;" />

<h1 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h1><h2 id="什么是内存泄漏？"><a href="#什么是内存泄漏？" class="headerlink" title="什么是内存泄漏？"></a>什么是内存泄漏？</h2><p>当<strong>堆内存</strong>上的一块被动态分配的内存空间不再被JS应用程序使用，但GC却无法对其进行回收以释放内存空间，积累得多了，则会导致无效内存空间增多，无法给应用程序分配内存空间，这便是内存泄漏。</p>
<blockquote>
<p>如何查看是否出现了内存泄漏的情况？</p>
</blockquote>
<p>浏览器里可以通过Performance面板查看，步骤:</p>
<ul>
<li>打开开发者工具 的Performance面板</li>
<li>勾选 Screenshots 和 memory</li>
<li>左上角小圆点开始录制(record)</li>
<li>停止录制</li>
</ul>
<p>随后查看内存区别，如果内存使用率随时间不断上涨，且没有持平、下降的趋势，则大概率出现了内存泄漏的情况。</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202202080219789.png" alt="image-20220208021915624" style="zoom:67%;" />

<p>注：上图只是演示该面板</p>
<h2 id="内存泄漏的几种情况"><a href="#内存泄漏的几种情况" class="headerlink" title="内存泄漏的几种情况"></a>内存泄漏的几种情况</h2><p>V8 中的垃圾收集等自动内存管理旨在避免此类内存泄漏，例如，循环引用不再是问题，但仍可能由于堆中不需要的引用而发生，并且可能由不同的原因引起。下面描述了一些最常见的原因：</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>例如以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    abc = <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.abc = <span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>情况一中，由于abc声明的时候没有使用var let等声明符，会导致abc被声明为全局变量，即window.abc = “1”，直到页面关闭之前该资源都不会释放。</p>
<p>情况二中也是类似，在非严格模式下，函数调用时应用了 this 的默认绑定，因此 this 指向全局对象，导致abc泄漏。</p>
<blockquote>
<p>解决方案是什么？</p>
</blockquote>
<ul>
<li>在 JavaScript 文件头部加上 ‘use strict’，可以避免此类错误发生。启用严格模式解析 JavaScript ，避免意外的全局变量。</li>
<li>使用TypeScript</li>
<li>尽可能避免使用全局作用域来存储变量，尤其是在全局范围内存储大对象。</li>
</ul>
<h3 id="闭包、回调函数、定时器、事件监听"><a href="#闭包、回调函数、定时器、事件监听" class="headerlink" title="闭包、回调函数、定时器、事件监听"></a>闭包、回调函数、定时器、事件监听</h3><p>看以下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//此时由于函数提升，bar函数已经声明了，闭包就产生了。</span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log( a );</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz(); <span class="comment">// 2 —— 朋友，这就是闭包的效果。</span></span><br></pre></td></tr></table></figure>

<p>由于内部函数bar使用到了自己的词法作用域外的变量（a），baz持有了对bar函数的引用，此时产生了闭包，内层函数的变量对外层函数内的变量存在引用，闭包未得到释放，可能会导致内存泄漏，我们可以通过以下方式释放空间：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">baz = <span class="literal">null</span><span class="comment">//此时没有对象对bar函数进行引用，所以成为了垃圾对象，闭包也同时成了垃圾对象</span></span><br></pre></td></tr></table></figure>

<p>在前面一篇文章也提到了产生闭包的多种场景，包括定时器、事件监听器、 Ajax 请求、跨窗口通信、Web Workers等回调函数形式，都会产生和上述代码类似的闭包，可能导致内存泄漏。</p>
<p>因此我们要及时释放资源，例如，当涉及到计时器的时候，完成后及时清除计时器，使用<code>clearTimeout</code>和<code>clearInterval</code>方法。</p>
<p>事件侦听器和观察者也是如此。工作完成后清除它们，不要让事件监听器永远运行，特别是如果它们要保留来自父作用域的任何对象引用。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在V8的内存管理中，将内存空间分为了两个部分：<strong>新生代和老生代</strong>，对于这两个部分采用了不同的算法：</p>
<ul>
<li>新生代使用 Scavenge 算法进行垃圾回收，用空间换取时间，虽然内存空间利用率只有一半，但由于新生代内存空间较小，速度表现是最快的。</li>
<li>新生代中的对象一旦触发条件，就会被移动到老生代内存空间。</li>
<li>老生代使用Mark-Sweep-Compact算法进行垃圾回收，当内存碎片太多，不足以分配给一个被晋升的对象时，或达到其他触发条件，则会经过标记-清理-整理的过程，清理掉内存碎片。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><p><span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvYmxvZy9qYW5rLWJ1c3RlcnM=">https://v8.dev/blog/jank-busters</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvYmxvZy9vcmlub2Nv">https://v8.dev/blog/orinoco</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvYmxvZy9vcHRpbWl6aW5nLXY4LW1lbW9yeQ==">https://v8.dev/blog/optimizing-v8-memory</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvYmxvZy9vcmlub2NvLXBhcmFsbGVsLXNjYXZlbmdlcg==">https://v8.dev/blog/orinoco-parallel-scavenger</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvYmxvZy9jb25jdXJyZW50LW1hcmtpbmc=">https://v8.dev/blog/concurrent-marking</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly92OC5kZXYvYmxvZy90cmFzaC10YWxr">https://v8.dev/blog/trash-talk</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9kZWVwdS50ZWNoL21lbW9yeS1tYW5hZ2VtZW50LWluLXY4Lw==">https://deepu.tech/memory-management-in-v8/</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly90aW1lLmdlZWtiYW5nLm9yZy9jb2x1bW4vYXJ0aWNsZS8xMzEyMzM=">https://time.geekbang.org/column/article/131233</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTM0NjQ1NzU1MDgwNjA1NzEw">https://juejin.cn/post/6934645755080605710</span></p>
</li>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9zYW55dWFuMDcwNC50b3AvYmxvZ3MvamF2YXNjcmlwdC9qcy12OC8wMDIuaHRtbCMlRTglODAlODElRTclOTQlOUYlRTQlQkIlQTMlRTUlODYlODUlRTUlQUQlOTglRTclOUElODQlRTUlOUIlOUUlRTYlOTQlQjY=">https://sanyuan0704.top/blogs/javascript/js-v8/002.html#%E8%80%81%E7%94%9F%E4%BB%A3%E5%86%85%E5%AD%98%E7%9A%84%E5%9B%9E%E6%94%B6</span></p>
</li>
</ul>

      <div class="tags">
          <a href="/tags/Browser/" rel="tag"><i class="ic i-tag"></i> Browser</a>
          <a href="/tags/Javascript/" rel="tag"><i class="ic i-tag"></i> Javascript</a>
      </div>
  </div>

   <footer>

    <div class="meta">
  <span class="item">
    <span class="icon">
      <i class="ic i-calendar-check"></i>
    </span>
    <span class="text">Edited on</span>
    <time title="Modified: 2022-02-08 12:27:04" itemprop="dateModified" datetime="2022-02-08T12:27:04+08:00">2022-02-08</time>
  </span>
  <span id="FrontEnd/Browser/FrontEnd/Browser/【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析" class="item leancloud_visitors" data-flag-title="【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析" title="Views">
      <span class="icon">
        <i class="ic i-eye"></i>
      </span>
      <span class="text">Views</span>
      <span class="leancloud-visitors-count"></span>
      <span class="text">times</span>
  </span>
</div>

      

<div id="copyright">
<ul>
  <li class="author">
    <strong>Post author:  </strong>Monkey-HH <i class="ic i-at"><em>@</em></i>
  </li>
  <li class="link">
    <strong>Post link: </strong>
    <a href="https://monkeyhh.top/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90" title="【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析">https://monkeyhh.top/FrontEnd/Browser/FrontEnd/Browser/【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析</a>
  </li>
  <li class="license">
    <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> unless stating additionally.
  </li>
</ul>
</div>

  </footer>

</article>

  </div>
  

<div class="post-nav">
    <div class="item left">
      

  <a href="/FrontEnd/Package-Manager/FrontEnd/Package_Manager/pnpm%E7%9B%B8%E8%BE%83%E4%BA%8Enpm%E5%92%8Cyarn%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9%EF%BC%9F" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;monkey-HH&#x2F;picBed&#x2F;raw&#x2F;master&#x2F;picbed&#x2F;img&#x2F;202112281044723.jpeg" title="pnpm相较于npm和yarn有什么优点？">
  <span class="type">Previous Post</span>
  <span class="category"><i class="ic i-flag"></i> Package_Manager</span>
  <h3>pnpm相较于npm和yarn有什么优点？</h3>
  </a>

    </div>
    <div class="item right">
      

  <a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91JavaScript%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%A7%A3%E6%9E%90" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;monkey-HH&#x2F;picBed&#x2F;raw&#x2F;master&#x2F;picbed&#x2F;img&#x2F;202202082108316.png" title="【V8引擎原理篇】JavaScript代码解释执行解析">
  <span class="type">Next Post</span>
  <span class="category"><i class="ic i-flag"></i> Browser</span>
  <h3>【V8引擎原理篇】JavaScript代码解释执行解析</h3>
  </a>

    </div>
</div>

  
  <div class="wrap" id="comments"></div>


        </div>
        <div id="sidebar">
          

<div class="inner">

  <div class="panels">
    <div class="inner">
      <div class="contents panel pjax" data-title="Contents">
          <ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%9F%BA%E7%A1%80"><span class="toc-number">1.</span> <span class="toc-text">内存管理基础</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%8F%98%E9%87%8F%E5%AD%98%E5%82%A8%EF%BC%9A%E5%A0%86%E7%A9%BA%E9%97%B4%E5%92%8C%E6%A0%88%E7%A9%BA%E9%97%B4"><span class="toc-number">1.1.</span> <span class="toc-text">变量存储：堆空间和栈空间</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%B8%8D%E5%90%8C%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%96%B9%E5%BC%8F"><span class="toc-number">1.2.</span> <span class="toc-text">不同的内存管理方式</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95"><span class="toc-number">1.3.</span> <span class="toc-text">常见的垃圾回收算法</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#V8%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84"><span class="toc-number">2.</span> <span class="toc-text">V8内存结构</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#V8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E6%A6%82%E8%BF%B0"><span class="toc-number">3.</span> <span class="toc-text">V8的垃圾回收器概述</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%85%A8%E5%81%9C%E9%A1%BF%EF%BC%88stop-the-wrold%EF%BC%89"><span class="toc-number">3.0.1.</span> <span class="toc-text">全停顿（stop-the-wrold）</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%88%86%E4%BB%A3%EF%BC%88generational%EF%BC%89"><span class="toc-number">3.0.2.</span> <span class="toc-text">分代（generational）</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%87%86%E7%A1%AE%EF%BC%88accurate%EF%BC%89"><span class="toc-number">3.0.3.</span> <span class="toc-text">准确（accurate）</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%89%AF%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%EF%BC%9AMinor-GC-Scavenger%E7%AE%97%E6%B3%95"><span class="toc-number">4.</span> <span class="toc-text">副垃圾回收器：Minor GC (Scavenger算法)</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%B8%BB%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%EF%BC%9AMajor-GC%EF%BC%88Mark-Sweep-Compact%E7%AE%97%E6%B3%95%EF%BC%89"><span class="toc-number">5.</span> <span class="toc-text">主垃圾回收器：Major GC（Mark-Sweep-Compact算法）</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#V8-GC%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88"><span class="toc-number">6.</span> <span class="toc-text">V8 GC的优化方案</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%B9%B6%E8%A1%8C%E6%8A%80%E6%9C%AF%EF%BC%88Parallel%EF%BC%89"><span class="toc-number">6.1.</span> <span class="toc-text">并行技术（Parallel）</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%A2%9E%E9%87%8F%E6%A0%87%E8%AE%B0-Incremental-marking"><span class="toc-number">6.2.</span> <span class="toc-text">增量标记(Incremental marking)</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%B9%B6%E5%8F%91%E6%8A%80%E6%9C%AF%EF%BC%88Concurrent%EF%BC%89"><span class="toc-number">6.3.</span> <span class="toc-text">并发技术（Concurrent）</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E6%83%B0%E6%80%A7%E6%B8%85%E9%99%A4%EF%BC%88Lazy-Sweeping%EF%BC%89"><span class="toc-number">6.4.</span> <span class="toc-text">惰性清除（Lazy Sweeping）</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E4%BC%98%E5%8C%96%E5%90%8E%E7%9A%84V8-GC%E7%8E%B0%E7%8A%B6"><span class="toc-number">7.</span> <span class="toc-text">优化后的V8 GC现状</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#Minor-GC"><span class="toc-number">7.1.</span> <span class="toc-text">Minor GC</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#Major-GC"><span class="toc-number">7.2.</span> <span class="toc-text">Major GC</span></a></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F"><span class="toc-number">8.</span> <span class="toc-text">内存泄漏</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%EF%BC%9F"><span class="toc-number">8.1.</span> <span class="toc-text">什么是内存泄漏？</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5"><span class="toc-number">8.2.</span> <span class="toc-text">内存泄漏的几种情况</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F"><span class="toc-number">8.2.1.</span> <span class="toc-text">全局变量</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E9%97%AD%E5%8C%85%E3%80%81%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E3%80%81%E5%AE%9A%E6%97%B6%E5%99%A8%E3%80%81%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC"><span class="toc-number">8.2.2.</span> <span class="toc-text">闭包、回调函数、定时器、事件监听</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E6%80%BB%E7%BB%93"><span class="toc-number">9.</span> <span class="toc-text">总结</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%8F%82%E8%80%83"><span class="toc-number">10.</span> <span class="toc-text">参考</span></a></li></ol>
      </div>
      <div class="related panel pjax" data-title="Related">
        <ul>
          <li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98" rel="bookmark" title="同源策略以及如何解决跨域问题">同源策略以及如何解决跨域问题</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98" rel="bookmark" title="浏览器的同源策略以及如何解决跨域问题">浏览器的同源策略以及如何解决跨域问题</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84JavaScript%E6%89%A7%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%9A%E6%8F%90%E5%8D%87%E6%9C%BA%E5%88%B6%E3%80%81%E8%B0%83%E7%94%A8%E6%A0%88%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85%E3%80%81%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E3%80%81this" rel="bookmark" title="【V8引擎原理篇】浏览器中的JavaScript执行机制：提升机制、调用栈、作用域、闭包、执行上下文、this">【V8引擎原理篇】浏览器中的JavaScript执行机制：提升机制、调用栈、作用域、闭包、执行上下文、this</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8" rel="bookmark" title="客户端存储">客户端存储</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8" rel="bookmark" title="浏览器中的客户端存储">浏览器中的客户端存储</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8Web%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2" rel="bookmark" title="浏览器Web安全攻防">浏览器Web安全攻防</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" rel="bookmark" title="【V8引擎原理篇】JavaScript事件循环机制">【V8引擎原理篇】JavaScript事件循环机制</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" rel="bookmark" title="【V8引擎原理篇】事件循环机制">【V8引擎原理篇】事件循环机制</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91Event%20Loop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" rel="bookmark" title="【V8引擎原理篇】Event Loop事件循环机制">【V8引擎原理篇】Event Loop事件循环机制</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D" rel="bookmark" title="【浏览器工作原理篇】浏览器工作基本原理介绍">【浏览器工作原理篇】浏览器工作基本原理介绍</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91%E9%87%8D%E7%BB%98%E3%80%81%E9%87%8D%E6%8E%92%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96" rel="bookmark" title="【浏览器工作原理篇】重绘、重排与性能优化">【浏览器工作原理篇】重绘、重排与性能优化</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%8E%A5%E5%8F%A3%E9%89%B4%E6%9D%83%E6%96%B9%E6%A1%88%EF%BC%9ACookie%E3%80%81Session%E3%80%81Token%E3%80%81JWT%E3%80%81%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95" rel="bookmark" title="接口鉴权方案：Cookie、Session、Token、JWT、单点登录">接口鉴权方案：Cookie、Session、Token、JWT、单点登录</a></li><li class="active"><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90" rel="bookmark" title="【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析">【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析</a></li><li><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91JavaScript%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%A7%A3%E6%9E%90" rel="bookmark" title="【V8引擎原理篇】JavaScript代码解释执行解析">【V8引擎原理篇】JavaScript代码解释执行解析</a></li>
        </ul>
      </div>
      <div class="overview panel" data-title="Overview">
        <div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="image" itemprop="image" alt="Monkey-HH"
      data-src="/images/avatar.jpg">
  <p class="name" itemprop="name">Monkey-HH</p>
  <div class="description" itemprop="description">Learn, share, make progress</div>
</div>

<nav class="state">
    <div class="item posts">
      <a href="/archives/">
        <span class="count">54</span>
        <span class="name">posts</span>
      </a>
    </div>
    <div class="item categories">
      <a href="/categories/">
        <span class="count">18</span>
        <span class="name">categories</span>
      </a>
    </div>
    <div class="item tags">
      <a href="/tags/">
        <span class="count">23</span>
        <span class="name">tags</span>
      </a>
    </div>
</nav>

<div class="social">
      <span class="exturl item github" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmtleS1ISA==" title="https:&#x2F;&#x2F;github.com&#x2F;monkey-HH"><i class="ic i-github"></i></span>
      <span class="exturl item email" data-url="bWFpbHRvOmhoanNjYXVAMTYzLmNvbQ==" title="mailto:hhjscau@163.com"><i class="ic i-envelope"></i></span>
</div>

<ul class="menu">
  
    
  <li class="item">
    <a href="/" rel="section"><i class="ic i-home"></i>Home</a>
  </li>

        
  <li class="item dropdown">
      <a href="javascript:void(0);"><i class="ic i-feather"></i>Posts</a>
    <ul class="submenu">

        
  <li class="item">
    <a href="/categories/" rel="section"><i class="ic i-th"></i>Categories</a>
  </li>

        
  <li class="item">
    <a href="/tags/" rel="section"><i class="ic i-tags"></i>Tags</a>
  </li>

  </ul>
    
  <li class="item">
    <a href="/friends/" rel="section"><i class="ic i-heart"></i>Friends</a>
  </li>

    
  <li class="item">
    <a href="/about/" rel="section"><i class="ic i-user"></i>About</a>
  </li>

    
  <li class="item">
    <a href="/links/" rel="section"><i class="ic i-magic"></i>Links</a>
  </li>


</ul>

      </div>
    </div>
  </div>

  <ul id="quick">
    <li class="prev pjax">
        <a href="/FrontEnd/Package-Manager/FrontEnd/Package_Manager/pnpm%E7%9B%B8%E8%BE%83%E4%BA%8Enpm%E5%92%8Cyarn%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9%EF%BC%9F" rel="prev" title="Previous Post"><i class="ic i-chevron-left"></i></a>
    </li>
    <li class="up"><i class="ic i-arrow-up"></i></li>
    <li class="down"><i class="ic i-arrow-down"></i></li>
    <li class="next pjax">
        <a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91JavaScript%E4%BB%A3%E7%A0%81%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E8%A7%A3%E6%9E%90" rel="next" title="Next Post"><i class="ic i-chevron-right"></i></a>
    </li>
    <li class="percent"></li>
  </ul>
</div>


        </div>
        <div class="dimmer"></div>
      </div>
    </main>
    <footer id="footer">
      <div class="inner">
        <div class="widgets">
          
<div class="rpost pjax">
  <h2>Random Posts</h2>
  <ul>
      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98" title="浏览器的同源策略以及如何解决跨域问题">浏览器的同源策略以及如何解决跨域问题</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/jQuery%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8" title="jQuery基础知识入门">jQuery基础知识入门</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/ComputerBasics/" title="In ComputerBasics">ComputerBasics</a>
<i class="ic i-angle-right"></i>
<a href="/categories/ComputerBasics/Computer-Networking/" title="In Computer_Networking">Computer_Networking</a>
</div>

    <span><a href="/ComputerBasics/Computer-Networking/ComputerBasics/Computer_Networking/HTTP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9" title="HTTP基础知识点">HTTP基础知识点</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91this%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81bind%E3%80%81apply" title="【手撕JavaScript系列】this原理以及模拟实现call、bind、apply">【手撕JavaScript系列】this原理以及模拟实现call、bind、apply</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/BackEnd/" title="In BackEnd">BackEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/BackEnd/Linux/" title="In Linux">Linux</a>
</div>

    <span><a href="/BackEnd/Linux/BackEnd/Linux/%E3%80%90Linux%E3%80%91Linux%E7%B3%BB%E7%BB%9F%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A" title="【Linux】Linux基础知识">【Linux】Linux基础知识</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81" title="【手撕JavaScript系列】JavaScript中的防抖与节流">【手撕JavaScript系列】JavaScript中的防抖与节流</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%ADDOM%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93" title="JavaScript中DOM操作总结">JavaScript中DOM操作总结</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/React/" title="In React">React</a>
</div>

    <span><a href="/FrontEnd/React/FrontEnd/React/%E3%80%90React%E5%9F%BA%E7%A1%80%E3%80%91React%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" title="【React基础】React生命周期">【React基础】React生命周期</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91Event%20Loop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" title="【V8引擎原理篇】Event Loop事件循环机制">【V8引擎原理篇】Event Loop事件循环机制</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Module-Bundler/" title="In Module_Bundler">Module_Bundler</a>
</div>

    <span><a href="/FrontEnd/Module-Bundler/FrontEnd/Module_Bundler/Vite%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%94webpack%E5%BF%AB" title="Vite为什么比webpack快">Vite为什么比webpack快</a></span>
  </li>

  </ul>
</div>
<div>
  <h2>Recent Comments</h2>
  <ul class="leancloud-recent-comment"></ul>
</div>

        </div>
        <div class="status">
  <div class="copyright">
    
    &copy; 2021 – 
    <span itemprop="copyrightYear">2022</span>
    <span class="with-love">
      <i class="ic i-sakura rotate"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">Monkey-HH @ Monkey's Blog</span>
  </div>
  <div class="count">
    <span class="post-meta-item-icon">
      <i class="ic i-chart-area"></i>
    </span>
    <span title="Symbols count total">774k words</span>

    <span class="post-meta-divider">|</span>
    <span class="post-meta-item-icon">
      <i class="ic i-coffee"></i>
    </span>
    <span title="Reading time total">11:43</span>
  </div>
  <div class="powered-by">
    Powered by <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span>
  </div>
</div>

      </div>
    </footer>
  </div>
<script data-config type="text/javascript">
  var LOCAL = {
    path: 'FrontEnd/Browser/FrontEnd/Browser/【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析',
    favicon: {
      show: "（●´3｀●）Goooood",
      hide: "(´Д｀)Booooom"
    },
    search : {
      placeholder: "Search for Posts",
      empty: "We didn't find any results for the search: ${query}",
      stats: "${hits} results found in ${time} ms"
    },
    valine: true,fancybox: true,copyright: 'Copied to clipboard successfully! <br> All articles in this blog are licensed under <i class="ic i-creative-commons"></i>BY-NC-SA.',
    ignores : [
      function(uri) {
        return uri.includes('#');
      },
      function(uri) {
        return new RegExp(LOCAL.path+"$").test(uri);
      }
    ]
  };
</script>

<script src="https://cdn.polyfill.io/v2/polyfill.js"></script>

<script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script>

<script src="/js/app.js?v=0.2.5"></script>




</body>
</html>
