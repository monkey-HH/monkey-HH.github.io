



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=2">
<meta name="theme-color" content="#FFF">
  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon.png">

<link rel="icon" type="image/ico" sizes="32x32" href="/images/favicon.ico">
  <meta http-equiv="Cache-Control" content="no-transform">
  <meta http-equiv="Cache-Control" content="no-siteapp">


<link rel="alternate" type="application/rss+xml" title="" href="https://monkeyhh.top/rss.xml" />
<link rel="alternate" type="application/atom+xml" title="" href="https://monkeyhh.top/atom.xml" />
<link rel="alternate" type="application/json" title="" href="https://monkeyhh.top/feed.json" />

<link rel="stylesheet" href="//fonts.googleapis.com/css?family=Mulish:300,300italic,400,400italic,700,700italic%7CFredericka%20the%20Great:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20JP:300,300italic,400,400italic,700,700italic%7CNoto%20Serif%20SC:300,300italic,400,400italic,700,700italic%7CInconsolata:300,300italic,400,400italic,700,700italic&display=swap&subset=latin,latin-ext">

<link rel="stylesheet" href="/css/app.css?v=0.2.5">

  
  <meta name="keywords" content="JavaScript" />


<link rel="canonical" href="https://monkeyhh.top/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91Promise%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAPromise">



  <title>
【手撕JavaScript系列】Promise介绍以及实现一个Promise - JavaScript - FrontEnd |
Monkey's Blog = </title>
<meta name="generator" content="Hexo 5.4.0"></head>
<body itemscope itemtype="http://schema.org/WebPage">
  <div id="loading">
    <div class="cat">
      <div class="body"></div>
      <div class="head">
        <div class="face"></div>
      </div>
      <div class="foot">
        <div class="tummy-end"></div>
        <div class="bottom"></div>
        <div class="legs left"></div>
        <div class="legs right"></div>
      </div>
      <div class="paw">
        <div class="hands left"></div>
        <div class="hands right"></div>
      </div>
    </div>
  </div>
  <div id="container">
    <header id="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="inner">
        <div id="brand">
          <div class="pjax">
          
  <h1 itemprop="name headline">【手撕JavaScript系列】Promise介绍以及实现一个Promise
  </h1>
  
<div class="meta">
  <span class="item" title="Created: 2021-07-18 12:28:20">
    <span class="icon">
      <i class="ic i-calendar"></i>
    </span>
    <span class="text">Posted on</span>
    <time itemprop="dateCreated datePublished" datetime="2021-07-18T12:28:20+08:00">2021-07-18</time>
  </span>
  <span class="item" title="Symbols count in article">
    <span class="icon">
      <i class="ic i-pen"></i>
    </span>
    <span class="text">Symbols count in article</span>
    <span>31k</span>
    <span class="text">words</span>
  </span>
  <span class="item" title="Reading time">
    <span class="icon">
      <i class="ic i-clock"></i>
    </span>
    <span class="text">Reading time</span>
    <span>28 mins.</span>
  </span>
</div>


          </div>
        </div>
        <nav id="nav">
  <div class="inner">
    <div class="toggle">
      <div class="lines" aria-label="Toggle navigation bar">
        <span class="line"></span>
        <span class="line"></span>
        <span class="line"></span>
      </div>
    </div>
    <ul class="menu">
      <li class="item title"><a href="/" rel="start">Monkey's Blog</a></li>
    </ul>
    <ul class="right">
      <li class="item theme">
        <i class="ic i-sun"></i>
      </li>
      <li class="item search">
        <i class="ic i-search"></i>
      </li>
    </ul>
  </div>
</nav>

      </div>
      <div id="imgs" class="pjax">
          <img src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202109201019726.png">
      </div>
    </header>
    <div id="waves">
      <svg class="waves" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
        <defs>
          <path id="gentle-wave" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z" />
        </defs>
        <g class="parallax">
          <use xlink:href="#gentle-wave" x="48" y="0" />
          <use xlink:href="#gentle-wave" x="48" y="3" />
          <use xlink:href="#gentle-wave" x="48" y="5" />
          <use xlink:href="#gentle-wave" x="48" y="7" />
        </g>
      </svg>
    </div>
    <main>
      <div class="inner">
        <div id="main" class="pjax">
          
  <div class="article wrap">
    
<div class="breadcrumb" itemscope itemtype="https://schema.org/BreadcrumbList">
<i class="ic i-home"></i>
<span><a href="/">Home</a></span><i class="ic i-angle-right"></i>
<span  itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/FrontEnd/" itemprop="item" rel="index" title="In FrontEnd"><span itemprop="name">FrontEnd</span></a>
<meta itemprop="position" content="1" /></span>
<i class="ic i-angle-right"></i>
<span  class="current" itemprop="itemListElement" itemscope itemtype="https://schema.org/ListItem"><a href="/categories/FrontEnd/JavaScript/" itemprop="item" rel="index" title="In JavaScript"><span itemprop="name">JavaScript</span></a>
<meta itemprop="position" content="2" /></span>
</div>

    <article itemscope itemtype="http://schema.org/Article" class="post block" lang="en">
  <link itemprop="mainEntityOfPage" href="https://monkeyhh.top/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91Promise%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAPromise">

  <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
    <meta itemprop="image" content="/images/avatar.jpg">
    <meta itemprop="name" content="Monkey-HH">
    <meta itemprop="description" content=", Learn, share, make progress">
  </span>

  <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
    <meta itemprop="name" content="">
  </span>

  <div class="body md" itemprop="articleBody">
    

    <h1 id="1-Promise是什么？"><a href="#1-Promise是什么？" class="headerlink" title="1.Promise是什么？"></a>1.Promise是什么？</h1><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p>
<p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。</p>
<h1 id="2-Promise的特点"><a href="#2-Promise的特点" class="headerlink" title="2. Promise的特点"></a>2. Promise的特点</h1><ul>
<li>Promise只有三个状态，待定（pending、兑现（fulfilled，有时候也称为“解决”，resolved）、拒绝（rejected）。</li>
<li>对象的状态不受外界影响，一旦状态改变，就不会再变。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li>
</ul>
<p><img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202111161823888.png" alt="image-20211116182323801"></p>
<p>缺点:</p>
<p> (1)无法取消Promise，一旦新建它就会立即执行，无法中途取消。和一般的对象不一样，无需调用。</p>
<p> (2)如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</p>
<p> (3)当处于Pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）</p>
<h1 id="3-一个小示例"><a href="#3-一个小示例" class="headerlink" title="3. 一个小示例"></a>3. 一个小示例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过new	创建了一个Promise实例，此时Promise的状态为pending</span></span><br><span class="line"><span class="keyword">let</span> promiseInstance = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">        resolve(value);<span class="comment">//将Promise的状态从 pending 变为 resolved，value为原因</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//写法一：                          </span></span><br><span class="line">        reject(error);<span class="comment">//将Promise的状态从 pending 变为 rejected，error为错误原因</span></span><br><span class="line">	    <span class="comment">//写法二：</span></span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;test&#x27;</span>);<span class="comment">//等价于reject(new Error(&#x27;test&#x27;));</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promiseInstance.then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 成功后的回调函数操作</span></span><br><span class="line">&#125;);</span><br><span class="line">promiseInstance.catch(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 失败后的回调函数操作</span></span><br><span class="line">&#125;);</span><br><span class="line">promiseInstance.finally(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 不管 Promise 对象最后状态如何，都会执行的操作	</span></span><br><span class="line">  <span class="comment">//无参数，无法获取状态，即最后操作应与状态无关</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以选择将传给 catch 的函数作为 then 方法的第二个参数，只是写法不同。如下</span></span><br><span class="line">promiseInstance.then(<span class="function">(<span class="params">response</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 成功后，fulfill 的操作</span></span><br><span class="line">&#125;,<span class="function">(<span class="params">error</span>)=&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 失败后</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>







<h1 id="4-Promise常用API"><a href="#4-Promise常用API" class="headerlink" title="4.Promise常用API"></a>4.Promise常用API</h1><h3 id="1-Promise-构造函数-Promise-executor"><a href="#1-Promise-构造函数-Promise-executor" class="headerlink" title="1. Promise 构造函数: Promise (executor) {}"></a>1. Promise 构造函数: Promise (executor) {}</h3><p>(1) executor 函数: 执行器 (resolve, reject) =&gt; {}</p>
<p>(2) resolve 函数: 内部定义成功时我们调用的函数 value =&gt; {}</p>
<p>(3) reject 函数: 内部定义失败时我们调用的函数 reason =&gt; {}</p>
<p>⭐说明: executor 会在 Promise 内部立即<code>同步调用</code>，异步操作在执行器中执行,换话说Promise支持同步也支持异步操作</p>
<h3 id="2-Promise-prototype-then-方法-onResolved-onRejected-gt"><a href="#2-Promise-prototype-then-方法-onResolved-onRejected-gt" class="headerlink" title="2. Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}"></a>2. Promise.prototype.then 方法: (onResolved, onRejected) =&gt; {}</h3><p>(1) onResolved 函数: 成功的回调函数 (value) =&gt; {}</p>
<p>(2) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p>
<p>说明: 指定用于得到成功 value 的成功回调和用于得到失败 reason 的失败回调， <strong>并且返回一个新的 promise 对象</strong></p>
<p>promise.then()返回的新 promise 的结果状态有三种情况：</p>
<p>  ① 如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</p>
<p> ② 如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</p>
<p> ③ 如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">	resolve(<span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//执行 then 方法</span></span><br><span class="line"><span class="keyword">let</span> result = p.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(value);</span><br><span class="line">	<span class="comment">// 1. 抛出错误 ,变为 rejected</span></span><br><span class="line">	<span class="keyword">throw</span> <span class="string">&#x27;出了问题&#x27;</span>;</span><br><span class="line">	<span class="comment">// 2. 返回结果是非 Promise 类型的对象,新 promise 变为 resolved</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">521</span>;</span><br><span class="line">	<span class="comment">// 3. 返回结果是 Promise 对象,此 promise 的结果就会成为新 promise 的结果</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// resolve(&#x27;success&#x27;);</span></span><br><span class="line">		reject(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.warn(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="3-Promise-prototype-catch-方法：-onRejected-gt"><a href="#3-Promise-prototype-catch-方法：-onRejected-gt" class="headerlink" title="3.Promise.prototype.catch()方法： (onRejected) =&gt; {}"></a>3.Promise.prototype.catch()方法： (onRejected) =&gt; {}</h3><p>(1) onRejected 函数: 失败的回调函数 (reason) =&gt; {}</p>
<p>说明: then()的语法糖, 相当于: then(undefined, onRejected)</p>
<p>(2) 异常穿透使用:当运行到最后,没被处理的所有异常错误都会进入这个方法的回调函数中</p>
<p><code>Promise.prototype.catch()</code>方法是<code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的别名，用于指定<strong>发生错误时</strong>的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;fulfilled:&#x27;</span>, val))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;rejected&#x27;</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;fulfilled:&#x27;</span>, val))</span><br><span class="line">  .then(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&quot;rejected:&quot;</span>, err));</span><br></pre></td></tr></table></figure>

<p>在promise链式调用中，错误具有冒泡性，或者说<code>异常穿透</code>，</p>
<h3 id="4-Promise-prototype-finally"><a href="#4-Promise-prototype-finally" class="headerlink" title="4. Promise.prototype.finally()"></a>4. Promise.prototype.finally()</h3><p><code>**finally()**</code> 方法返回一个<a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise"><code>Promise</code></a>。在promise结束时，无论结果是fulfilled或者是rejected，都会执行指定的回调函数。这为在<code>Promise</code>是否成功完成后都需要执行的代码提供了一种方式。</p>
<p>这避免了同样的语句需要在<a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then"><code>then()</code></a>和<a target="_blank" rel="noopener" href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch"><code>catch()</code></a>中各写一次的情况。</p>
<h3 id="5-Promise-resolve-value-详解"><a href="#5-Promise-resolve-value-详解" class="headerlink" title="5.Promise.resolve(value)详解"></a>5.Promise.resolve(value)详解</h3><p>说明: 返回一个成功/失败的 promise 对象,直接改变promise状态</p>
<p>以下写法等价</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> resolve()); </span><br><span class="line"><span class="keyword">let</span> p2 = <span class="built_in">Promise</span>.resolve();</span><br></pre></td></tr></table></figure>

<p>我们都知道其可以传入一个value参数，以下是几个例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.传入参数为一个字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Promise</span>.resolve(<span class="string">&quot;3&quot;</span>)) <span class="comment">//Promise &#123;&lt;fulfilled&gt;: &quot;3&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.传入参数为一个数字</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Promise</span>.resolve(<span class="number">123</span>)) <span class="comment">//Promise &#123;&lt;fulfilled&gt;: 123&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.传入参数为一个Promise实例，则直接返回该对象</span></span><br><span class="line"><span class="keyword">let</span> promise = <span class="built_in">Promise</span>.resolve(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">console</span>.log(promise == <span class="built_in">Promise</span>.resolve(promise)) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.参数是一个thenable的对象</span></span><br><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">	<span class="attr">then</span>: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">		resolve(<span class="string">&quot;thenable&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="built_in">Promise</span>.resolve(thenable);</span><br><span class="line"><span class="built_in">console</span>.log(p1) <span class="comment">//Promise &#123;&lt;pending&gt;&#125;</span></span><br><span class="line">p1.then(<span class="function"><span class="params">value</span> =&gt;</span></span><br><span class="line">	<span class="built_in">console</span>.log(p1, value) <span class="comment">// Promise &#123;&lt;fulfilled&gt;: &quot;thenable&quot;&#125; &quot;thenable&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>





<h3 id="6-Promise-reject-reason-详解"><a href="#6-Promise-reject-reason-详解" class="headerlink" title="6.Promise.reject(reason)详解"></a>6.Promise.reject(reason)详解</h3><p><strong><code>Promise.reject(reason)</code>方法也会返回一个新的 Promise 实例，该实例的状态为<code>rejected</code>。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> reject(<span class="string">&#x27;出错了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure>

<p>上面代码生成一个 Promise 对象的实例<code>p</code>，状态为<code>rejected</code>，回调函数会立即执行。</p>
<p><code>Promise.reject()</code>方法的参数，会原封不动地作为<code>reject</code>的理由，变成后续方法的参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">.catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e === <span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Promise.reject()</code>方法的参数是一个字符串，后面<code>catch()</code>方法的参数<code>e</code>就是这个字符串。</p>
<h3 id="7-Promise-all"><a href="#7-Promise-all" class="headerlink" title="7.Promise.all()"></a>7.Promise.all()</h3><p><code>Promise.all()</code>方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const p = Promise.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是 Promise 实例，如果不是，就会先调用下面讲到的<code>Promise.resolve</code>方法，将参数转为 Promise 实例，再进一步处理。另外，<code>Promise.all()</code>方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p>
<p><code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分成两种情况。</p>
<p>（1）只有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数。</p>
<p>（2）只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数。</p>
<h3 id="8-Promise-race"><a href="#8-Promise-race" class="headerlink" title="8.Promise.race()"></a>8.Promise.race()</h3><p>和Promise.all()不同之处为，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个实例率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给<code>p</code>的回调函数。</p>
<h3 id="9-Promise-allSettled"><a href="#9-Promise-allSettled" class="headerlink" title="9.Promise.allSettled()"></a>9.Promise.allSettled()</h3><p>等到一组异步操作都结束了，不管每一个操作是成功还是失败，再进行下一步操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolved = <span class="built_in">Promise</span>.resolve(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> rejected = <span class="built_in">Promise</span>.reject(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allSettledPromise = <span class="built_in">Promise</span>.allSettled([resolved, rejected]);</span><br><span class="line"></span><br><span class="line">allSettledPromise.then(<span class="function"><span class="keyword">function</span> (<span class="params">results</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;fulfilled&#x27;, value: 42 &#125;,</span></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;rejected&#x27;, reason: -1 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure>

<h3 id="10-Promise-any"><a href="#10-Promise-any" class="headerlink" title="10.Promise.any()"></a>10.Promise.any()</h3><p>只要参数实例有一个变成<code>fulfilled</code>状态，包装实例就会变成<code>fulfilled</code>状态；如果所有参数实例都变成<code>rejected</code>状态，包装实例就会变成<code>rejected</code>状态。</p>
<p><code>Promise.any()</code>跟<code>Promise.race()</code>方法很像，只有一点不同，就是<code>Promise.any()</code>不会因为某个 Promise 变成<code>rejected</code>状态而结束，必须等到所有参数 Promise 变成<code>rejected</code>状态才会结束。</p>
<h1 id="5-手撕Promise系列"><a href="#5-手撕Promise系列" class="headerlink" title="5. 手撕Promise系列"></a>5. 手撕Promise系列</h1><h2 id="5-1-预备知识"><a href="#5-1-预备知识" class="headerlink" title="5.1 预备知识"></a>5.1 预备知识</h2><ul>
<li>Promise基础知识，可以看看阮一峰的es6书籍</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8=">Promise A+规范</span> ，Promise 是基于 Promise A+ 规范实现的，使用<span class="exturl" data-url="aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvcHJvbWlzZXMtYXBsdXMtdGVzdHM=">promises-aplus-tests</span> 检测我们的Promise是否符合规范。</li>
<li>JavaScript语法知识，以下将会以class的写法来写。先写一点可能会忘记es6的class的知识</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 添加到 this 的所有内容都会存在于不同的实例上，即functionInstance.method = ...</span></span><br><span class="line">		<span class="built_in">this</span>.locate = <span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;instance&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 定义在类的原型对象上，即原型方法FunctionName.prototypre.method = ...</span></span><br><span class="line">	<span class="function"><span class="title">locate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;prototype&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 定义在类本身上，即FunctionName.method = ...</span></span><br><span class="line">	<span class="keyword">static</span> <span class="function"><span class="title">locate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;class&#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.locate(); <span class="comment">// instance, Person &#123;&#125; </span></span><br><span class="line">Person.prototype.locate(); <span class="comment">// prototype, &#123;constructor: ... &#125; </span></span><br><span class="line">Person.locate(); <span class="comment">// class, class Person &#123;&#125;</span></span><br></pre></td></tr></table></figure>

<p>很多手写版本都是使用 setTimeout 去做异步处理，但是 setTimeout 属于宏任务，这与 Promise 是个微任务相矛盾，所以我打算选择一种创建微任务的方式去实现我们的手写代码。</p>
<p>这里我们有几种选择，一种就是 Promise A+ 规范中也提到的，process.nextTick（ Node 端 ） 与MutationObserver（ 浏览器端 ），考虑到利用这两种方式需要做环境判断，所以在这里我们就推荐另外一种创建微任务的方式 <code>queueMicrotask</code>，了解更多 –&gt; <span class="exturl" data-url="aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL3poLUNOL2RvY3MvV2ViL0FQSS9IVE1MX0RPTV9BUEkvTWljcm90YXNrX2d1aWRl">在 JavaScript 中通过 queueMicrotask() 使用微任务</span>;</p>
<h2 id="5-2-手撕Promise"><a href="#5-2-手撕Promise" class="headerlink" title="5.2 手撕Promise"></a>5.2 手撕Promise</h2><h3 id="5-2-1-第一版：简单框架"><a href="#5-2-1-第一版：简单框架" class="headerlink" title="5.2.1 第一版：简单框架"></a>5.2.1 第一版：简单框架</h3><p>第一版要求：</p>
<ul>
<li>实现Promise的构造函数，该构造函数能传入一个executor函数(有两个函数参数，resolve和reject)，并且是同步调用的。</li>
<li>Promise存在三个状态（state）pending、fulfilled、rejected，能进行状态切换，且状态唯一，改变后不可再变。</li>
<li>实现简单的then方法，<u>不要求能处理setTimeout等异步任务。</u></li>
<li>如果executor里报错了，就调用reject函数，并传入错误代码。</li>
</ul>
<p><code>解决方案</code>：</p>
<ul>
<li><strong>增</strong>：新建类，包含一个Promise对象基本属性</li>
<li><strong>增</strong>：用try-catch捕获ERROR，就调用reject函数</li>
<li><strong>增</strong>：实现简单的then方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 MyPromise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">		<span class="built_in">this</span>.status = PENDING;</span><br><span class="line">		<span class="comment">// 成功之后的值</span></span><br><span class="line">		<span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 失败之后的原因</span></span><br><span class="line">		<span class="built_in">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">		<span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">		<span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改成功后的状态</span></span><br><span class="line">		<span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态修改为成功</span></span><br><span class="line">				<span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">				<span class="comment">// 保存成功之后的值</span></span><br><span class="line">				<span class="built_in">this</span>.value = value;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改失败后的状态</span></span><br><span class="line">		<span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态成功为失败</span></span><br><span class="line">				<span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">				<span class="comment">// 保存失败后的原因</span></span><br><span class="line">				<span class="built_in">this</span>.reason = reason;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果executor执行报错，直接执行reject</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			executor(resolve, reject);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			reject(err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 判断状态</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">			<span class="comment">// 调用成功回调，并且把值返回</span></span><br><span class="line">			onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">			<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">			onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好，我们使用下面的代码进行测试。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">				resolve(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">				reject(<span class="string">&#x27;err&#x27;</span>)</span><br><span class="line">			&#125;)</span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, reason)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出为：resolve success</span></span><br></pre></td></tr></table></figure>

<p>可以看到没有问题。</p>
<h3 id="5-2-2-第二版：加入异步逻辑"><a href="#5-2-2-第二版：加入异步逻辑" class="headerlink" title="5.2.2 第二版：加入异步逻辑"></a>5.2.2 第二版：加入异步逻辑</h3><p>在第一版中，有一个问题我们没有解决：当resolve在setTomeout内执行，then时state还是pending等待状态。正如下方代码所示</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">				<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;success&#x27;</span>), <span class="number">0</span>)</span><br><span class="line">			&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, reason)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出：</span></span><br></pre></td></tr></table></figure>

<p>可以看到输出为空，这是因为V8引擎中事件循环的机制决定了先执行同步代码，再执行异步代码，而setTimeout为异步代码，V8直接将该代码放到“宏任务队列”（导致的后果就是状态改变的延后），先执行剩下的同步代码，即then方法，而then方法中判断状态的时候发现状态还是pending，所以没有输出。</p>
<p><code>判断异步逻辑的情况</code>：<strong>在then方法执行的时候判断到状态为pending的话，就说明出现了异步逻辑的情况了。</strong></p>
<p><code>解决方案</code>：</p>
<ul>
<li><strong>增</strong>：缓存then回调函数，然后在resolve或reject函数真正执行时才调用它们</li>
</ul>
<p>然后代码就如下了，🌙标注出了新增的代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 MyPromise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">		<span class="built_in">this</span>.status = PENDING;</span><br><span class="line">		<span class="comment">// 成功之后的值</span></span><br><span class="line">		<span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 失败之后的原因</span></span><br><span class="line">		<span class="built_in">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 🌙存储成功回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onFulfilledCallback = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 🌙存储失败回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onRejectedCallback = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">		<span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">		<span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改成功后的状态</span></span><br><span class="line">		<span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态修改为成功</span></span><br><span class="line">				<span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">				<span class="comment">// 保存成功之后的值</span></span><br><span class="line">				<span class="built_in">this</span>.value = value;</span><br><span class="line">				<span class="comment">// 🌙判断成功回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback &amp;&amp; <span class="built_in">this</span>.onFulfilledCallback(value);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改失败后的状态</span></span><br><span class="line">		<span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态成功为失败</span></span><br><span class="line">				<span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">				<span class="comment">// 保存失败后的原因</span></span><br><span class="line">				<span class="built_in">this</span>.reason = reason;</span><br><span class="line">				<span class="comment">// 🌙判断失败回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback &amp;&amp; <span class="built_in">this</span>.onRejectedCallback(reason)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果executor执行报错，直接执行reject</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			executor(resolve, reject);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			reject(err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 判断状态</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">			<span class="comment">// 调用成功回调，并且把值返回</span></span><br><span class="line">			onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">			<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">			onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">			<span class="comment">// 🌙</span></span><br><span class="line">			<span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">			<span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line">			<span class="built_in">this</span>.onFulfilledCallback = onFulfilled;</span><br><span class="line">			<span class="built_in">this</span>.onRejectedCallback = onRejected;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这进行测试，就发现可以成功输出resolve success，实现功能。</p>
<h3 id="5-2-3-第三版：实现then方法多次调用"><a href="#5-2-3-第三版：实现then方法多次调用" class="headerlink" title="5.2.3 第三版：实现then方法多次调用"></a>5.2.3 第三版：实现then方法多次调用</h3><p>我们知道，对于一个promise可以设定多个then方法，<strong>非then链式调用！！</strong>，如下方代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">&#x27;success&#x27;</span>), <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, reason)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;resolve&#x27;</span>, value)</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;reject&#x27;</span>, reason)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//预期输出：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">resolve success</span><br><span class="line"><span class="number">2</span> </span><br><span class="line">resolve success</span><br><span class="line"><span class="number">3</span> </span><br><span class="line">resolve success</span><br><span class="line"></span><br><span class="line"><span class="comment">//实际输出:</span></span><br><span class="line"><span class="number">3</span> </span><br><span class="line">resolve success</span><br></pre></td></tr></table></figure>



<p><code>解决方案</code>：</p>
<ul>
<li><strong>改</strong>：改用数组缓存回调函数。</li>
<li><strong>改</strong>：resolve和reject要遍历缓存数组并执行</li>
</ul>
<p>我们用🌙标注修改的地方</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 MyPromise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">		<span class="built_in">this</span>.status = PENDING;</span><br><span class="line">		<span class="comment">// 成功之后的值</span></span><br><span class="line">		<span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 失败之后的原因</span></span><br><span class="line">		<span class="built_in">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 🌙存储成功回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onFulfilledCallback = [];</span><br><span class="line">		<span class="comment">// 🌙存储失败回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onRejectedCallback = [];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">		<span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">		<span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改成功后的状态</span></span><br><span class="line">		<span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态修改为成功</span></span><br><span class="line">				<span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">				<span class="comment">// 保存成功之后的值</span></span><br><span class="line">				<span class="built_in">this</span>.value = value;</span><br><span class="line">				<span class="comment">// 🌙判断成功回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(value));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改失败后的状态</span></span><br><span class="line">		<span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态成功为失败</span></span><br><span class="line">				<span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">				<span class="comment">// 保存失败后的原因</span></span><br><span class="line">				<span class="built_in">this</span>.reason = reason;</span><br><span class="line">				<span class="comment">// 🌙判断失败回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(reason));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果executor执行报错，直接执行reject</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			executor(resolve, reject);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			reject(err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 判断状态</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">			<span class="comment">// 调用成功回调，并且把值返回</span></span><br><span class="line">			onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">			<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">			onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">			<span class="comment">// 🌙</span></span><br><span class="line">			<span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">			<span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line">			<span class="built_in">this</span>.onFulfilledCallback.push(onFulfilled);</span><br><span class="line">			<span class="built_in">this</span>.onRejectedCallback.push(onRejected);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再重新测试一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实际输出：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">resolve success</span><br><span class="line"><span class="number">2</span> </span><br><span class="line">resolve success</span><br><span class="line"><span class="number">3</span> </span><br><span class="line">resolve success</span><br></pre></td></tr></table></figure>



<h3 id="5-2-4-第四版：实现then链式调用"><a href="#5-2-4-第四版：实现then链式调用" class="headerlink" title="5.2.4 第四版：实现then链式调用"></a>5.2.4 第四版：实现then链式调用</h3><p>上面的代码还能够进一步完善，我们希望代码可以处理promise的链式调用，即<code>new Promise().then().then().then()</code>。原理就是then方法会返回一个新的promise对象，但是什么呢，我们实现的then方法中明显没有返回一个新的promise对象。</p>
<p>为了解决这个问题，我们首先回顾一下then函数中的返回值与新Promise的关系：</p>
<blockquote>
<ul>
<li>如果抛出异常, 新 promise 变为 rejected, reason 为抛出的异常</li>
<li>如果返回的是非 promise 的任意值, 新 promise 变为 resolved, value 为返回的值</li>
<li>如果返回的是另一个新 promise, 此 promise 的结果就会成为新 promise 的结果</li>
</ul>
</blockquote>
<p>因此我们首先要在then中返回一个Promise。然后记得将回调函数的返回值存起来，并用一个resolvePromise函数进行3种情况的判断。</p>
<p>还有一个重要的点：<strong>then函数是异步的</strong>。</p>
<p><code>解决方案</code>：</p>
<ul>
<li><strong>改</strong>：then函数里new一个Promise并作为then函数返回值</li>
<li><strong>改</strong>：用queueMicrotask（）实现then的异步微任务</li>
<li><strong>增</strong>：用一个resolvePromise函数进行then函数返回值 判断、处理，同时用try-catch捕获异常</li>
<li><strong>增</strong>：resolvePromise函数里要判断 <u>then 方法返回了自己的 Promise 对象</u></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 MyPromise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//🌙 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">        <span class="comment">// ⭐ 箭头函数中的 this 会自动捕获&quot;定义时&quot;外层最近的上下文环境，而非运行时绑定，所以事实上this指向是第一个promise，而不是promise2</span></span><br><span class="line">		<span class="keyword">let</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 判断状态</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">					<span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">					<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">					resolvePromise(x, resolve, reject);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">					reject(error)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">try</span> &#123;</span><br><span class="line">					<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">					<span class="keyword">const</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">					<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">					resolvePromise(x, resolve, reject);</span><br><span class="line">				&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">					reject(error)</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">                </span><br><span class="line">				<span class="comment">//🌙  因为不知道后面状态的变化情况，所以将成功回调存储起来</span></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">						<span class="keyword">const</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise(x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;);</span><br><span class="line">				</span><br><span class="line">                <span class="comment">//🌙  因为不知道后面状态的变化情况，所以将失败回调存储起来</span></span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallbacks.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">						<span class="keyword">const</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise( x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;);</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> promise2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//🌙</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">x, resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断x是不是 MyPromise 实例对象</span></span><br><span class="line">	<span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">         <span class="comment">// 如果返回值是Promise</span></span><br><span class="line">         <span class="comment">// 如果返回值是promise对象，返回值为成功，新promise就是成功</span></span><br><span class="line">         <span class="comment">// 如果返回值是promise对象，返回值为失败，新promise就是失败</span></span><br><span class="line">         <span class="comment">// 谁知道返回的promise是失败成功？只有then知道，所以就让then帮我们执行resolve或者reject函数</span></span><br><span class="line">		x.then(resolve, reject)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 普通值</span></span><br><span class="line">		resolve(x)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样子足够了吗？这样子测试的时候会报错</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot access &#x27;p1&#x27; before initialization</span><br></pre></td></tr></table></figure>

<p>为啥会报错呢？从错误提示可以看出，我们必须要等 promise2 完成初始化。这个时候我们就要用上宏微任务和事件循环的知识了，这里就需要创建一个异步函数去等待 promise2 完成初始化，前面我们已经确认了创建微任务的技术方案 –&gt; <code>queueMicrotask</code></p>
<p>于是像这样子改</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">        <span class="comment">//🌙</span></span><br><span class="line">        <span class="comment">// 创建一个微任务等待 promise2 完成初始化</span></span><br><span class="line">        queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">          <span class="keyword">const</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">          <span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">          resolvePromise(x, resolve, reject);</span><br><span class="line">        &#125;)  </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">      ......</span><br><span class="line">    &#125;) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> promise2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样子足够了吗？没有，如下方例子</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> p1 = promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">  <span class="keyword">return</span> p1</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>如果 then 方法返回的是自己的 Promise 对象，则会发生循环调用，这个时候程序会报错</p>
<p>因此我们要把promise2一起传进去resolvePromise函数中，如果x==promise2，说明出现这种情况</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">	<span class="comment">//如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">    <span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终代码如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 MyPromise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">		<span class="built_in">this</span>.status = PENDING;</span><br><span class="line">		<span class="comment">// 成功之后的值</span></span><br><span class="line">		<span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 失败之后的原因</span></span><br><span class="line">		<span class="built_in">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 存储成功回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onFulfilledCallback = [];</span><br><span class="line">		<span class="comment">// 存储失败回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onRejectedCallback = [];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">		<span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">		<span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改成功后的状态</span></span><br><span class="line">		<span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态修改为成功</span></span><br><span class="line">				<span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">				<span class="comment">// 保存成功之后的值</span></span><br><span class="line">				<span class="built_in">this</span>.value = value;</span><br><span class="line">				<span class="comment">// 判断成功回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(value));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改失败后的状态</span></span><br><span class="line">		<span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态成功为失败</span></span><br><span class="line">				<span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">				<span class="comment">// 保存失败后的原因</span></span><br><span class="line">				<span class="built_in">this</span>.reason = reason;</span><br><span class="line">				<span class="comment">// 判断失败回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(reason));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果executor执行报错，直接执行reject</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			executor(resolve, reject);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			reject(err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//🌙 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">		<span class="keyword">let</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 判断状态</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">				queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">						<span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">				queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">						<span class="keyword">const</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 🌙</span></span><br><span class="line">				<span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">				<span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line"></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="comment">// 🌙</span></span><br><span class="line">					queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							<span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">							<span class="keyword">const</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">							<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">							resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">						&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">							reject(error)</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;);</span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="comment">// 🌙</span></span><br><span class="line">					queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">							<span class="keyword">const</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">							<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">							resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">						&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">							reject(error)</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> promise2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">	<span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">		<span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断x是不是 Promise 实例对象</span></span><br><span class="line">	<span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">		<span class="comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span></span><br><span class="line">		<span class="comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">		<span class="comment">// 简化之后</span></span><br><span class="line">		x.then(resolve, reject)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 普通值</span></span><br><span class="line">		resolve(x)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-5-第五版：实现then参数默认函数、catch方法"><a href="#5-2-5-第五版：实现then参数默认函数、catch方法" class="headerlink" title="5.2.5 第五版：实现then参数默认函数、catch方法"></a>5.2.5 第五版：实现then参数默认函数、catch方法</h3><p>原生 Promise 是可以选择参数的单传或者不传，都不会影响执行，像这样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="number">100</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then()</span><br><span class="line">  .then()</span><br><span class="line">  .then()</span><br><span class="line">  .then(<span class="function"><span class="params">value</span> =&gt;</span> <span class="built_in">console</span>.log(value))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预期输出： 100</span></span><br><span class="line"><span class="comment">// 实际输出： </span></span><br></pre></td></tr></table></figure>

<p>所以我们需要对 then 方法做一点小小的调整</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 如果不传，就使用默认函数</span></span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">  <span class="keyword">const</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 MyPromise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">		<span class="built_in">this</span>.status = PENDING;</span><br><span class="line">		<span class="comment">// 成功之后的值</span></span><br><span class="line">		<span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 失败之后的原因</span></span><br><span class="line">		<span class="built_in">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 存储成功回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onFulfilledCallback = [];</span><br><span class="line">		<span class="comment">// 存储失败回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onRejectedCallback = [];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">		<span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">		<span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改成功后的状态</span></span><br><span class="line">		<span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态修改为成功</span></span><br><span class="line">				<span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">				<span class="comment">// 保存成功之后的值</span></span><br><span class="line">				<span class="built_in">this</span>.value = value;</span><br><span class="line">				<span class="comment">// 判断成功回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(value));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改失败后的状态</span></span><br><span class="line">		<span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态成功为失败</span></span><br><span class="line">				<span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">				<span class="comment">// 保存失败后的原因</span></span><br><span class="line">				<span class="built_in">this</span>.reason = reason;</span><br><span class="line">				<span class="comment">// 判断失败回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(reason));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果executor执行报错，直接执行reject</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			executor(resolve, reject);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			reject(err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 如果不传，就使用默认函数</span></span><br><span class="line">		onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">		onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;<span class="keyword">throw</span> reason&#125;;</span><br><span class="line">		<span class="comment">//🌙 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">		<span class="keyword">let</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 判断状态</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">				queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">						<span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">				queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">						<span class="keyword">const</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 🌙</span></span><br><span class="line">				<span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">				<span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line"></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="comment">// 🌙</span></span><br><span class="line">					queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							<span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">							<span class="keyword">const</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">							<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">							resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">						&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">							reject(error)</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;);</span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback.push(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="comment">// 🌙</span></span><br><span class="line">					queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">						<span class="keyword">try</span> &#123;</span><br><span class="line">							<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">							<span class="keyword">const</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">							<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">							resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">						&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">							reject(error)</span><br><span class="line">						&#125;</span><br><span class="line"></span><br><span class="line">					&#125;)</span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> promise2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">	<span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">		<span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断x是不是 Promise 实例对象</span></span><br><span class="line">	<span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">		<span class="comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span></span><br><span class="line">		<span class="comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">		<span class="comment">// 简化之后</span></span><br><span class="line">		x.then(resolve, reject)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 普通值</span></span><br><span class="line">		resolve(x)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>catch方法很简单啦</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">catch</span>(onRejected)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对，就是这么几行，catch 原本就是 then 方法的语法糖。</p>
<h3 id="5-2-6-第六版：规整代码"><a href="#5-2-6-第六版：规整代码" class="headerlink" title="5.2.6 第六版：规整代码"></a>5.2.6 第六版：规整代码</h3><p>上面的代码有些冗余，我们规整一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 先定义三个常量表示状态</span></span><br><span class="line"><span class="keyword">const</span> PENDING = <span class="string">&#x27;pending&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">&#x27;fulfilled&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">&#x27;rejected&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建 MyPromise 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 储存状态的变量，初始值是 pending</span></span><br><span class="line">		<span class="built_in">this</span>.status = PENDING;</span><br><span class="line">		<span class="comment">// 成功之后的值</span></span><br><span class="line">		<span class="built_in">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">		<span class="comment">// 失败之后的原因</span></span><br><span class="line">		<span class="built_in">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 存储成功回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onFulfilledCallback = [];</span><br><span class="line">		<span class="comment">// 存储失败回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.onRejectedCallback = [];</span><br><span class="line"></span><br><span class="line">		<span class="comment">// resolve和reject为什么要用箭头函数？</span></span><br><span class="line">		<span class="comment">// 如果直接调用的话，普通函数this指向的是window或者undefined</span></span><br><span class="line">		<span class="comment">// 用箭头函数就可以让this指向当前实例对象</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改成功后的状态</span></span><br><span class="line">		<span class="keyword">let</span> resolve = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态修改为成功</span></span><br><span class="line">				<span class="built_in">this</span>.status = FULFILLED;</span><br><span class="line">				<span class="comment">// 保存成功之后的值</span></span><br><span class="line">				<span class="built_in">this</span>.value = value;</span><br><span class="line">				<span class="comment">// 判断成功回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(value));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 更改失败后的状态</span></span><br><span class="line">		<span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">// 只有状态是等待，才执行状态修改</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 状态成功为失败</span></span><br><span class="line">				<span class="built_in">this</span>.status = REJECTED;</span><br><span class="line">				<span class="comment">// 保存失败后的原因</span></span><br><span class="line">				<span class="built_in">this</span>.reason = reason;</span><br><span class="line">				<span class="comment">// 判断失败回调是否存在，如果存在就调用</span></span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback.forEach(<span class="function">(<span class="params">callback</span>) =&gt;</span> callback(reason));</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 如果executor执行报错，直接执行reject</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			executor(resolve, reject);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">			reject(err);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 如果不传，就使用默认函数</span></span><br><span class="line">		onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">		onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function"><span class="params">reason</span> =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//🌙 为了链式调用这里直接创建一个 MyPromise，并在后面 return 出去</span></span><br><span class="line">		<span class="keyword">let</span> promise2 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">			<span class="comment">//🌙成功的回调</span></span><br><span class="line">			<span class="keyword">let</span> fulfilledMicrotask = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">				queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 获取成功回调函数的执行结果</span></span><br><span class="line">						<span class="keyword">let</span> x = onFulfilled(<span class="built_in">this</span>.value);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line"></span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">			<span class="comment">//🌙失败回调</span></span><br><span class="line">			<span class="keyword">let</span> rejectedMicrotask = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">				queueMicrotask(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						<span class="comment">// 调用失败回调，并且把原因返回</span></span><br><span class="line">						<span class="keyword">let</span> x = onRejected(<span class="built_in">this</span>.reason);</span><br><span class="line">						<span class="comment">// 传入 resolvePromise 集中处理</span></span><br><span class="line">						resolvePromise(promise2, x, resolve, reject);</span><br><span class="line">					&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">						reject(error)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// 判断状态</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">this</span>.status === FULFILLED) &#123;</span><br><span class="line">				fulfilledMicrotask()</span><br><span class="line"></span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === REJECTED) &#123;</span><br><span class="line">				rejectedMicrotask()</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.status === PENDING) &#123;</span><br><span class="line">				<span class="comment">// 🌙</span></span><br><span class="line">				<span class="comment">// 因为不知道后面状态的变化情况，所以将成功回调和失败回调存储起来</span></span><br><span class="line">				<span class="comment">// 等到执行成功失败函数的时候再传递</span></span><br><span class="line"></span><br><span class="line">				<span class="built_in">this</span>.onFulfilledCallback.push(fulfilledMicrotask);</span><br><span class="line">				<span class="built_in">this</span>.onRejectedCallback.push(rejectedMicrotask);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;)</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> promise2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">catch</span> (onRejected) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.then(<span class="literal">null</span>, onRejected);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">	<span class="keyword">if</span> (promise2 === x) &#123;</span><br><span class="line">		<span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span>))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 判断x是不是 Promise 实例对象</span></span><br><span class="line">	<span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123;</span><br><span class="line">		<span class="comment">// 执行 x，调用 then 方法，目的是将其状态变为 fulfilled 或者 rejected</span></span><br><span class="line">		<span class="comment">// x.then(value =&gt; resolve(value), reason =&gt; reject(reason))</span></span><br><span class="line">		<span class="comment">// 简化之后</span></span><br><span class="line">		x.then(resolve, reject)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 普通值</span></span><br><span class="line">		resolve(x)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-2-7-第七版：符合A-规范版本"><a href="#5-2-7-第七版：符合A-规范版本" class="headerlink" title="5.2.7  第七版：符合A+规范版本"></a>5.2.7  第七版：符合A+规范版本</h3><p>咱们上面写的resolvePromise（）并不符合Promise A+ 规范，详细的规范如下</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202111161200140.png" alt="image-20211116115959924" style="zoom: 67%;" />

<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 如果相等了，说明return的是自己，抛出类型错误并返回</span></span><br><span class="line">  <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;The promise and the return value are the same&#x27;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// x 为 null 直接返回，走后面的逻辑会报错</span></span><br><span class="line">    <span class="keyword">if</span> (x === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> then;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 把 x.then 赋值给 then </span></span><br><span class="line">      then = x.then;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 如果取 x.then 的值时抛出错误 error ，则以 error 为据因拒绝 promise</span></span><br><span class="line">      <span class="keyword">return</span> reject(error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 then 是函数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        then.call(</span><br><span class="line">          x, <span class="comment">// this 指向 x</span></span><br><span class="line">          <span class="comment">// 如果 resolvePromise 以值 y 为参数被调用，则运行 [[Resolve]](promise, y)</span></span><br><span class="line">          <span class="function"><span class="params">y</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果 resolvePromise 和 rejectPromise 均被调用，</span></span><br><span class="line">            <span class="comment">// 或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</span></span><br><span class="line">            <span class="comment">// 实现这条需要前面加一个变量 called</span></span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            resolvePromise(promise, y, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise</span></span><br><span class="line">          <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(r);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 如果调用 then 方法抛出了异常 error：</span></span><br><span class="line">        <span class="comment">// 如果 resolvePromise 或 rejectPromise 已经被调用，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 否则以 error 为据因拒绝 promise</span></span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果 then 不是函数，以 x 为参数执行 promise</span></span><br><span class="line">      resolve(x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 x 不为对象或者函数，以 x 为参数执行 promise</span></span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这会儿咱们再来测试一下。</p>
<p>首先下载测试包</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install promises-aplus-tests -D</span><br></pre></td></tr></table></figure>

<p>然后修改代码，加入 deferred</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyPromise.js</span></span><br><span class="line"></span><br><span class="line">MyPromise &#123;</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPromise.deferred = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  result.promise = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    result.resolve = resolve;</span><br><span class="line">    result.reject = reject;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = MyPromise;</span><br></pre></td></tr></table></figure>

<p>然后在package.json里配置命令，记得要把Mypromise.js放在根目录下</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;promises-aplus-tests MyPromise&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后就可以运行测试了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>结果如下，872项测试均通过</p>
<img data-src="https://gitee.com/monkey-HH/picBed/raw/master/picbed/img/202111161312705.png" alt="image-20211116131251628" style="zoom: 67%;" />



<h2 id="5-2-实现Promise的-resolve、reject-和-finally"><a href="#5-2-实现Promise的-resolve、reject-和-finally" class="headerlink" title="5.2 实现Promise的 resolve、reject 和 finally"></a>5.2 实现Promise的 resolve、reject 和 finally</h2><h3 id="实现-Promise-resolve"><a href="#实现-Promise-resolve" class="headerlink" title="实现 Promise.resolve"></a>实现 Promise.resolve</h3><p>实现 resolve 静态方法有三个要点:</p>
<ul>
<li>传参为一个 Promise, 则直接返回它。</li>
<li>传参为一个 thenable 对象，返回的 Promise 会跟随这个对象，<code>采用它的最终状态</code>作为<code>自己的状态</code>。</li>
<li>其他情况，直接返回以该值为成功状态的promise对象。</li>
</ul>
<p>具体实现如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve = <span class="function">(<span class="params">param</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(param <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) <span class="keyword">return</span> param;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(param &amp;&amp; param.then &amp;&amp; <span class="keyword">typeof</span> param.then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// param 状态变为成功会调用resolve，将新 Promise 的状态变为成功，反之亦然</span></span><br><span class="line">      param.then(resolve, reject);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(param);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现-Promise-reject"><a href="#实现-Promise-reject" class="headerlink" title="实现 Promise.reject"></a>实现 Promise.reject</h3><p>Promise.reject 中传入的参数会作为一个 reason 原封不动地往下传, 实现如下:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        reject(reason);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现-Promise-prototype-finally"><a href="#实现-Promise-prototype-finally" class="headerlink" title="实现 Promise.prototype.finally"></a>实现 Promise.prototype.finally</h3><p>无论当前 Promise 是成功还是失败，调用<code>finally</code>之后都会执行 finally 中传入的函数，并且将值原封不动的往下传。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> value;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(callback()).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="5-3-实现Promise的-all-和-race"><a href="#5-3-实现Promise的-all-和-race" class="headerlink" title="5.3 实现Promise的 all 和 race"></a>5.3 实现Promise的 all 和 race</h2><h3 id="实现-Promise-all"><a href="#实现-Promise-all" class="headerlink" title="实现 Promise.all"></a>实现 Promise.all</h3><p>对于 all 方法而言，需要完成下面的核心功能:</p>
<ol>
<li>传入参数为一个空的可迭代对象，则<code>直接进行resolve</code>。</li>
<li>如果参数中<code>有一个</code>promise失败，那么Promise.all返回的promise对象失败。</li>
<li>在任何情况下，Promise.all 返回的 promise 的完成状态的结果都是一个<code>数组</code></li>
</ol>
<p>具体实现如下:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> len = promises.length;</span><br><span class="line">    <span class="keyword">if</span>(len === <span class="number">0</span>) &#123;</span><br><span class="line">      resolve(result);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">// 为什么不直接 promise[i].then, 因为promise[i]可能不是一个promise</span></span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promise[i]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        result[i] = data;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span>(index === len) resolve(result);</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h3 id="实现-Promise-race"><a href="#实现-Promise-race" class="headerlink" title="实现 Promise.race"></a>实现 Promise.race</h3><p>race 的实现相比之下就简单一些，只要有一个 promise 执行完，直接 resolve 并停止执行。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.race = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> len = promises.length;</span><br><span class="line">    <span class="keyword">if</span>(len === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="built_in">Promise</span>.resolve(promise[i]).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>到此为止，一个完整的 Promise 就被我们实现完啦。从原理到细节，我们一步步拆解和实现，希望大家在知道 Promise 设计上的几大亮点之后，也能自己手动实现一个Promise，让自己的思维层次和动手能力更上一层楼！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><span class="exturl" data-url="aHR0cHM6Ly93YW5nZG9jLmNvbS9lczYvcHJvbWlzZS5odG1s">Promise 对象</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjI1NzY5MDkxMDc5">BAT前端经典面试问题：史上最最最详细的手写Promise教程</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDA0MDA3MjQ3ODgw">原生JS灵魂之问(下), 冲刺🚀进阶最后一公里</span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQ1MzE5NDM5NzcyNDM0NDY5I2hlYWRpbmctMw==">从一道让我失眠的 Promise 面试题开始，深入分析 Promise 实现细节</span></li>
</ol>

      <div class="tags">
          <a href="/tags/JavaScript/" rel="tag"><i class="ic i-tag"></i> JavaScript</a>
      </div>
  </div>

   <footer>

    <div class="meta">
  <span class="item">
    <span class="icon">
      <i class="ic i-calendar-check"></i>
    </span>
    <span class="text">Edited on</span>
    <time title="Modified: 2021-12-28 10:19:47" itemprop="dateModified" datetime="2021-12-28T10:19:47+08:00">2021-12-28</time>
  </span>
  <span id="FrontEnd/JavaScript/FrontEnd/JavaScript/【手撕JavaScript系列】Promise介绍以及实现一个Promise" class="item leancloud_visitors" data-flag-title="【手撕JavaScript系列】Promise介绍以及实现一个Promise" title="Views">
      <span class="icon">
        <i class="ic i-eye"></i>
      </span>
      <span class="text">Views</span>
      <span class="leancloud-visitors-count"></span>
      <span class="text">times</span>
  </span>
</div>

      

<div id="copyright">
<ul>
  <li class="author">
    <strong>Post author:  </strong>Monkey-HH <i class="ic i-at"><em>@</em></i>
  </li>
  <li class="link">
    <strong>Post link: </strong>
    <a href="https://monkeyhh.top/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91Promise%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAPromise" title="【手撕JavaScript系列】Promise介绍以及实现一个Promise">https://monkeyhh.top/FrontEnd/JavaScript/FrontEnd/JavaScript/【手撕JavaScript系列】Promise介绍以及实现一个Promise</a>
  </li>
  <li class="license">
    <strong>Copyright Notice:  </strong>All articles in this blog are licensed under <span class="exturl" data-url="aHR0cHM6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LW5jLXNhLzQuMC9kZWVkLnpo"><i class="ic i-creative-commons"><em>(CC)</em></i>BY-NC-SA</span> unless stating additionally.
  </li>
</ul>
</div>

  </footer>

</article>

  </div>
  

<div class="post-nav">
    <div class="item left">
      

  <a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91this%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81bind%E3%80%81apply" itemprop="url" rel="prev" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;monkey-HH&#x2F;picBed&#x2F;raw&#x2F;master&#x2F;picbed&#x2F;img&#x2F;202109201019726.png" title="【手撕JavaScript系列】this原理以及模拟实现call、bind、apply">
  <span class="type">Previous Post</span>
  <span class="category"><i class="ic i-flag"></i> JavaScript</span>
  <h3>【手撕JavaScript系列】this原理以及模拟实现call、bind、apply</h3>
  </a>

    </div>
    <div class="item right">
      

  <a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91Event%20Loop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" itemprop="url" rel="next" data-background-image="https:&#x2F;&#x2F;gitee.com&#x2F;monkey-HH&#x2F;picBed&#x2F;raw&#x2F;master&#x2F;picbed&#x2F;img&#x2F;202109201018875.jpg" title="【V8引擎原理篇】Event Loop事件循环机制">
  <span class="type">Next Post</span>
  <span class="category"><i class="ic i-flag"></i> Browser</span>
  <h3>【V8引擎原理篇】Event Loop事件循环机制</h3>
  </a>

    </div>
</div>

  
  <div class="wrap" id="comments"></div>


        </div>
        <div id="sidebar">
          

<div class="inner">

  <div class="panels">
    <div class="inner">
      <div class="contents panel pjax" data-title="Contents">
          <ol class="toc"><li class="toc-item toc-level-1"><a class="toc-link" href="#1-Promise%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F"><span class="toc-number">1.</span> <span class="toc-text">1.Promise是什么？</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#2-Promise%E7%9A%84%E7%89%B9%E7%82%B9"><span class="toc-number">2.</span> <span class="toc-text">2. Promise的特点</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#3-%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%A4%BA%E4%BE%8B"><span class="toc-number">3.</span> <span class="toc-text">3. 一个小示例</span></a></li><li class="toc-item toc-level-1"><a class="toc-link" href="#4-Promise%E5%B8%B8%E7%94%A8API"><span class="toc-number">4.</span> <span class="toc-text">4.Promise常用API</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#1-Promise-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0-Promise-executor"><span class="toc-number">4.0.1.</span> <span class="toc-text">1. Promise 构造函数: Promise (executor) {}</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#2-Promise-prototype-then-%E6%96%B9%E6%B3%95-onResolved-onRejected-gt"><span class="toc-number">4.0.2.</span> <span class="toc-text">2. Promise.prototype.then 方法: (onResolved, onRejected) &#x3D;&gt; {}</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#3-Promise-prototype-catch-%E6%96%B9%E6%B3%95%EF%BC%9A-onRejected-gt"><span class="toc-number">4.0.3.</span> <span class="toc-text">3.Promise.prototype.catch()方法： (onRejected) &#x3D;&gt; {}</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-Promise-prototype-finally"><span class="toc-number">4.0.4.</span> <span class="toc-text">4. Promise.prototype.finally()</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-Promise-resolve-value-%E8%AF%A6%E8%A7%A3"><span class="toc-number">4.0.5.</span> <span class="toc-text">5.Promise.resolve(value)详解</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#6-Promise-reject-reason-%E8%AF%A6%E8%A7%A3"><span class="toc-number">4.0.6.</span> <span class="toc-text">6.Promise.reject(reason)详解</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#7-Promise-all"><span class="toc-number">4.0.7.</span> <span class="toc-text">7.Promise.all()</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#8-Promise-race"><span class="toc-number">4.0.8.</span> <span class="toc-text">8.Promise.race()</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#9-Promise-allSettled"><span class="toc-number">4.0.9.</span> <span class="toc-text">9.Promise.allSettled()</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#10-Promise-any"><span class="toc-number">4.0.10.</span> <span class="toc-text">10.Promise.any()</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#5-%E6%89%8B%E6%92%95Promise%E7%B3%BB%E5%88%97"><span class="toc-number">5.</span> <span class="toc-text">5. 手撕Promise系列</span></a><ol class="toc-child"><li class="toc-item toc-level-2"><a class="toc-link" href="#5-1-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86"><span class="toc-number">5.1.</span> <span class="toc-text">5.1 预备知识</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-2-%E6%89%8B%E6%92%95Promise"><span class="toc-number">5.2.</span> <span class="toc-text">5.2 手撕Promise</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#5-2-1-%E7%AC%AC%E4%B8%80%E7%89%88%EF%BC%9A%E7%AE%80%E5%8D%95%E6%A1%86%E6%9E%B6"><span class="toc-number">5.2.1.</span> <span class="toc-text">5.2.1 第一版：简单框架</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-2-2-%E7%AC%AC%E4%BA%8C%E7%89%88%EF%BC%9A%E5%8A%A0%E5%85%A5%E5%BC%82%E6%AD%A5%E9%80%BB%E8%BE%91"><span class="toc-number">5.2.2.</span> <span class="toc-text">5.2.2 第二版：加入异步逻辑</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-2-3-%E7%AC%AC%E4%B8%89%E7%89%88%EF%BC%9A%E5%AE%9E%E7%8E%B0then%E6%96%B9%E6%B3%95%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8"><span class="toc-number">5.2.3.</span> <span class="toc-text">5.2.3 第三版：实现then方法多次调用</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-2-4-%E7%AC%AC%E5%9B%9B%E7%89%88%EF%BC%9A%E5%AE%9E%E7%8E%B0then%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8"><span class="toc-number">5.2.4.</span> <span class="toc-text">5.2.4 第四版：实现then链式调用</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-2-5-%E7%AC%AC%E4%BA%94%E7%89%88%EF%BC%9A%E5%AE%9E%E7%8E%B0then%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%87%BD%E6%95%B0%E3%80%81catch%E6%96%B9%E6%B3%95"><span class="toc-number">5.2.5.</span> <span class="toc-text">5.2.5 第五版：实现then参数默认函数、catch方法</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-2-6-%E7%AC%AC%E5%85%AD%E7%89%88%EF%BC%9A%E8%A7%84%E6%95%B4%E4%BB%A3%E7%A0%81"><span class="toc-number">5.2.6.</span> <span class="toc-text">5.2.6 第六版：规整代码</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#5-2-7-%E7%AC%AC%E4%B8%83%E7%89%88%EF%BC%9A%E7%AC%A6%E5%90%88A-%E8%A7%84%E8%8C%83%E7%89%88%E6%9C%AC"><span class="toc-number">5.2.7.</span> <span class="toc-text">5.2.7  第七版：符合A+规范版本</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-2-%E5%AE%9E%E7%8E%B0Promise%E7%9A%84-resolve%E3%80%81reject-%E5%92%8C-finally"><span class="toc-number">5.3.</span> <span class="toc-text">5.2 实现Promise的 resolve、reject 和 finally</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%9E%E7%8E%B0-Promise-resolve"><span class="toc-number">5.3.1.</span> <span class="toc-text">实现 Promise.resolve</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%9E%E7%8E%B0-Promise-reject"><span class="toc-number">5.3.2.</span> <span class="toc-text">实现 Promise.reject</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%9E%E7%8E%B0-Promise-prototype-finally"><span class="toc-number">5.3.3.</span> <span class="toc-text">实现 Promise.prototype.finally</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#5-3-%E5%AE%9E%E7%8E%B0Promise%E7%9A%84-all-%E5%92%8C-race"><span class="toc-number">5.4.</span> <span class="toc-text">5.3 实现Promise的 all 和 race</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%9E%E7%8E%B0-Promise-all"><span class="toc-number">5.4.1.</span> <span class="toc-text">实现 Promise.all</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#%E5%AE%9E%E7%8E%B0-Promise-race"><span class="toc-number">5.4.2.</span> <span class="toc-text">实现 Promise.race</span></a></li></ol></li></ol></li><li class="toc-item toc-level-1"><a class="toc-link" href="#%E5%8F%82%E8%80%83"><span class="toc-number">6.</span> <span class="toc-text">参考</span></a></li></ol>
      </div>
      <div class="related panel pjax" data-title="Related">
        <ul>
          <li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/jQuery%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%85%A5%E9%97%A8" rel="bookmark" title="jQuery基础知识入门">jQuery基础知识入门</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85" rel="bookmark" title="JavaScript作用域与闭包">JavaScript作用域与闭包</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B" rel="bookmark" title="JavaScript中的变量类型">JavaScript中的变量类型</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%EF%BC%88BOM%EF%BC%89" rel="bookmark" title="JavaScript中的浏览器对象模型（BOM）">JavaScript中的浏览器对象模型（BOM）</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E5%8E%9F%E5%BD%A2%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE" rel="bookmark" title="JavaScript原型与原型链">JavaScript原型与原型链</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%BA%8B%E4%BB%B6" rel="bookmark" title="JavaScript事件">JavaScript事件</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%ADDOM%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93" rel="bookmark" title="JavaScript中DOM操作总结">JavaScript中DOM操作总结</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96" rel="bookmark" title="JavaScript中的前端模块化">JavaScript中的前端模块化</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87" rel="bookmark" title="JavaScript执行上下文">JavaScript执行上下文</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E5%B8%B8%E7%94%A8%E7%BB%A7%E6%89%BF%E6%96%B9%E6%A1%88" rel="bookmark" title="JavaScript常用继承方案">JavaScript常用继承方案</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D" rel="bookmark" title="【手撕JavaScript系列】JavaScript中的浅拷贝和深拷贝">【手撕JavaScript系列】JavaScript中的浅拷贝和深拷贝</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/axios%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%A5%E9%97%A8" rel="bookmark" title="axios基础知识点入门">axios基础知识点入门</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91this%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81bind%E3%80%81apply" rel="bookmark" title="【手撕JavaScript系列】this原理以及模拟实现call、bind、apply">【手撕JavaScript系列】this原理以及模拟实现call、bind、apply</a></li><li class="active"><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91Promise%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAPromise" rel="bookmark" title="【手撕JavaScript系列】Promise介绍以及实现一个Promise">【手撕JavaScript系列】Promise介绍以及实现一个Promise</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81" rel="bookmark" title="【手撕JavaScript系列】JavaScript中的防抖与节流">【手撕JavaScript系列】JavaScript中的防抖与节流</a></li><li><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%96%B9%E6%A1%88" rel="bookmark" title="JavaScript中的异步编程方案">JavaScript中的异步编程方案</a></li>
        </ul>
      </div>
      <div class="overview panel" data-title="Overview">
        <div class="author" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <img class="image" itemprop="image" alt="Monkey-HH"
      data-src="/images/avatar.jpg">
  <p class="name" itemprop="name">Monkey-HH</p>
  <div class="description" itemprop="description">Learn, share, make progress</div>
</div>

<nav class="state">
    <div class="item posts">
      <a href="/archives/">
        <span class="count">54</span>
        <span class="name">posts</span>
      </a>
    </div>
    <div class="item categories">
      <a href="/categories/">
        <span class="count">18</span>
        <span class="name">categories</span>
      </a>
    </div>
    <div class="item tags">
      <a href="/tags/">
        <span class="count">23</span>
        <span class="name">tags</span>
      </a>
    </div>
</nav>

<div class="social">
      <span class="exturl item github" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbmtleS1ISA==" title="https:&#x2F;&#x2F;github.com&#x2F;monkey-HH"><i class="ic i-github"></i></span>
      <span class="exturl item email" data-url="bWFpbHRvOmhoanNjYXVAMTYzLmNvbQ==" title="mailto:hhjscau@163.com"><i class="ic i-envelope"></i></span>
</div>

<ul class="menu">
  
    
  <li class="item">
    <a href="/" rel="section"><i class="ic i-home"></i>Home</a>
  </li>

        
  <li class="item dropdown">
      <a href="javascript:void(0);"><i class="ic i-feather"></i>Posts</a>
    <ul class="submenu">

        
  <li class="item">
    <a href="/categories/" rel="section"><i class="ic i-th"></i>Categories</a>
  </li>

        
  <li class="item">
    <a href="/tags/" rel="section"><i class="ic i-tags"></i>Tags</a>
  </li>

  </ul>
    
  <li class="item">
    <a href="/friends/" rel="section"><i class="ic i-heart"></i>Friends</a>
  </li>

    
  <li class="item">
    <a href="/about/" rel="section"><i class="ic i-user"></i>About</a>
  </li>

    
  <li class="item">
    <a href="/links/" rel="section"><i class="ic i-magic"></i>Links</a>
  </li>


</ul>

      </div>
    </div>
  </div>

  <ul id="quick">
    <li class="prev pjax">
        <a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91this%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0call%E3%80%81bind%E3%80%81apply" rel="prev" title="Previous Post"><i class="ic i-chevron-left"></i></a>
    </li>
    <li class="up"><i class="ic i-arrow-up"></i></li>
    <li class="down"><i class="ic i-arrow-down"></i></li>
    <li class="next pjax">
        <a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91Event%20Loop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" rel="next" title="Next Post"><i class="ic i-chevron-right"></i></a>
    </li>
    <li class="percent"></li>
  </ul>
</div>


        </div>
        <div class="dimmer"></div>
      </div>
    </main>
    <footer id="footer">
      <div class="inner">
        <div class="widgets">
          
<div class="rpost pjax">
  <h2>Random Posts</h2>
  <ul>
      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91JavaScript%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" title="【V8引擎原理篇】JavaScript事件循环机制">【V8引擎原理篇】JavaScript事件循环机制</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/React/" title="In React">React</a>
</div>

    <span><a href="/FrontEnd/React/FrontEnd/React/%E3%80%90React%E5%9F%BA%E7%A1%80%E3%80%91Virtual%20DOM%E4%B8%8EDiff%E7%AE%97%E6%B3%95%E5%88%9D%E8%AF%86" title="【React基础】Virtual DOM与Diff算法初识">【React基础】Virtual DOM与Diff算法初识</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8" title="浏览器中的客户端存储">浏览器中的客户端存储</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%AD%E7%9A%84%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96" title="JavaScript中的前端模块化">JavaScript中的前端模块化</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Vue/" title="In Vue">Vue</a>
</div>

    <span><a href="/FrontEnd/Vue/FrontEnd/Vue/%E3%80%90Vue%E8%BF%9B%E9%98%B6%E3%80%91%E6%B5%85%E8%B0%88Vue2%E4%B8%8EVue3%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86" title="【Vue进阶】浅谈Vue2与Vue3响应式原理">【Vue进阶】浅谈Vue2与Vue3响应式原理</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91Event%20Loop%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E6%9C%BA%E5%88%B6" title="【V8引擎原理篇】Event Loop事件循环机制">【V8引擎原理篇】Event Loop事件循环机制</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/Browser/" title="In Browser">Browser</a>
</div>

    <span><a href="/FrontEnd/Browser/FrontEnd/Browser/%E3%80%90V8%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86%E7%AF%87%E3%80%91V8%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E5%88%86%E6%9E%90" title="【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析">【V8引擎原理篇】V8的内存管理与垃圾回收机制及内存泄漏分析</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/%E3%80%90%E6%89%8B%E6%92%95JavaScript%E7%B3%BB%E5%88%97%E3%80%91JavaScript%E4%B8%AD%E7%9A%84%E6%B5%85%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B7%B1%E6%8B%B7%E8%B4%9D" title="【手撕JavaScript系列】JavaScript中的浅拷贝和深拷贝">【手撕JavaScript系列】JavaScript中的浅拷贝和深拷贝</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/JavaScript%E4%B8%ADDOM%E6%93%8D%E4%BD%9C%E6%80%BB%E7%BB%93" title="JavaScript中DOM操作总结">JavaScript中DOM操作总结</a></span>
  </li>

      
  <li class="item">
    
<div class="breadcrumb">
<a href="/categories/FrontEnd/" title="In FrontEnd">FrontEnd</a>
<i class="ic i-angle-right"></i>
<a href="/categories/FrontEnd/JavaScript/" title="In JavaScript">JavaScript</a>
</div>

    <span><a href="/FrontEnd/JavaScript/FrontEnd/JavaScript/axios%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E5%85%A5%E9%97%A8" title="axios基础知识点入门">axios基础知识点入门</a></span>
  </li>

  </ul>
</div>
<div>
  <h2>Recent Comments</h2>
  <ul class="leancloud-recent-comment"></ul>
</div>

        </div>
        <div class="status">
  <div class="copyright">
    
    &copy; 2021 – 
    <span itemprop="copyrightYear">2022</span>
    <span class="with-love">
      <i class="ic i-sakura rotate"></i>
    </span>
    <span class="author" itemprop="copyrightHolder">Monkey-HH @ Monkey's Blog</span>
  </div>
  <div class="count">
    <span class="post-meta-item-icon">
      <i class="ic i-chart-area"></i>
    </span>
    <span title="Symbols count total">774k words</span>

    <span class="post-meta-divider">|</span>
    <span class="post-meta-item-icon">
      <i class="ic i-coffee"></i>
    </span>
    <span title="Reading time total">11:43</span>
  </div>
  <div class="powered-by">
    Powered by <span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlv">Hexo</span> & Theme.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==">Shoka</span>
  </div>
</div>

      </div>
    </footer>
  </div>
<script data-config type="text/javascript">
  var LOCAL = {
    path: 'FrontEnd/JavaScript/FrontEnd/JavaScript/【手撕JavaScript系列】Promise介绍以及实现一个Promise',
    favicon: {
      show: "（●´3｀●）Goooood",
      hide: "(´Д｀)Booooom"
    },
    search : {
      placeholder: "Search for Posts",
      empty: "We didn't find any results for the search: ${query}",
      stats: "${hits} results found in ${time} ms"
    },
    valine: true,fancybox: true,copyright: 'Copied to clipboard successfully! <br> All articles in this blog are licensed under <i class="ic i-creative-commons"></i>BY-NC-SA.',
    ignores : [
      function(uri) {
        return uri.includes('#');
      },
      function(uri) {
        return new RegExp(LOCAL.path+"$").test(uri);
      }
    ]
  };
</script>

<script src="https://cdn.polyfill.io/v2/polyfill.js"></script>

<script src="//cdn.jsdelivr.net/combine/npm/pace-js@1.0.2/pace.min.js,npm/pjax@0.2.8/pjax.min.js,npm/whatwg-fetch@3.4.0/dist/fetch.umd.min.js,npm/animejs@3.2.0/lib/anime.min.js,npm/algoliasearch@4/dist/algoliasearch-lite.umd.js,npm/instantsearch.js@4/dist/instantsearch.production.min.js,npm/lozad@1/dist/lozad.min.js,npm/quicklink@2/dist/quicklink.umd.js"></script>

<script src="/js/app.js?v=0.2.5"></script>




</body>
</html>
